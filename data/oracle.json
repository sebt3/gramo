{
  "name": "oracle",
  "objects": [
    {
      "alternatives": [],
      "name": "com.oracle.mysql.v1.NdbCluster",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "The desired state of a MySQL NDB Cluster.",
            "properties": {
              "dataNode": {
                "description": "DataNode specifies the configuration of the data node running in MySQL Cluster.",
                "type": "object",
                "required": [
                  "nodeCount"
                ],
                "properties": {
                  "config": {
                    "description": "Config is a map of default MySQL Cluster Data node configurations. \n More info : https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-params-ndbd.html",
                    "type": "object",
                    "additionalProperties": {
                      "x-kubernetes-int-or-string": true,
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "ndbPodSpec": {
                    "description": "NdbPodSpec contains a subset of PodSpec fields which when set will be copied into to the podSpec of Data node's statefulset definition.",
                    "type": "object",
                    "properties": {
                      "affinity": {
                        "description": "If specified, the pod's scheduling constraints",
                        "type": "object",
                        "properties": {
                          "nodeAffinity": {
                            "description": "Describes node affinity scheduling rules for the pod.",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                  "type": "object",
                                  "required": [
                                    "preference",
                                    "weight"
                                  ],
                                  "properties": {
                                    "preference": {
                                      "description": "A node selector term, associated with the corresponding weight.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "A list of node selector requirements by node's labels.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchFields": {
                                          "description": "A list of node selector requirements by node's fields.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "weight": {
                                      "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                                "type": "object",
                                "required": [
                                  "nodeSelectorTerms"
                                ],
                                "properties": {
                                  "nodeSelectorTerms": {
                                    "description": "Required. A list of node selector terms. The terms are ORed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "A list of node selector requirements by node's labels.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchFields": {
                                          "description": "A list of node selector requirements by node's fields.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          },
                          "podAffinity": {
                            "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                  "type": "object",
                                  "required": [
                                    "podAffinityTerm",
                                    "weight"
                                  ],
                                  "properties": {
                                    "podAffinityTerm": {
                                      "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                      "type": "object",
                                      "required": [
                                        "topologyKey"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "description": "A label query over a set of resources, in this case pods.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaceSelector": {
                                          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaces": {
                                          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "topologyKey": {
                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "weight": {
                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                "type": "array",
                                "items": {
                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                  "type": "object",
                                  "required": [
                                    "topologyKey"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label query over a set of resources, in this case pods.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaceSelector": {
                                      "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "podAntiAffinity": {
                            "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                  "type": "object",
                                  "required": [
                                    "podAffinityTerm",
                                    "weight"
                                  ],
                                  "properties": {
                                    "podAffinityTerm": {
                                      "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                      "type": "object",
                                      "required": [
                                        "topologyKey"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "description": "A label query over a set of resources, in this case pods.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaceSelector": {
                                          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaces": {
                                          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "topologyKey": {
                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "weight": {
                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                "type": "array",
                                "items": {
                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                  "type": "object",
                                  "required": [
                                    "topologyKey"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label query over a set of resources, in this case pods.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaceSelector": {
                                      "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "nodeSelector": {
                        "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. \n More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "resources": {
                        "description": "Total compute Resources required by this pod. Cannot be updated. \n More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "properties": {
                          "claims": {
                            "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                            "type": "array",
                            "items": {
                              "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "name"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "limits": {
                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          },
                          "requests": {
                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          }
                        }
                      },
                      "schedulerName": {
                        "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                        "type": "string"
                      },
                      "tolerations": {
                        "description": "If specified, the pod's tolerations.",
                        "type": "array",
                        "items": {
                          "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                          "type": "object",
                          "properties": {
                            "effect": {
                              "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                              "type": "string"
                            },
                            "key": {
                              "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                              "type": "string"
                            },
                            "tolerationSeconds": {
                              "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "value": {
                              "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "nodeCount": {
                    "description": "The total number of data nodes in MySQL Cluster. The node count needs to be a multiple of the redundancyLevel. A maximum of 144 data nodes are allowed to run in a single MySQL Cluster.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 144,
                    "minimum": 1
                  },
                  "pvcSpec": {
                    "description": "PVCSpec is the PersistentVolumeClaimSpec to be used as the VolumeClaimTemplate of the data node statefulset. A PVC will be created for each data node by the statefulset controller and will be loaded into the data node pod and the container.",
                    "type": "object",
                    "properties": {
                      "accessModes": {
                        "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "dataSource": {
                        "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.",
                        "type": "object",
                        "required": [
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "apiGroup": {
                            "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind is the type of resource being referenced",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of resource being referenced",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "dataSourceRef": {
                        "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                        "type": "object",
                        "required": [
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "apiGroup": {
                            "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind is the type of resource being referenced",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of resource being referenced",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                            "type": "string"
                          }
                        }
                      },
                      "resources": {
                        "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                        "type": "object",
                        "properties": {
                          "claims": {
                            "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                            "type": "array",
                            "items": {
                              "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "name"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "limits": {
                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          },
                          "requests": {
                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          }
                        }
                      },
                      "selector": {
                        "description": "selector is a label query over volumes to consider for binding.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "storageClassName": {
                        "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                        "type": "string"
                      },
                      "volumeMode": {
                        "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                        "type": "string"
                      },
                      "volumeName": {
                        "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "freeAPISlots": {
                "description": "The number of extra API sections declared in the MySQL Cluster config, in addition to the API sections declared implicitly by the NDB Operator for the MySQL Servers. Any NDBAPI application can connect to the MySQL Cluster via these free slots.",
                "type": "integer",
                "format": "int32",
                "default": 2
              },
              "image": {
                "description": "The name of the MySQL Ndb Cluster image to be used. If not specified, \"container-registry.oracle.com/mysql/community-cluster:8.4.0\" will be used.",
                "type": "string",
                "default": "container-registry.oracle.com/mysql/community-cluster:8.4.0"
              },
              "imagePullPolicy": {
                "description": "ImagePullPolicy describes a policy for if/when to pull the MySQL Cluster container image",
                "type": "string",
                "enum": [
                  "Always",
                  "Never",
                  "IfNotPresent"
                ],
                "default": "IfNotPresent"
              },
              "imagePullSecretName": {
                "description": "ImagePullSecretName optionally specifies the name of the secret that holds the credentials required for pulling the MySQL Cluster image.",
                "type": "string"
              },
              "managementNode": {
                "description": "ManagementNode specifies the configuration of the management node running in MySQL Cluster.",
                "type": "object",
                "properties": {
                  "config": {
                    "description": "Config is a map of default MySQL Cluster Management node configurations. \n More info : https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-params-mgmd.html",
                    "type": "object",
                    "additionalProperties": {
                      "x-kubernetes-int-or-string": true,
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "enableLoadBalancer": {
                    "description": "EnableLoadBalancer exposes the management servers externally using the kubernetes cloud provider's load balancer. By default, the operator creates a ClusterIP type service to expose the management server pods internally within the kubernetes cluster. If EnableLoadBalancer is set to true, a LoadBalancer type service will be created instead, exposing the management Servers outside the kubernetes cluster.",
                    "type": "boolean",
                    "default": false
                  },
                  "ndbPodSpec": {
                    "description": "NdbPodSpec contains a subset of PodSpec fields which when set will be copied into to the podSpec of Management node's statefulset definition.",
                    "type": "object",
                    "properties": {
                      "affinity": {
                        "description": "If specified, the pod's scheduling constraints",
                        "type": "object",
                        "properties": {
                          "nodeAffinity": {
                            "description": "Describes node affinity scheduling rules for the pod.",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                  "type": "object",
                                  "required": [
                                    "preference",
                                    "weight"
                                  ],
                                  "properties": {
                                    "preference": {
                                      "description": "A node selector term, associated with the corresponding weight.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "A list of node selector requirements by node's labels.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchFields": {
                                          "description": "A list of node selector requirements by node's fields.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "weight": {
                                      "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                                "type": "object",
                                "required": [
                                  "nodeSelectorTerms"
                                ],
                                "properties": {
                                  "nodeSelectorTerms": {
                                    "description": "Required. A list of node selector terms. The terms are ORed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "A list of node selector requirements by node's labels.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchFields": {
                                          "description": "A list of node selector requirements by node's fields.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          },
                          "podAffinity": {
                            "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                  "type": "object",
                                  "required": [
                                    "podAffinityTerm",
                                    "weight"
                                  ],
                                  "properties": {
                                    "podAffinityTerm": {
                                      "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                      "type": "object",
                                      "required": [
                                        "topologyKey"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "description": "A label query over a set of resources, in this case pods.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaceSelector": {
                                          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaces": {
                                          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "topologyKey": {
                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "weight": {
                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                "type": "array",
                                "items": {
                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                  "type": "object",
                                  "required": [
                                    "topologyKey"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label query over a set of resources, in this case pods.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaceSelector": {
                                      "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "podAntiAffinity": {
                            "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                  "type": "object",
                                  "required": [
                                    "podAffinityTerm",
                                    "weight"
                                  ],
                                  "properties": {
                                    "podAffinityTerm": {
                                      "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                      "type": "object",
                                      "required": [
                                        "topologyKey"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "description": "A label query over a set of resources, in this case pods.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaceSelector": {
                                          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaces": {
                                          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "topologyKey": {
                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "weight": {
                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                "type": "array",
                                "items": {
                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                  "type": "object",
                                  "required": [
                                    "topologyKey"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label query over a set of resources, in this case pods.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaceSelector": {
                                      "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "nodeSelector": {
                        "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. \n More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "resources": {
                        "description": "Total compute Resources required by this pod. Cannot be updated. \n More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "properties": {
                          "claims": {
                            "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                            "type": "array",
                            "items": {
                              "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "name"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "limits": {
                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          },
                          "requests": {
                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          }
                        }
                      },
                      "schedulerName": {
                        "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                        "type": "string"
                      },
                      "tolerations": {
                        "description": "If specified, the pod's tolerations.",
                        "type": "array",
                        "items": {
                          "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                          "type": "object",
                          "properties": {
                            "effect": {
                              "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                              "type": "string"
                            },
                            "key": {
                              "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                              "type": "string"
                            },
                            "tolerationSeconds": {
                              "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "value": {
                              "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "mysqlNode": {
                "description": "MysqlNode specifies the configuration of the MySQL Servers running in the cluster. Note that the NDB Operator requires atleast one MySQL Server running in the cluster for internal operations. If no MySQL Server is specified, the operator will by default add one MySQL Server to the spec.",
                "type": "object",
                "required": [
                  "nodeCount"
                ],
                "properties": {
                  "connectionPoolSize": {
                    "description": "ConnectionPoolSize is the number of connections a single MySQL Server should use to connect to the MySQL Cluster nodes. More info : https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-options-variables.html#option_mysqld_ndb-cluster-connection-pool",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 63,
                    "minimum": 1,
                    "default": 1
                  },
                  "enableLoadBalancer": {
                    "description": "EnableLoadBalancer exposes the MySQL servers externally using the kubernetes cloud provider's load balancer. By default, the operator creates a ClusterIP type service to expose the MySQL server pods internally within the kubernetes cluster. If EnableLoadBalancer is set to true, a LoadBalancer type service will be created instead, exposing the MySQL servers outside the kubernetes cluster.",
                    "type": "boolean",
                    "default": false
                  },
                  "initScripts": {
                    "description": "InitScripts is a map of configMap names from the same namespace and optionally an array of keys which store the SQL scripts to be executed during MySQL Server initialization. If key names are omitted, contents of all the keys will be treated as initialization SQL scripts. All scripts will be mounted into the MySQL pods and will be executed in the alphabetical order of configMap names and key names.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "maxNodeCount": {
                    "description": "MaxNodeCount is the count up to which the MySQL Servers would be allowed to scale up without forcing a MySQL Cluster config update. If unspecified, operator will define the MySQL Cluster config with API sections for two additional MySQL Servers.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "myCnf": {
                    "description": "Configuration options to pass to the MySQL Server when it is started.",
                    "type": "string"
                  },
                  "ndbPodSpec": {
                    "description": "NdbPodSpec contains a subset of K8s PodSpec fields which when set will be copied into to the podSpec of MySQL Server StatefulSet.",
                    "type": "object",
                    "properties": {
                      "affinity": {
                        "description": "If specified, the pod's scheduling constraints",
                        "type": "object",
                        "properties": {
                          "nodeAffinity": {
                            "description": "Describes node affinity scheduling rules for the pod.",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                  "type": "object",
                                  "required": [
                                    "preference",
                                    "weight"
                                  ],
                                  "properties": {
                                    "preference": {
                                      "description": "A node selector term, associated with the corresponding weight.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "A list of node selector requirements by node's labels.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchFields": {
                                          "description": "A list of node selector requirements by node's fields.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "weight": {
                                      "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                                "type": "object",
                                "required": [
                                  "nodeSelectorTerms"
                                ],
                                "properties": {
                                  "nodeSelectorTerms": {
                                    "description": "Required. A list of node selector terms. The terms are ORed.",
                                    "type": "array",
                                    "items": {
                                      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "A list of node selector requirements by node's labels.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchFields": {
                                          "description": "A list of node selector requirements by node's fields.",
                                          "type": "array",
                                          "items": {
                                            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "The label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic"
                              }
                            }
                          },
                          "podAffinity": {
                            "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                  "type": "object",
                                  "required": [
                                    "podAffinityTerm",
                                    "weight"
                                  ],
                                  "properties": {
                                    "podAffinityTerm": {
                                      "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                      "type": "object",
                                      "required": [
                                        "topologyKey"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "description": "A label query over a set of resources, in this case pods.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaceSelector": {
                                          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaces": {
                                          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "topologyKey": {
                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "weight": {
                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                "type": "array",
                                "items": {
                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                  "type": "object",
                                  "required": [
                                    "topologyKey"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label query over a set of resources, in this case pods.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaceSelector": {
                                      "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "podAntiAffinity": {
                            "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                            "type": "object",
                            "properties": {
                              "preferredDuringSchedulingIgnoredDuringExecution": {
                                "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                "type": "array",
                                "items": {
                                  "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                  "type": "object",
                                  "required": [
                                    "podAffinityTerm",
                                    "weight"
                                  ],
                                  "properties": {
                                    "podAffinityTerm": {
                                      "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                      "type": "object",
                                      "required": [
                                        "topologyKey"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "description": "A label query over a set of resources, in this case pods.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaceSelector": {
                                          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "namespaces": {
                                          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "topologyKey": {
                                          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "weight": {
                                      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "requiredDuringSchedulingIgnoredDuringExecution": {
                                "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                "type": "array",
                                "items": {
                                  "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                  "type": "object",
                                  "required": [
                                    "topologyKey"
                                  ],
                                  "properties": {
                                    "labelSelector": {
                                      "description": "A label query over a set of resources, in this case pods.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaceSelector": {
                                      "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                          "type": "array",
                                          "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "description": "key is the label key that the selector applies to.",
                                                "type": "string"
                                              },
                                              "operator": {
                                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "namespaces": {
                                      "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "topologyKey": {
                                      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "nodeSelector": {
                        "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. \n More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "resources": {
                        "description": "Total compute Resources required by this pod. Cannot be updated. \n More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                        "type": "object",
                        "properties": {
                          "claims": {
                            "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                            "type": "array",
                            "items": {
                              "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "name"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "limits": {
                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          },
                          "requests": {
                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          }
                        }
                      },
                      "schedulerName": {
                        "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                        "type": "string"
                      },
                      "tolerations": {
                        "description": "If specified, the pod's tolerations.",
                        "type": "array",
                        "items": {
                          "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                          "type": "object",
                          "properties": {
                            "effect": {
                              "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                              "type": "string"
                            },
                            "key": {
                              "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                              "type": "string"
                            },
                            "tolerationSeconds": {
                              "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "value": {
                              "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "nodeCount": {
                    "description": "NodeCount is the number of MySQL Servers to be started by the Operator",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "default": 1
                  },
                  "pvcSpec": {
                    "description": "PVCSpec is the PersistentVolumeClaimSpec to be used as the VolumeClaimTemplate of the mysql server statefulset. A PVC will be created for each mysql server by the statefulset controller and will be loaded into the mysql server pod and the container.",
                    "type": "object",
                    "properties": {
                      "accessModes": {
                        "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "dataSource": {
                        "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.",
                        "type": "object",
                        "required": [
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "apiGroup": {
                            "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind is the type of resource being referenced",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of resource being referenced",
                            "type": "string"
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "dataSourceRef": {
                        "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                        "type": "object",
                        "required": [
                          "kind",
                          "name"
                        ],
                        "properties": {
                          "apiGroup": {
                            "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind is the type of resource being referenced",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the name of resource being referenced",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                            "type": "string"
                          }
                        }
                      },
                      "resources": {
                        "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                        "type": "object",
                        "properties": {
                          "claims": {
                            "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                            "type": "array",
                            "items": {
                              "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "name"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "limits": {
                            "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          },
                          "requests": {
                            "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                            "type": "object",
                            "additionalProperties": {
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            }
                          }
                        }
                      },
                      "selector": {
                        "description": "selector is a label query over volumes to consider for binding.",
                        "type": "object",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "type": "array",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "type": "object",
                              "required": [
                                "key",
                                "operator"
                              ],
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "matchLabels": {
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "storageClassName": {
                        "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                        "type": "string"
                      },
                      "volumeMode": {
                        "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                        "type": "string"
                      },
                      "volumeName": {
                        "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                        "type": "string"
                      }
                    }
                  },
                  "rootHost": {
                    "description": "RootHost is the host or hosts from which the root user can connect to the MySQL Server. If unspecified, root user will be able to connect from any host that can access the MySQL Server.",
                    "type": "string",
                    "default": "%"
                  },
                  "rootPasswordSecretName": {
                    "description": "The name of the Secret that holds the password to be set for the MySQL root accounts. The Secret should have a 'password' key that holds the password. If unspecified, a Secret will be created by the operator with a generated name of format \"<ndb-resource-name>-mysqld-root-password\"",
                    "type": "string"
                  }
                }
              },
              "redundancyLevel": {
                "description": "The number of copies of all data stored in MySQL Cluster. This also defines the number of nodes in a node group. Supported values are 1, 2, 3, and 4. Note that, setting this to 1 means that there is only a single copy of all MySQL Cluster data and failure of any Data node will cause the entire MySQL Cluster to fail. The operator also implicitly decides the number of Management nodes to be added to the MySQL Cluster configuration based on this value. For a redundancy level of 1, one Management node will be created. For 2 or higher, two Management nodes will be created. This value is immutable. \n More info : https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-ndbd-definition.html#ndbparam-ndbd-noofreplicas",
                "type": "integer",
                "format": "int32",
                "maximum": 4,
                "minimum": 1,
                "default": 2
              },
              "tdeSecretName": {
                "description": "The name of the Secret that holds the encryption key or password required for Transparent Data Encryption (TDE) in MySQL Cluster. If a value is provided, the ndb operator will enable TDE and utilize the password stored in the Secret as the file system password for all data nodes within the MySQL Cluster. If no value is provided, TDE will not be enabled for MySQL Cluster.",
                "type": "string"
              }
            }
          },
          "status": {
            "type": "object",
            "description": "The status of the NdbCluster resource and the MySQL Cluster managed by it.",
            "properties": {
              "conditions": {
                "description": "Conditions represent the latest available observations of the MySQL Cluster's current state.",
                "type": "array",
                "items": {
                  "description": "NdbClusterCondition describes the state of a MySQL Cluster installation at a certain point.",
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "Last time the condition transitioned from one status to another.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "A human-readable message indicating details about the transition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "The reason for the condition's last transition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the condition, one of True, False, Unknown.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of NdbCluster condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "generatedRootPasswordSecretName": {
                "description": "GeneratedRootPasswordSecretName is the name of the secret generated by the operator to be used as the MySQL Server root account password. This will be set to nil if a secret has been already provided to the operator via spec.mysqlNode.rootPasswordSecretName.",
                "type": "string"
              },
              "processedGeneration": {
                "description": "ProcessedGeneration holds the latest generation of the Ndb resource whose specs have been successfully applied to the MySQL Cluster running inside K8s.",
                "type": "integer",
                "format": "int64"
              },
              "readyDataNodes": {
                "description": "The status of the MySQL Cluster Data nodes.",
                "type": "string"
              },
              "readyManagementNodes": {
                "description": "The status of the MySQL Cluster Management nodes.",
                "type": "string"
              },
              "readyMySQLServers": {
                "description": "The status of the MySQL Servers.",
                "type": "string"
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "NdbCluster is the Schema for the Ndb CRD API",
        "type": "object",
        "required": [
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "mysql.oracle.com",
            "kind": "NdbCluster",
            "version": "v1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "ndbclusters.mysql.oracle.com"
        },
        "spec": {
          "group": "mysql.oracle.com",
          "names": {
            "plural": "ndbclusters",
            "singular": "ndbcluster",
            "shortNames": [
              "ndb",
              "ndbc"
            ],
            "kind": "NdbCluster",
            "listKind": "NdbClusterList",
            "categories": [
              "all"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "NdbCluster is the Schema for the Ndb CRD API",
                  "type": "object",
                  "required": [
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "The desired state of a MySQL NDB Cluster.",
                      "type": "object",
                      "properties": {
                        "dataNode": {
                          "description": "DataNode specifies the configuration of the data node running in MySQL Cluster.",
                          "type": "object",
                          "required": [
                            "nodeCount"
                          ],
                          "properties": {
                            "config": {
                              "description": "Config is a map of default MySQL Cluster Data node configurations. \n More info : https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-params-ndbd.html",
                              "type": "object",
                              "additionalProperties": {
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "ndbPodSpec": {
                              "description": "NdbPodSpec contains a subset of PodSpec fields which when set will be copied into to the podSpec of Data node's statefulset definition.",
                              "type": "object",
                              "properties": {
                                "affinity": {
                                  "description": "If specified, the pod's scheduling constraints",
                                  "type": "object",
                                  "properties": {
                                    "nodeAffinity": {
                                      "description": "Describes node affinity scheduling rules for the pod.",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                            "type": "object",
                                            "required": [
                                              "preference",
                                              "weight"
                                            ],
                                            "properties": {
                                              "preference": {
                                                "description": "A node selector term, associated with the corresponding weight.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "A list of node selector requirements by node's labels.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchFields": {
                                                    "description": "A list of node selector requirements by node's fields.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "weight": {
                                                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                                          "type": "object",
                                          "required": [
                                            "nodeSelectorTerms"
                                          ],
                                          "properties": {
                                            "nodeSelectorTerms": {
                                              "description": "Required. A list of node selector terms. The terms are ORed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "A list of node selector requirements by node's labels.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchFields": {
                                                    "description": "A list of node selector requirements by node's fields.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        }
                                      }
                                    },
                                    "podAffinity": {
                                      "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                            "type": "object",
                                            "required": [
                                              "podAffinityTerm",
                                              "weight"
                                            ],
                                            "properties": {
                                              "podAffinityTerm": {
                                                "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                                "type": "object",
                                                "required": [
                                                  "topologyKey"
                                                ],
                                                "properties": {
                                                  "labelSelector": {
                                                    "description": "A label query over a set of resources, in this case pods.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaceSelector": {
                                                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaces": {
                                                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "topologyKey": {
                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "weight": {
                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                          "type": "array",
                                          "items": {
                                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "podAntiAffinity": {
                                      "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                            "type": "object",
                                            "required": [
                                              "podAffinityTerm",
                                              "weight"
                                            ],
                                            "properties": {
                                              "podAffinityTerm": {
                                                "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                                "type": "object",
                                                "required": [
                                                  "topologyKey"
                                                ],
                                                "properties": {
                                                  "labelSelector": {
                                                    "description": "A label query over a set of resources, in this case pods.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaceSelector": {
                                                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaces": {
                                                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "topologyKey": {
                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "weight": {
                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                          "type": "array",
                                          "items": {
                                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nodeSelector": {
                                  "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. \n More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "resources": {
                                  "description": "Total compute Resources required by this pod. Cannot be updated. \n More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                  "type": "object",
                                  "properties": {
                                    "claims": {
                                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                                      "type": "array",
                                      "items": {
                                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-map-keys": [
                                        "name"
                                      ],
                                      "x-kubernetes-list-type": "map"
                                    },
                                    "limits": {
                                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    },
                                    "requests": {
                                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    }
                                  }
                                },
                                "schedulerName": {
                                  "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                                  "type": "string"
                                },
                                "tolerations": {
                                  "description": "If specified, the pod's tolerations.",
                                  "type": "array",
                                  "items": {
                                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                                    "type": "object",
                                    "properties": {
                                      "effect": {
                                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                        "type": "string"
                                      },
                                      "key": {
                                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                        "type": "string"
                                      },
                                      "tolerationSeconds": {
                                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "value": {
                                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "nodeCount": {
                              "description": "The total number of data nodes in MySQL Cluster. The node count needs to be a multiple of the redundancyLevel. A maximum of 144 data nodes are allowed to run in a single MySQL Cluster.",
                              "type": "integer",
                              "format": "int32",
                              "maximum": 144,
                              "minimum": 1
                            },
                            "pvcSpec": {
                              "description": "PVCSpec is the PersistentVolumeClaimSpec to be used as the VolumeClaimTemplate of the data node statefulset. A PVC will be created for each data node by the statefulset controller and will be loaded into the data node pod and the container.",
                              "type": "object",
                              "properties": {
                                "accessModes": {
                                  "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "dataSource": {
                                  "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.",
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "name"
                                  ],
                                  "properties": {
                                    "apiGroup": {
                                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                      "type": "string"
                                    },
                                    "kind": {
                                      "description": "Kind is the type of resource being referenced",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of resource being referenced",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "dataSourceRef": {
                                  "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "name"
                                  ],
                                  "properties": {
                                    "apiGroup": {
                                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                      "type": "string"
                                    },
                                    "kind": {
                                      "description": "Kind is the type of resource being referenced",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of resource being referenced",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "resources": {
                                  "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                                  "type": "object",
                                  "properties": {
                                    "claims": {
                                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                                      "type": "array",
                                      "items": {
                                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-map-keys": [
                                        "name"
                                      ],
                                      "x-kubernetes-list-type": "map"
                                    },
                                    "limits": {
                                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    },
                                    "requests": {
                                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    }
                                  }
                                },
                                "selector": {
                                  "description": "selector is a label query over volumes to consider for binding.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "storageClassName": {
                                  "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                                  "type": "string"
                                },
                                "volumeMode": {
                                  "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                                  "type": "string"
                                },
                                "volumeName": {
                                  "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "freeAPISlots": {
                          "description": "The number of extra API sections declared in the MySQL Cluster config, in addition to the API sections declared implicitly by the NDB Operator for the MySQL Servers. Any NDBAPI application can connect to the MySQL Cluster via these free slots.",
                          "type": "integer",
                          "format": "int32",
                          "default": 2
                        },
                        "image": {
                          "description": "The name of the MySQL Ndb Cluster image to be used. If not specified, \"container-registry.oracle.com/mysql/community-cluster:8.4.0\" will be used.",
                          "type": "string",
                          "default": "container-registry.oracle.com/mysql/community-cluster:8.4.0"
                        },
                        "imagePullPolicy": {
                          "description": "ImagePullPolicy describes a policy for if/when to pull the MySQL Cluster container image",
                          "type": "string",
                          "default": "IfNotPresent",
                          "enum": [
                            "Always",
                            "Never",
                            "IfNotPresent"
                          ]
                        },
                        "imagePullSecretName": {
                          "description": "ImagePullSecretName optionally specifies the name of the secret that holds the credentials required for pulling the MySQL Cluster image.",
                          "type": "string"
                        },
                        "managementNode": {
                          "description": "ManagementNode specifies the configuration of the management node running in MySQL Cluster.",
                          "type": "object",
                          "properties": {
                            "config": {
                              "description": "Config is a map of default MySQL Cluster Management node configurations. \n More info : https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-params-mgmd.html",
                              "type": "object",
                              "additionalProperties": {
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "enableLoadBalancer": {
                              "description": "EnableLoadBalancer exposes the management servers externally using the kubernetes cloud provider's load balancer. By default, the operator creates a ClusterIP type service to expose the management server pods internally within the kubernetes cluster. If EnableLoadBalancer is set to true, a LoadBalancer type service will be created instead, exposing the management Servers outside the kubernetes cluster.",
                              "type": "boolean",
                              "default": false
                            },
                            "ndbPodSpec": {
                              "description": "NdbPodSpec contains a subset of PodSpec fields which when set will be copied into to the podSpec of Management node's statefulset definition.",
                              "type": "object",
                              "properties": {
                                "affinity": {
                                  "description": "If specified, the pod's scheduling constraints",
                                  "type": "object",
                                  "properties": {
                                    "nodeAffinity": {
                                      "description": "Describes node affinity scheduling rules for the pod.",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                            "type": "object",
                                            "required": [
                                              "preference",
                                              "weight"
                                            ],
                                            "properties": {
                                              "preference": {
                                                "description": "A node selector term, associated with the corresponding weight.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "A list of node selector requirements by node's labels.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchFields": {
                                                    "description": "A list of node selector requirements by node's fields.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "weight": {
                                                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                                          "type": "object",
                                          "required": [
                                            "nodeSelectorTerms"
                                          ],
                                          "properties": {
                                            "nodeSelectorTerms": {
                                              "description": "Required. A list of node selector terms. The terms are ORed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "A list of node selector requirements by node's labels.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchFields": {
                                                    "description": "A list of node selector requirements by node's fields.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        }
                                      }
                                    },
                                    "podAffinity": {
                                      "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                            "type": "object",
                                            "required": [
                                              "podAffinityTerm",
                                              "weight"
                                            ],
                                            "properties": {
                                              "podAffinityTerm": {
                                                "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                                "type": "object",
                                                "required": [
                                                  "topologyKey"
                                                ],
                                                "properties": {
                                                  "labelSelector": {
                                                    "description": "A label query over a set of resources, in this case pods.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaceSelector": {
                                                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaces": {
                                                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "topologyKey": {
                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "weight": {
                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                          "type": "array",
                                          "items": {
                                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "podAntiAffinity": {
                                      "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                            "type": "object",
                                            "required": [
                                              "podAffinityTerm",
                                              "weight"
                                            ],
                                            "properties": {
                                              "podAffinityTerm": {
                                                "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                                "type": "object",
                                                "required": [
                                                  "topologyKey"
                                                ],
                                                "properties": {
                                                  "labelSelector": {
                                                    "description": "A label query over a set of resources, in this case pods.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaceSelector": {
                                                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaces": {
                                                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "topologyKey": {
                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "weight": {
                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                          "type": "array",
                                          "items": {
                                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nodeSelector": {
                                  "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. \n More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "resources": {
                                  "description": "Total compute Resources required by this pod. Cannot be updated. \n More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                  "type": "object",
                                  "properties": {
                                    "claims": {
                                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                                      "type": "array",
                                      "items": {
                                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-map-keys": [
                                        "name"
                                      ],
                                      "x-kubernetes-list-type": "map"
                                    },
                                    "limits": {
                                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    },
                                    "requests": {
                                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    }
                                  }
                                },
                                "schedulerName": {
                                  "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                                  "type": "string"
                                },
                                "tolerations": {
                                  "description": "If specified, the pod's tolerations.",
                                  "type": "array",
                                  "items": {
                                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                                    "type": "object",
                                    "properties": {
                                      "effect": {
                                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                        "type": "string"
                                      },
                                      "key": {
                                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                        "type": "string"
                                      },
                                      "tolerationSeconds": {
                                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "value": {
                                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "mysqlNode": {
                          "description": "MysqlNode specifies the configuration of the MySQL Servers running in the cluster. Note that the NDB Operator requires atleast one MySQL Server running in the cluster for internal operations. If no MySQL Server is specified, the operator will by default add one MySQL Server to the spec.",
                          "type": "object",
                          "required": [
                            "nodeCount"
                          ],
                          "properties": {
                            "connectionPoolSize": {
                              "description": "ConnectionPoolSize is the number of connections a single MySQL Server should use to connect to the MySQL Cluster nodes. More info : https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-options-variables.html#option_mysqld_ndb-cluster-connection-pool",
                              "type": "integer",
                              "format": "int32",
                              "default": 1,
                              "maximum": 63,
                              "minimum": 1
                            },
                            "enableLoadBalancer": {
                              "description": "EnableLoadBalancer exposes the MySQL servers externally using the kubernetes cloud provider's load balancer. By default, the operator creates a ClusterIP type service to expose the MySQL server pods internally within the kubernetes cluster. If EnableLoadBalancer is set to true, a LoadBalancer type service will be created instead, exposing the MySQL servers outside the kubernetes cluster.",
                              "type": "boolean",
                              "default": false
                            },
                            "initScripts": {
                              "description": "InitScripts is a map of configMap names from the same namespace and optionally an array of keys which store the SQL scripts to be executed during MySQL Server initialization. If key names are omitted, contents of all the keys will be treated as initialization SQL scripts. All scripts will be mounted into the MySQL pods and will be executed in the alphabetical order of configMap names and key names.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "maxNodeCount": {
                              "description": "MaxNodeCount is the count up to which the MySQL Servers would be allowed to scale up without forcing a MySQL Cluster config update. If unspecified, operator will define the MySQL Cluster config with API sections for two additional MySQL Servers.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "myCnf": {
                              "description": "Configuration options to pass to the MySQL Server when it is started.",
                              "type": "string"
                            },
                            "ndbPodSpec": {
                              "description": "NdbPodSpec contains a subset of K8s PodSpec fields which when set will be copied into to the podSpec of MySQL Server StatefulSet.",
                              "type": "object",
                              "properties": {
                                "affinity": {
                                  "description": "If specified, the pod's scheduling constraints",
                                  "type": "object",
                                  "properties": {
                                    "nodeAffinity": {
                                      "description": "Describes node affinity scheduling rules for the pod.",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                            "type": "object",
                                            "required": [
                                              "preference",
                                              "weight"
                                            ],
                                            "properties": {
                                              "preference": {
                                                "description": "A node selector term, associated with the corresponding weight.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "A list of node selector requirements by node's labels.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchFields": {
                                                    "description": "A list of node selector requirements by node's fields.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "weight": {
                                                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                                          "type": "object",
                                          "required": [
                                            "nodeSelectorTerms"
                                          ],
                                          "properties": {
                                            "nodeSelectorTerms": {
                                              "description": "Required. A list of node selector terms. The terms are ORed.",
                                              "type": "array",
                                              "items": {
                                                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "A list of node selector requirements by node's labels.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchFields": {
                                                    "description": "A list of node selector requirements by node's fields.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "The label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        }
                                      }
                                    },
                                    "podAffinity": {
                                      "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                            "type": "object",
                                            "required": [
                                              "podAffinityTerm",
                                              "weight"
                                            ],
                                            "properties": {
                                              "podAffinityTerm": {
                                                "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                                "type": "object",
                                                "required": [
                                                  "topologyKey"
                                                ],
                                                "properties": {
                                                  "labelSelector": {
                                                    "description": "A label query over a set of resources, in this case pods.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaceSelector": {
                                                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaces": {
                                                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "topologyKey": {
                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "weight": {
                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                          "type": "array",
                                          "items": {
                                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "podAntiAffinity": {
                                      "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                                      "type": "object",
                                      "properties": {
                                        "preferredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                                          "type": "array",
                                          "items": {
                                            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                            "type": "object",
                                            "required": [
                                              "podAffinityTerm",
                                              "weight"
                                            ],
                                            "properties": {
                                              "podAffinityTerm": {
                                                "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                                "type": "object",
                                                "required": [
                                                  "topologyKey"
                                                ],
                                                "properties": {
                                                  "labelSelector": {
                                                    "description": "A label query over a set of resources, in this case pods.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaceSelector": {
                                                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                        "type": "array",
                                                        "items": {
                                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "description": "key is the label key that the selector applies to.",
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "namespaces": {
                                                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "topologyKey": {
                                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "weight": {
                                                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                                "type": "integer",
                                                "format": "int32"
                                              }
                                            }
                                          }
                                        },
                                        "requiredDuringSchedulingIgnoredDuringExecution": {
                                          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                          "type": "array",
                                          "items": {
                                            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                            "type": "object",
                                            "required": [
                                              "topologyKey"
                                            ],
                                            "properties": {
                                              "labelSelector": {
                                                "description": "A label query over a set of resources, in this case pods.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaceSelector": {
                                                "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.",
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                    "type": "array",
                                                    "items": {
                                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "description": "key is the label key that the selector applies to.",
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "namespaces": {
                                                "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "topologyKey": {
                                                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nodeSelector": {
                                  "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. \n More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "resources": {
                                  "description": "Total compute Resources required by this pod. Cannot be updated. \n More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                                  "type": "object",
                                  "properties": {
                                    "claims": {
                                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                                      "type": "array",
                                      "items": {
                                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-map-keys": [
                                        "name"
                                      ],
                                      "x-kubernetes-list-type": "map"
                                    },
                                    "limits": {
                                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    },
                                    "requests": {
                                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    }
                                  }
                                },
                                "schedulerName": {
                                  "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
                                  "type": "string"
                                },
                                "tolerations": {
                                  "description": "If specified, the pod's tolerations.",
                                  "type": "array",
                                  "items": {
                                    "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                                    "type": "object",
                                    "properties": {
                                      "effect": {
                                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                        "type": "string"
                                      },
                                      "key": {
                                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                                        "type": "string"
                                      },
                                      "tolerationSeconds": {
                                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "value": {
                                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "nodeCount": {
                              "description": "NodeCount is the number of MySQL Servers to be started by the Operator",
                              "type": "integer",
                              "format": "int32",
                              "default": 1,
                              "minimum": 1
                            },
                            "pvcSpec": {
                              "description": "PVCSpec is the PersistentVolumeClaimSpec to be used as the VolumeClaimTemplate of the mysql server statefulset. A PVC will be created for each mysql server by the statefulset controller and will be loaded into the mysql server pod and the container.",
                              "type": "object",
                              "properties": {
                                "accessModes": {
                                  "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "dataSource": {
                                  "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.",
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "name"
                                  ],
                                  "properties": {
                                    "apiGroup": {
                                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                      "type": "string"
                                    },
                                    "kind": {
                                      "description": "Kind is the type of resource being referenced",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of resource being referenced",
                                      "type": "string"
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "dataSourceRef": {
                                  "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "name"
                                  ],
                                  "properties": {
                                    "apiGroup": {
                                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                      "type": "string"
                                    },
                                    "kind": {
                                      "description": "Kind is the type of resource being referenced",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name is the name of resource being referenced",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "resources": {
                                  "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                                  "type": "object",
                                  "properties": {
                                    "claims": {
                                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                                      "type": "array",
                                      "items": {
                                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-map-keys": [
                                        "name"
                                      ],
                                      "x-kubernetes-list-type": "map"
                                    },
                                    "limits": {
                                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    },
                                    "requests": {
                                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                      "type": "object",
                                      "additionalProperties": {
                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      }
                                    }
                                  }
                                },
                                "selector": {
                                  "description": "selector is a label query over volumes to consider for binding.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "storageClassName": {
                                  "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                                  "type": "string"
                                },
                                "volumeMode": {
                                  "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                                  "type": "string"
                                },
                                "volumeName": {
                                  "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                                  "type": "string"
                                }
                              }
                            },
                            "rootHost": {
                              "description": "RootHost is the host or hosts from which the root user can connect to the MySQL Server. If unspecified, root user will be able to connect from any host that can access the MySQL Server.",
                              "type": "string",
                              "default": "%"
                            },
                            "rootPasswordSecretName": {
                              "description": "The name of the Secret that holds the password to be set for the MySQL root accounts. The Secret should have a 'password' key that holds the password. If unspecified, a Secret will be created by the operator with a generated name of format \"<ndb-resource-name>-mysqld-root-password\"",
                              "type": "string"
                            }
                          }
                        },
                        "redundancyLevel": {
                          "description": "The number of copies of all data stored in MySQL Cluster. This also defines the number of nodes in a node group. Supported values are 1, 2, 3, and 4. Note that, setting this to 1 means that there is only a single copy of all MySQL Cluster data and failure of any Data node will cause the entire MySQL Cluster to fail. The operator also implicitly decides the number of Management nodes to be added to the MySQL Cluster configuration based on this value. For a redundancy level of 1, one Management node will be created. For 2 or higher, two Management nodes will be created. This value is immutable. \n More info : https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-ndbd-definition.html#ndbparam-ndbd-noofreplicas",
                          "type": "integer",
                          "format": "int32",
                          "default": 2,
                          "maximum": 4,
                          "minimum": 1
                        },
                        "tdeSecretName": {
                          "description": "The name of the Secret that holds the encryption key or password required for Transparent Data Encryption (TDE) in MySQL Cluster. If a value is provided, the ndb operator will enable TDE and utilize the password stored in the Secret as the file system password for all data nodes within the MySQL Cluster. If no value is provided, TDE will not be enabled for MySQL Cluster.",
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "description": "The status of the NdbCluster resource and the MySQL Cluster managed by it.",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "description": "Conditions represent the latest available observations of the MySQL Cluster's current state.",
                          "type": "array",
                          "items": {
                            "description": "NdbClusterCondition describes the state of a MySQL Cluster installation at a certain point.",
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "Last time the condition transitioned from one status to another.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "A human-readable message indicating details about the transition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "The reason for the condition's last transition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the condition, one of True, False, Unknown.",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type of NdbCluster condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "generatedRootPasswordSecretName": {
                          "description": "GeneratedRootPasswordSecretName is the name of the secret generated by the operator to be used as the MySQL Server root account password. This will be set to nil if a secret has been already provided to the operator via spec.mysqlNode.rootPasswordSecretName.",
                          "type": "string"
                        },
                        "processedGeneration": {
                          "description": "ProcessedGeneration holds the latest generation of the Ndb resource whose specs have been successfully applied to the MySQL Cluster running inside K8s.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "readyDataNodes": {
                          "description": "The status of the MySQL Cluster Data nodes.",
                          "type": "string"
                        },
                        "readyManagementNodes": {
                          "description": "The status of the MySQL Cluster Management nodes.",
                          "type": "string"
                        },
                        "readyMySQLServers": {
                          "description": "The status of the MySQL Servers.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Replica",
                  "type": "string",
                  "description": "Replica of the MySQL Cluster",
                  "jsonPath": ".spec.redundancyLevel"
                },
                {
                  "name": "Management Nodes",
                  "type": "string",
                  "description": "Number of ready MySQL Cluster Management Nodes",
                  "jsonPath": ".status.readyManagementNodes"
                },
                {
                  "name": "Data Nodes",
                  "type": "string",
                  "description": "Number of ready MySQL Cluster Data Nodes",
                  "jsonPath": ".status.readyDataNodes"
                },
                {
                  "name": "MySQL Servers",
                  "type": "string",
                  "description": "Number of ready MySQL Servers",
                  "jsonPath": ".status.readyMySQLServers"
                },
                {
                  "name": "Age",
                  "type": "date",
                  "description": "Age of the NdbCluster resource",
                  "jsonPath": ".metadata.creationTimestamp"
                },
                {
                  "name": "Up-To-Date",
                  "type": "string",
                  "description": "Indicates if the MySQL Cluster configuration is up-to-date with the spec specified in the NdbCluster resource",
                  "jsonPath": ".status.conditions[?(@.type=='UpToDate')].status"
                }
              ]
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "ndbclusters",
            "singular": "ndbcluster",
            "shortNames": [
              "ndb",
              "ndbc"
            ],
            "kind": "NdbCluster",
            "listKind": "NdbClusterList",
            "categories": [
              "all"
            ]
          },
          "storedVersions": [
            "v1"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "Replica",
          "type": "string",
          "description": "Replica of the MySQL Cluster",
          "jsonPath": ".spec.redundancyLevel"
        },
        {
          "name": "Management Nodes",
          "type": "string",
          "description": "Number of ready MySQL Cluster Management Nodes",
          "jsonPath": ".status.readyManagementNodes"
        },
        {
          "name": "Data Nodes",
          "type": "string",
          "description": "Number of ready MySQL Cluster Data Nodes",
          "jsonPath": ".status.readyDataNodes"
        },
        {
          "name": "MySQL Servers",
          "type": "string",
          "description": "Number of ready MySQL Servers",
          "jsonPath": ".status.readyMySQLServers"
        },
        {
          "name": "Age",
          "type": "date",
          "description": "Age of the NdbCluster resource",
          "jsonPath": ".metadata.creationTimestamp"
        },
        {
          "name": "Up-To-Date",
          "type": "string",
          "description": "Indicates if the MySQL Cluster configuration is up-to-date with the spec specified in the NdbCluster resource",
          "jsonPath": ".status.conditions[?(@.type=='UpToDate')].status"
        }
      ],
      "short": "NdbCluster",
      "apiGroup": "mysql.oracle.com",
      "apiKind": "NdbCluster",
      "apiVersion": "v1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "oracle",
      "sub": "oracle",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.oracle.mysql.v2.InnoDBCluster",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 40
              }
            }
          },
          "spec": {
            "type": "object",
            "required": [
              "secretName"
            ],
            "properties": {
              "backupProfiles": {
                "description": "Backup profile specifications for the cluster, which can be referenced from backup schedules and one-off backup jobs",
                "type": "array",
                "items": {
                  "required": [
                    "name"
                  ],
                  "x-kubernetes-preserve-unknown-fields": true,
                  "type": "object",
                  "properties": {
                    "dumpInstance": {
                      "type": "object",
                      "properties": {
                        "dumpOptions": {
                          "description": "A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "storage": {
                          "type": "object",
                          "properties": {
                            "azure": {
                              "type": "object",
                              "required": [
                                "containerName",
                                "config"
                              ],
                              "properties": {
                                "config": {
                                  "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                  "type": "string"
                                },
                                "containerName": {
                                  "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                  "type": "string"
                                },
                                "prefix": {
                                  "description": "Path in the container where the dump files are stored",
                                  "type": "string"
                                }
                              }
                            },
                            "ociObjectStorage": {
                              "type": "object",
                              "required": [
                                "bucketName",
                                "credentials"
                              ],
                              "properties": {
                                "bucketName": {
                                  "description": "Name of the OCI bucket where backup is stored",
                                  "type": "string"
                                },
                                "credentials": {
                                  "description": "Name of a Secret with data for accessing the bucket",
                                  "type": "string"
                                },
                                "prefix": {
                                  "description": "Path in bucket where backup is stored",
                                  "type": "string"
                                }
                              }
                            },
                            "persistentVolumeClaim": {
                              "description": "Specification of the PVC to be used. Used 'as is' in pod executing the backup.",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "s3": {
                              "type": "object",
                              "required": [
                                "bucketName",
                                "config"
                              ],
                              "properties": {
                                "bucketName": {
                                  "description": "Name of the S3 bucket where the dump is stored",
                                  "type": "string"
                                },
                                "config": {
                                  "description": "Name of a Secret with S3 configuration and credentials",
                                  "type": "string"
                                },
                                "endpoint": {
                                  "description": "Override endpoint URL",
                                  "type": "string"
                                },
                                "prefix": {
                                  "description": "Path in the bucket where the dump files are stored",
                                  "type": "string"
                                },
                                "profile": {
                                  "description": "Profile being used in configuration files",
                                  "type": "string",
                                  "default": ""
                                }
                              }
                            }
                          },
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    },
                    "name": {
                      "description": "Embedded backup profile, referenced as backupProfileName elsewhere",
                      "type": "string"
                    },
                    "podAnnotations": {
                      "type": "object",
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "podLabels": {
                      "type": "object",
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "snapshot": {
                      "type": "object",
                      "properties": {
                        "storage": {
                          "type": "object",
                          "properties": {
                            "azure": {
                              "type": "object",
                              "required": [
                                "containerName",
                                "config"
                              ],
                              "properties": {
                                "config": {
                                  "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                  "type": "string"
                                },
                                "containerName": {
                                  "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                  "type": "string"
                                },
                                "prefix": {
                                  "description": "Path in the container where the dump files are stored",
                                  "type": "string"
                                }
                              }
                            },
                            "ociObjectStorage": {
                              "type": "object",
                              "required": [
                                "bucketName",
                                "credentials"
                              ],
                              "properties": {
                                "bucketName": {
                                  "description": "Bucket name where backup is stored",
                                  "type": "string"
                                },
                                "credentials": {
                                  "description": "Name of a Secret with data for accessing the bucket",
                                  "type": "string"
                                },
                                "prefix": {
                                  "description": "Path in bucket where backup is stored",
                                  "type": "string"
                                }
                              }
                            },
                            "persistentVolumeClaim": {
                              "description": "Specification of the PVC to be used. Used 'as is' in pod executing the backup.",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "s3": {
                              "type": "object",
                              "required": [
                                "bucketName",
                                "config"
                              ],
                              "properties": {
                                "bucketName": {
                                  "description": "Name of the S3 bucket where the dump is stored",
                                  "type": "string"
                                },
                                "config": {
                                  "description": "Name of a Secret with S3 configuration and credentials",
                                  "type": "string"
                                },
                                "endpoint": {
                                  "description": "Override endpoint URL",
                                  "type": "string"
                                },
                                "prefix": {
                                  "description": "Path in the bucket where the dump files are stored",
                                  "type": "string"
                                },
                                "profile": {
                                  "description": "Profile being used in configuration files",
                                  "type": "string",
                                  "default": ""
                                }
                              }
                            }
                          },
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      }
                    }
                  }
                }
              },
              "backupSchedules": {
                "description": "Schedules for periodically executed backups",
                "type": "array",
                "items": {
                  "required": [
                    "name",
                    "schedule"
                  ],
                  "x-kubernetes-preserve-unknown-fields": true,
                  "type": "object",
                  "properties": {
                    "backupProfile": {
                      "description": "backupProfile specification if backupProfileName is not specified",
                      "type": "object",
                      "properties": {
                        "dumpInstance": {
                          "type": "object",
                          "properties": {
                            "dumpOptions": {
                              "description": "A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "storage": {
                              "type": "object",
                              "properties": {
                                "azure": {
                                  "type": "object",
                                  "required": [
                                    "containerName",
                                    "config"
                                  ],
                                  "properties": {
                                    "config": {
                                      "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                      "type": "string"
                                    },
                                    "containerName": {
                                      "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                      "type": "string"
                                    },
                                    "prefix": {
                                      "description": "Path in the container where the dump files are stored",
                                      "type": "string"
                                    }
                                  }
                                },
                                "ociObjectStorage": {
                                  "type": "object",
                                  "required": [
                                    "bucketName",
                                    "credentials"
                                  ],
                                  "properties": {
                                    "bucketName": {
                                      "description": "Name of the OCI Bucket where backup is stored",
                                      "type": "string"
                                    },
                                    "credentials": {
                                      "description": "Name of a Secret with data for accessing the bucket",
                                      "type": "string"
                                    },
                                    "prefix": {
                                      "description": "Path in bucket where backup is stored",
                                      "type": "string"
                                    }
                                  }
                                },
                                "persistentVolumeClaim": {
                                  "description": "Specification of the PVC to be used. Used 'as is' in pod executing the backup.",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "s3": {
                                  "type": "object",
                                  "required": [
                                    "bucketName",
                                    "config"
                                  ],
                                  "properties": {
                                    "bucketName": {
                                      "description": "Name of the S3 bucket where the dump is stored",
                                      "type": "string"
                                    },
                                    "config": {
                                      "description": "Name of a Secret with S3 configuration and credentials",
                                      "type": "string"
                                    },
                                    "endpoint": {
                                      "description": "Override endpoint URL",
                                      "type": "string"
                                    },
                                    "prefix": {
                                      "description": "Path in the bucket where the dump files are stored",
                                      "type": "string"
                                    },
                                    "profile": {
                                      "description": "Profile being used in configuration files",
                                      "type": "string",
                                      "default": ""
                                    }
                                  }
                                }
                              },
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          }
                        },
                        "podAnnotations": {
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "podLabels": {
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      },
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "backupProfileName": {
                      "description": "Name of the backupProfile to be used",
                      "type": "string"
                    },
                    "deleteBackupData": {
                      "description": "Whether to delete the backup data in case the MySQLBackup object created by the job is deleted",
                      "type": "boolean",
                      "default": false
                    },
                    "enabled": {
                      "description": "Whether the schedule is enabled or not",
                      "type": "boolean",
                      "default": true
                    },
                    "name": {
                      "description": "Name of the backup schedule",
                      "type": "string"
                    },
                    "schedule": {
                      "description": "The schedule of the job, syntax as a cron expression",
                      "type": "string"
                    }
                  }
                }
              },
              "baseServerId": {
                "description": "Base value for MySQL server_id for instances in the cluster",
                "type": "integer",
                "maximum": 4294967195,
                "minimum": 0,
                "default": 1000
              },
              "datadirVolumeClaimTemplate": {
                "description": "Template for a PersistentVolumeClaim, to be used as datadir",
                "x-kubernetes-preserve-unknown-fields": true,
                "type": "object"
              },
              "edition": {
                "description": "MySQL Server Edition (community or enterprise)",
                "type": "string",
                "pattern": "^(community|enterprise)$"
              },
              "imagePullPolicy": {
                "description": "Defaults to Always, but set to IfNotPresent in deploy-operator.yaml when deploying Operator",
                "type": "string"
              },
              "imagePullSecrets": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              },
              "imageRepository": {
                "description": "Repository where images are pulled from; defaults to container-registry.oracle.com/mysql",
                "type": "string"
              },
              "initDB": {
                "x-kubernetes-preserve-unknown-fields": true,
                "type": "object",
                "properties": {
                  "clone": {
                    "type": "object",
                    "required": [
                      "donorUrl",
                      "secretKeyRef"
                    ],
                    "properties": {
                      "donorUrl": {
                        "description": "URL of the cluster to clone from",
                        "type": "string"
                      },
                      "rootUser": {
                        "description": "User name used for cloning",
                        "type": "string",
                        "default": "root"
                      },
                      "secretKeyRef": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Secret name with key 'rootPassword' storing the password for the user specified in rootUser",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "dump": {
                    "type": "object",
                    "required": [
                      "storage"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the dump. Not used by the operator, but a descriptive hint for the cluster administrator",
                        "type": "string"
                      },
                      "options": {
                        "description": "A dictionary of key-value pairs passed directly to MySQL Shell's loadDump()",
                        "type": "object",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "path": {
                        "description": "Path to the dump in the PVC. Use when specifying persistentVolumeClaim. Omit for ociObjectStorage, S3, or azure.",
                        "type": "string"
                      },
                      "storage": {
                        "type": "object",
                        "properties": {
                          "azure": {
                            "type": "object",
                            "required": [
                              "containerName",
                              "prefix",
                              "config"
                            ],
                            "properties": {
                              "config": {
                                "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                "type": "string"
                              },
                              "containerName": {
                                "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                "type": "string"
                              },
                              "prefix": {
                                "description": "Path in the container where the dump files are stored",
                                "type": "string"
                              }
                            }
                          },
                          "ociObjectStorage": {
                            "type": "object",
                            "required": [
                              "bucketName",
                              "prefix",
                              "credentials"
                            ],
                            "properties": {
                              "bucketName": {
                                "description": "Name of the OCI bucket where the dump is stored",
                                "type": "string"
                              },
                              "credentials": {
                                "description": "Name of a Secret with data for accessing the bucket",
                                "type": "string"
                              },
                              "prefix": {
                                "description": "Path in the bucket where the dump files are stored",
                                "type": "string"
                              }
                            }
                          },
                          "persistentVolumeClaim": {
                            "description": "Specification of the PVC to be used. Used 'as is' in the cloning pod.",
                            "type": "object",
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "s3": {
                            "type": "object",
                            "required": [
                              "bucketName",
                              "prefix",
                              "config"
                            ],
                            "properties": {
                              "bucketName": {
                                "description": "Name of the S3 bucket where the dump is stored",
                                "type": "string"
                              },
                              "config": {
                                "description": "Name of a Secret with S3 configuration and credentials",
                                "type": "string"
                              },
                              "endpoint": {
                                "description": "Override endpoint URL",
                                "type": "string"
                              },
                              "prefix": {
                                "description": "Path in the bucket where the dump files are stored",
                                "type": "string"
                              },
                              "profile": {
                                "description": "Profile being used in configuration files",
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  }
                }
              },
              "instances": {
                "description": "Number of MySQL replica instances for the cluster",
                "type": "integer",
                "maximum": 9,
                "minimum": 1,
                "default": 1
              },
              "keyring": {
                "description": "Keyring specification",
                "type": "object",
                "properties": {
                  "encryptedFile": {
                    "description": "Keyring 'Encrypted File' specification",
                    "type": "object",
                    "required": [
                      "fileName",
                      "storage",
                      "password"
                    ],
                    "properties": {
                      "fileName": {
                        "description": "Full path to the keyring file name inside the storage volume",
                        "type": "string"
                      },
                      "password": {
                        "description": "Name of a secret that contains password for the keyring in the key 'keyring_password'",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Whether to open the keyring file in read-only mode",
                        "type": "boolean",
                        "default": false
                      },
                      "storage": {
                        "description": "Specification of the volume to be mounted where the keyring file resides",
                        "x-kubernetes-preserve-unknown-fields": true,
                        "type": "object"
                      }
                    }
                  },
                  "file": {
                    "description": "Keyring 'File' specification",
                    "type": "object",
                    "required": [
                      "fileName",
                      "storage"
                    ],
                    "properties": {
                      "fileName": {
                        "description": "Full path to the keyring file name inside the storage volume",
                        "type": "string"
                      },
                      "readOnly": {
                        "description": "Whether to open the keyring file in read-only mode",
                        "type": "boolean",
                        "default": false
                      },
                      "storage": {
                        "description": "Specification of the volume to be mounted where the keyring file resides",
                        "x-kubernetes-preserve-unknown-fields": true,
                        "type": "object"
                      }
                    }
                  },
                  "oci": {
                    "description": "Keyring 'OCI' specification",
                    "type": "object",
                    "required": [
                      "user",
                      "keySecret",
                      "keyFingerprint",
                      "tenancy"
                    ],
                    "properties": {
                      "caCertificate": {
                        "description": "Secret that contains ca.crt field with CA certificate bundle file that the keyring_oci plugin uses for Oracle Cloud Infrastructure certificate verification",
                        "type": "string"
                      },
                      "compartment": {
                        "description": "Compartment identifier in the form ocid1.compartment.oc1...",
                        "type": "string",
                        "pattern": "^ocid1\\.compartment\\."
                      },
                      "endpoints": {
                        "type": "object",
                        "properties": {
                          "encryption": {
                            "description": "Encryption endpoint URI like {identifier}-crypto.kms.{region}.oraclecloud.com",
                            "type": "string"
                          },
                          "management": {
                            "description": "Management endpoint URI like {identifier}-management.kms.{region}.oraclecloud.com",
                            "type": "string"
                          },
                          "secrets": {
                            "description": "Secrets endpoint URI like secrets.vaults.{region}.oci.oraclecloud.com",
                            "type": "string"
                          },
                          "vaults": {
                            "description": "Vaults endpoint URI like vaults.{region}.oci.oraclecloud.com",
                            "type": "string"
                          }
                        }
                      },
                      "keyFingerprint": {
                        "description": "Private key fingerprint",
                        "type": "string",
                        "pattern": "([0-9a-f]{2}:){15}[0-9a-f]{2}$"
                      },
                      "keySecret": {
                        "description": "A secret that contains the private key under the field 'privatekey'",
                        "type": "string"
                      },
                      "masterKey": {
                        "description": "Master key identified in the form ocid1.key.oc1...",
                        "type": "string",
                        "pattern": "^ocid1\\.key\\."
                      },
                      "tenancy": {
                        "description": "Tenancy identifier in the form ocid1.tenancy.oc1...",
                        "type": "string",
                        "pattern": "^ocid1\\.tenancy\\."
                      },
                      "user": {
                        "description": "User identifier in the form of ocid1.user.oc1...",
                        "type": "string",
                        "pattern": "^ocid1\\.user\\."
                      },
                      "virtualVault": {
                        "description": "Vault identifier in the form ocid1.vault.oc1...",
                        "type": "string",
                        "pattern": "^ocid1\\.vault\\."
                      }
                    }
                  }
                }
              },
              "logs": {
                "type": "object",
                "properties": {
                  "collector": {
                    "type": "object",
                    "properties": {
                      "containerName": {
                        "description": "Name of the collector container sidecar",
                        "type": "string",
                        "default": "logcollector"
                      },
                      "env": {
                        "type": "array",
                        "items": {
                          "description": "Environment variables to be passed to the image. Definition will be directly copied like podSpec fields are",
                          "x-kubernetes-preserve-unknown-fields": true,
                          "type": "object"
                        }
                      },
                      "fluentd": {
                        "description": "Properties of the fluentd log collector",
                        "type": "object",
                        "properties": {
                          "additionalFilterConfiguration": {
                            "description": "Raw configuration of additional Fluentd filters to be added to the configuration file",
                            "type": "string"
                          },
                          "errorLog": {
                            "type": "object",
                            "properties": {
                              "options": {
                                "description": "fluentd specific options for the error log",
                                "x-kubernetes-preserve-unknown-fields": true,
                                "type": "object"
                              },
                              "tag": {
                                "description": "Tag for the error log records",
                                "type": "string",
                                "default": ""
                              }
                            }
                          },
                          "generalLog": {
                            "type": "object",
                            "properties": {
                              "options": {
                                "description": "fluentd specific options for the general log",
                                "x-kubernetes-preserve-unknown-fields": true,
                                "type": "object"
                              },
                              "tag": {
                                "description": "Tag for the general log records",
                                "type": "string",
                                "default": ""
                              }
                            }
                          },
                          "recordAugmentation": {
                            "type": "object",
                            "properties": {
                              "annotations": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "fieldName",
                                    "annotationName"
                                  ],
                                  "properties": {
                                    "annotationName": {
                                      "description": "Name of the pod label that holds the value to be stored under fieldName in the log record",
                                      "type": "string"
                                    },
                                    "fieldName": {
                                      "description": "Name of the field added to the log record with value from annotationName",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "enabled": {
                                "description": "Whether to enable record augmentation with additional data",
                                "type": "boolean",
                                "default": false
                              },
                              "labels": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "fieldName",
                                    "labelName"
                                  ],
                                  "properties": {
                                    "fieldName": {
                                      "description": "Name of the field added to the log record with value from labelName",
                                      "type": "string"
                                    },
                                    "labelName": {
                                      "description": "Name of the pod label that holds the value to be stored under fieldName in the log record",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "podFields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "fieldName",
                                    "fieldPath"
                                  ],
                                  "properties": {
                                    "fieldName": {
                                      "description": "Name of the field added to the log record with value taken from a field with path stored in fieldPath",
                                      "type": "string"
                                    },
                                    "fieldPath": {
                                      "description": "Value for the field fieldName. The path should be of the same syntax as the one used for mounting environment variables from field reference - valueFrom.fieldRef.fieldPath . The field will be mounted in the pod as a environment variable, prefixed with a prefix and used then added to the log record. Examples for fieldRef are : spec.nodeName, metadata.namespace, status.podIP, etc.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "resourceFields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "fieldName",
                                    "containerName",
                                    "resource"
                                  ],
                                  "properties": {
                                    "containerName": {
                                      "type": "string"
                                    },
                                    "fieldName": {
                                      "description": "Name of the field added to the log record with value taken from a field with path stored in fieldPath",
                                      "type": "string"
                                    },
                                    "resource": {
                                      "description": "See https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/#use-container-fields-as-values-for-environment-variables",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "staticFields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "fieldName",
                                    "fieldValue"
                                  ],
                                  "properties": {
                                    "fieldName": {
                                      "description": "Name of the field added to the log record with value from fieldValue",
                                      "type": "string"
                                    },
                                    "fieldValue": {
                                      "description": "Value for the static field with name taken from fieldName",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "sinks": {
                            "type": "array",
                            "items": {
                              "required": [
                                "name",
                                "rawConfig"
                              ],
                              "x-kubernetes-preserve-unknown-fields": true,
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the sink. Used only for documentation purposes",
                                  "type": "string"
                                },
                                "rawConfig": {
                                  "description": "Raw configuration of the sink",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "slowQueryLog": {
                            "type": "object",
                            "properties": {
                              "options": {
                                "description": "fluentd specific options for the slow log",
                                "x-kubernetes-preserve-unknown-fields": true,
                                "type": "object"
                              },
                              "tag": {
                                "description": "Tag for the slow log records",
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "oneOf": [
                          {
                            "required": [
                              "sinks"
                            ]
                          }
                        ]
                      },
                      "image": {
                        "description": "Name of an image, including registry and repository, to be used for the log collector sidecar. If provided it needs to be an image for the configured collector type.",
                        "type": "string"
                      }
                    },
                    "oneOf": [
                      {
                        "required": [
                          "image",
                          "fluentd"
                        ]
                      }
                    ]
                  },
                  "error": {
                    "type": "object",
                    "properties": {
                      "collect": {
                        "description": "Whether error logging data should be collected. Implies that the logging should be enabled. If enabled the error log will be switched to JSON format output",
                        "type": "boolean",
                        "default": false
                      },
                      "verbosity": {
                        "description": "Log error verbosity. For details, see the MySQL Server --log-error-verbosity documentation.",
                        "type": "integer",
                        "maximum": 3,
                        "minimum": 1,
                        "default": 3
                      }
                    }
                  },
                  "general": {
                    "type": "object",
                    "properties": {
                      "collect": {
                        "description": "Whether general logging data should be collected. Implies that the logging should be enabled.",
                        "type": "boolean",
                        "default": false
                      },
                      "enabled": {
                        "description": "Whether general logging should be enabled",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  },
                  "slowQuery": {
                    "type": "object",
                    "properties": {
                      "collect": {
                        "description": "Whether slow query logging data should be collected. Implies that the logging should be enabled.",
                        "type": "boolean",
                        "default": false
                      },
                      "enabled": {
                        "description": "Whether slow query logging should be enabled",
                        "type": "boolean",
                        "default": false
                      },
                      "longQueryTime": {
                        "description": "Long query time threshold",
                        "type": "number",
                        "minimum": 0,
                        "default": 10
                      }
                    }
                  }
                }
              },
              "metrics": {
                "description": "Configuration of a Prometheus-style metrics provider",
                "type": "object",
                "required": [
                  "enable",
                  "image"
                ],
                "properties": {
                  "enable": {
                    "description": "Toggle to enable or disable the metrics sidecar",
                    "type": "boolean",
                    "default": false
                  },
                  "image": {
                    "description": "Name of an image to be used for the metrics sidecar, if provided metrics will be enabled",
                    "type": "string"
                  },
                  "monitor": {
                    "description": "Create a ServiceMonitor for Prometheus Operator",
                    "type": "boolean",
                    "default": false
                  },
                  "monitorSpec": {
                    "description": "Custom configuration for the ServiceMonitor object",
                    "x-kubernetes-preserve-unknown-fields": true,
                    "type": "object",
                    "default": {}
                  },
                  "options": {
                    "description": "Options passed to the metrics provider as command line arguments",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tlsSecret": {
                    "description": "Name of a Secret with TLS certificate, key and CA, which will be mounted at /tls into the container an can be used from webConfig",
                    "type": "string"
                  },
                  "webConfig": {
                    "description": "Name of a ConfigMap with a web.config file, if this option is provided a command line option --web.config.file is added",
                    "type": "string"
                  }
                }
              },
              "mycnf": {
                "description": "Custom configuration additions for my.cnf",
                "type": "string"
              },
              "podAnnotations": {
                "x-kubernetes-preserve-unknown-fields": true,
                "type": "object"
              },
              "podLabels": {
                "x-kubernetes-preserve-unknown-fields": true,
                "type": "object"
              },
              "podSpec": {
                "x-kubernetes-preserve-unknown-fields": true,
                "type": "object"
              },
              "readReplicas": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "baseServerId"
                  ],
                  "properties": {
                    "baseServerId": {
                      "description": "Base value for MySQL server_id for instances of the readReplica, if 0 it will be assigned automatically",
                      "type": "integer",
                      "maximum": 4294967195,
                      "minimum": 0,
                      "default": 0
                    },
                    "datadirVolumeClaimTemplate": {
                      "description": "Template for a PersistentVolumeClaim, to be used as datadir",
                      "x-kubernetes-preserve-unknown-fields": true,
                      "type": "object"
                    },
                    "instances": {
                      "description": "Number of MySQL instances for the set of read replica",
                      "type": "integer",
                      "maximum": 999,
                      "minimum": 1,
                      "default": 1
                    },
                    "mycnf": {
                      "description": "Custom configuration additions for my.cnf",
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "podAnnotations": {
                      "x-kubernetes-preserve-unknown-fields": true,
                      "type": "object"
                    },
                    "podLabels": {
                      "x-kubernetes-preserve-unknown-fields": true,
                      "type": "object"
                    },
                    "podSpec": {
                      "x-kubernetes-preserve-unknown-fields": true,
                      "type": "object"
                    },
                    "version": {
                      "description": "MySQL Server version",
                      "type": "string",
                      "pattern": "^\\d+\\.\\d+\\.\\d+(-.+)?"
                    }
                  }
                }
              },
              "router": {
                "description": "MySQL Router specification",
                "type": "object",
                "properties": {
                  "bootstrapOptions": {
                    "description": "Command line options passed to MySQL Router while bootstrapping",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "instances": {
                    "description": "Number of MySQL Router instances to deploy",
                    "type": "integer",
                    "minimum": 0,
                    "default": 1
                  },
                  "options": {
                    "description": "Command line options passed to MySQL Router while running",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "podAnnotations": {
                    "x-kubernetes-preserve-unknown-fields": true,
                    "type": "object"
                  },
                  "podLabels": {
                    "x-kubernetes-preserve-unknown-fields": true,
                    "type": "object"
                  },
                  "podSpec": {
                    "x-kubernetes-preserve-unknown-fields": true,
                    "type": "object"
                  },
                  "routingOptions": {
                    "description": "Set routing options for the cluster",
                    "type": "object",
                    "properties": {
                      "invalidated_cluster_policy": {
                        "type": "string",
                        "enum": [
                          "drop_all",
                          "accept_ro"
                        ]
                      },
                      "read_only_targets": {
                        "type": "string",
                        "enum": [
                          "all",
                          "read_replicas",
                          "secondaries"
                        ]
                      },
                      "stats_updates_frequency": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 0
                      }
                    }
                  },
                  "tlsSecretName": {
                    "description": "Name of a TLS type Secret containing MySQL Router certificate and private key used for SSL",
                    "type": "string"
                  },
                  "version": {
                    "description": "Override MySQL Router version",
                    "type": "string",
                    "pattern": "^\\d+\\.\\d+\\.\\d+(-.+)?"
                  }
                }
              },
              "secretName": {
                "description": "Name of a generic type Secret containing root/default account password",
                "type": "string"
              },
              "service": {
                "description": "Configuration of the Service used by applications connecting to the InnoDB Cluster",
                "type": "object",
                "properties": {
                  "annotations": {
                    "description": "Custom annotations for the Service",
                    "x-kubernetes-preserve-unknown-fields": true,
                    "type": "object"
                  },
                  "defaultPort": {
                    "description": "Target for the Service's default (3306) port. If mysql-rw traffic will go to the primary and allow read and write operations, with mysql-ro traffic goes to the replica and allows only read operations, with mysql-rw-split the router's read-write-splitting will be targeted",
                    "type": "string",
                    "enum": [
                      "mysql-rw",
                      "mysql-ro",
                      "mysql-rw-split"
                    ],
                    "default": "mysql-rw"
                  },
                  "labels": {
                    "description": "Custom labels for the Service",
                    "x-kubernetes-preserve-unknown-fields": true,
                    "type": "object"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "ClusterIP",
                      "NodePort",
                      "LoadBalancer"
                    ],
                    "default": "ClusterIP"
                  }
                }
              },
              "serviceAccountName": {
                "type": "string"
              },
              "tlsCASecretName": {
                "description": "Name of a generic type Secret containing CA (ca.pem) and optional CRL (crl.pem) for SSL",
                "type": "string"
              },
              "tlsSecretName": {
                "description": "Name of a TLS type Secret containing Server certificate and private key for SSL",
                "type": "string"
              },
              "tlsUseSelfSigned": {
                "description": "Enables use of self-signed TLS certificates, reducing or disabling TLS based security verifications",
                "type": "boolean",
                "default": false
              },
              "version": {
                "description": "MySQL Server version",
                "type": "string",
                "pattern": "^\\d+\\.\\d+\\.\\d+(-.+)?"
              }
            }
          },
          "status": {
            "type": "object",
            "x-kubernetes-preserve-unknown-fields": true
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "mysql.oracle.com",
            "kind": "InnoDBCluster",
            "version": "v2"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "innodbclusters.mysql.oracle.com"
        },
        "spec": {
          "group": "mysql.oracle.com",
          "names": {
            "plural": "innodbclusters",
            "singular": "innodbcluster",
            "shortNames": [
              "ic",
              "ics"
            ],
            "kind": "InnoDBCluster",
            "listKind": "InnoDBClusterList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v2",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "required": [
                    "spec"
                  ],
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "maxLength": 40
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "required": [
                        "secretName"
                      ],
                      "properties": {
                        "backupProfiles": {
                          "description": "Backup profile specifications for the cluster, which can be referenced from backup schedules and one-off backup jobs",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "dumpInstance": {
                                "type": "object",
                                "properties": {
                                  "dumpOptions": {
                                    "description": "A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()",
                                    "type": "object",
                                    "x-kubernetes-preserve-unknown-fields": true
                                  },
                                  "storage": {
                                    "type": "object",
                                    "properties": {
                                      "azure": {
                                        "type": "object",
                                        "required": [
                                          "containerName",
                                          "config"
                                        ],
                                        "properties": {
                                          "config": {
                                            "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                            "type": "string"
                                          },
                                          "containerName": {
                                            "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                            "type": "string"
                                          },
                                          "prefix": {
                                            "description": "Path in the container where the dump files are stored",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "ociObjectStorage": {
                                        "type": "object",
                                        "required": [
                                          "bucketName",
                                          "credentials"
                                        ],
                                        "properties": {
                                          "bucketName": {
                                            "description": "Name of the OCI bucket where backup is stored",
                                            "type": "string"
                                          },
                                          "credentials": {
                                            "description": "Name of a Secret with data for accessing the bucket",
                                            "type": "string"
                                          },
                                          "prefix": {
                                            "description": "Path in bucket where backup is stored",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "persistentVolumeClaim": {
                                        "description": "Specification of the PVC to be used. Used 'as is' in pod executing the backup.",
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                      },
                                      "s3": {
                                        "type": "object",
                                        "required": [
                                          "bucketName",
                                          "config"
                                        ],
                                        "properties": {
                                          "bucketName": {
                                            "description": "Name of the S3 bucket where the dump is stored",
                                            "type": "string"
                                          },
                                          "config": {
                                            "description": "Name of a Secret with S3 configuration and credentials",
                                            "type": "string"
                                          },
                                          "endpoint": {
                                            "description": "Override endpoint URL",
                                            "type": "string"
                                          },
                                          "prefix": {
                                            "description": "Path in the bucket where the dump files are stored",
                                            "type": "string"
                                          },
                                          "profile": {
                                            "description": "Profile being used in configuration files",
                                            "type": "string",
                                            "default": ""
                                          }
                                        }
                                      }
                                    },
                                    "x-kubernetes-preserve-unknown-fields": true
                                  }
                                }
                              },
                              "name": {
                                "description": "Embedded backup profile, referenced as backupProfileName elsewhere",
                                "type": "string"
                              },
                              "podAnnotations": {
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "podLabels": {
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "snapshot": {
                                "type": "object",
                                "properties": {
                                  "storage": {
                                    "type": "object",
                                    "properties": {
                                      "azure": {
                                        "type": "object",
                                        "required": [
                                          "containerName",
                                          "config"
                                        ],
                                        "properties": {
                                          "config": {
                                            "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                            "type": "string"
                                          },
                                          "containerName": {
                                            "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                            "type": "string"
                                          },
                                          "prefix": {
                                            "description": "Path in the container where the dump files are stored",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "ociObjectStorage": {
                                        "type": "object",
                                        "required": [
                                          "bucketName",
                                          "credentials"
                                        ],
                                        "properties": {
                                          "bucketName": {
                                            "description": "Bucket name where backup is stored",
                                            "type": "string"
                                          },
                                          "credentials": {
                                            "description": "Name of a Secret with data for accessing the bucket",
                                            "type": "string"
                                          },
                                          "prefix": {
                                            "description": "Path in bucket where backup is stored",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "persistentVolumeClaim": {
                                        "description": "Specification of the PVC to be used. Used 'as is' in pod executing the backup.",
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                      },
                                      "s3": {
                                        "type": "object",
                                        "required": [
                                          "bucketName",
                                          "config"
                                        ],
                                        "properties": {
                                          "bucketName": {
                                            "description": "Name of the S3 bucket where the dump is stored",
                                            "type": "string"
                                          },
                                          "config": {
                                            "description": "Name of a Secret with S3 configuration and credentials",
                                            "type": "string"
                                          },
                                          "endpoint": {
                                            "description": "Override endpoint URL",
                                            "type": "string"
                                          },
                                          "prefix": {
                                            "description": "Path in the bucket where the dump files are stored",
                                            "type": "string"
                                          },
                                          "profile": {
                                            "description": "Profile being used in configuration files",
                                            "type": "string",
                                            "default": ""
                                          }
                                        }
                                      }
                                    },
                                    "x-kubernetes-preserve-unknown-fields": true
                                  }
                                }
                              }
                            },
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        },
                        "backupSchedules": {
                          "description": "Schedules for periodically executed backups",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name",
                              "schedule"
                            ],
                            "properties": {
                              "backupProfile": {
                                "description": "backupProfile specification if backupProfileName is not specified",
                                "type": "object",
                                "properties": {
                                  "dumpInstance": {
                                    "type": "object",
                                    "properties": {
                                      "dumpOptions": {
                                        "description": "A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()",
                                        "type": "object",
                                        "x-kubernetes-preserve-unknown-fields": true
                                      },
                                      "storage": {
                                        "type": "object",
                                        "properties": {
                                          "azure": {
                                            "type": "object",
                                            "required": [
                                              "containerName",
                                              "config"
                                            ],
                                            "properties": {
                                              "config": {
                                                "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                                "type": "string"
                                              },
                                              "containerName": {
                                                "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                                "type": "string"
                                              },
                                              "prefix": {
                                                "description": "Path in the container where the dump files are stored",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "ociObjectStorage": {
                                            "type": "object",
                                            "required": [
                                              "bucketName",
                                              "credentials"
                                            ],
                                            "properties": {
                                              "bucketName": {
                                                "description": "Name of the OCI Bucket where backup is stored",
                                                "type": "string"
                                              },
                                              "credentials": {
                                                "description": "Name of a Secret with data for accessing the bucket",
                                                "type": "string"
                                              },
                                              "prefix": {
                                                "description": "Path in bucket where backup is stored",
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "persistentVolumeClaim": {
                                            "description": "Specification of the PVC to be used. Used 'as is' in pod executing the backup.",
                                            "type": "object",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          },
                                          "s3": {
                                            "type": "object",
                                            "required": [
                                              "bucketName",
                                              "config"
                                            ],
                                            "properties": {
                                              "bucketName": {
                                                "description": "Name of the S3 bucket where the dump is stored",
                                                "type": "string"
                                              },
                                              "config": {
                                                "description": "Name of a Secret with S3 configuration and credentials",
                                                "type": "string"
                                              },
                                              "endpoint": {
                                                "description": "Override endpoint URL",
                                                "type": "string"
                                              },
                                              "prefix": {
                                                "description": "Path in the bucket where the dump files are stored",
                                                "type": "string"
                                              },
                                              "profile": {
                                                "description": "Profile being used in configuration files",
                                                "type": "string",
                                                "default": ""
                                              }
                                            }
                                          }
                                        },
                                        "x-kubernetes-preserve-unknown-fields": true
                                      }
                                    }
                                  },
                                  "podAnnotations": {
                                    "type": "object",
                                    "x-kubernetes-preserve-unknown-fields": true
                                  },
                                  "podLabels": {
                                    "type": "object",
                                    "x-kubernetes-preserve-unknown-fields": true
                                  }
                                },
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "backupProfileName": {
                                "description": "Name of the backupProfile to be used",
                                "type": "string"
                              },
                              "deleteBackupData": {
                                "description": "Whether to delete the backup data in case the MySQLBackup object created by the job is deleted",
                                "type": "boolean",
                                "default": false
                              },
                              "enabled": {
                                "description": "Whether the schedule is enabled or not",
                                "type": "boolean",
                                "default": true
                              },
                              "name": {
                                "description": "Name of the backup schedule",
                                "type": "string"
                              },
                              "schedule": {
                                "description": "The schedule of the job, syntax as a cron expression",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        },
                        "baseServerId": {
                          "description": "Base value for MySQL server_id for instances in the cluster",
                          "type": "integer",
                          "default": 1000,
                          "maximum": 4294967195,
                          "minimum": 0
                        },
                        "datadirVolumeClaimTemplate": {
                          "description": "Template for a PersistentVolumeClaim, to be used as datadir",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "edition": {
                          "description": "MySQL Server Edition (community or enterprise)",
                          "type": "string",
                          "pattern": "^(community|enterprise)$"
                        },
                        "imagePullPolicy": {
                          "description": "Defaults to Always, but set to IfNotPresent in deploy-operator.yaml when deploying Operator",
                          "type": "string"
                        },
                        "imagePullSecrets": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "imageRepository": {
                          "description": "Repository where images are pulled from; defaults to container-registry.oracle.com/mysql",
                          "type": "string"
                        },
                        "initDB": {
                          "type": "object",
                          "properties": {
                            "clone": {
                              "type": "object",
                              "required": [
                                "donorUrl",
                                "secretKeyRef"
                              ],
                              "properties": {
                                "donorUrl": {
                                  "description": "URL of the cluster to clone from",
                                  "type": "string"
                                },
                                "rootUser": {
                                  "description": "User name used for cloning",
                                  "type": "string",
                                  "default": "root"
                                },
                                "secretKeyRef": {
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Secret name with key 'rootPassword' storing the password for the user specified in rootUser",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "dump": {
                              "type": "object",
                              "required": [
                                "storage"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the dump. Not used by the operator, but a descriptive hint for the cluster administrator",
                                  "type": "string"
                                },
                                "options": {
                                  "description": "A dictionary of key-value pairs passed directly to MySQL Shell's loadDump()",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "path": {
                                  "description": "Path to the dump in the PVC. Use when specifying persistentVolumeClaim. Omit for ociObjectStorage, S3, or azure.",
                                  "type": "string"
                                },
                                "storage": {
                                  "type": "object",
                                  "properties": {
                                    "azure": {
                                      "type": "object",
                                      "required": [
                                        "containerName",
                                        "prefix",
                                        "config"
                                      ],
                                      "properties": {
                                        "config": {
                                          "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                          "type": "string"
                                        },
                                        "containerName": {
                                          "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                          "type": "string"
                                        },
                                        "prefix": {
                                          "description": "Path in the container where the dump files are stored",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "ociObjectStorage": {
                                      "type": "object",
                                      "required": [
                                        "bucketName",
                                        "prefix",
                                        "credentials"
                                      ],
                                      "properties": {
                                        "bucketName": {
                                          "description": "Name of the OCI bucket where the dump is stored",
                                          "type": "string"
                                        },
                                        "credentials": {
                                          "description": "Name of a Secret with data for accessing the bucket",
                                          "type": "string"
                                        },
                                        "prefix": {
                                          "description": "Path in the bucket where the dump files are stored",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "persistentVolumeClaim": {
                                      "description": "Specification of the PVC to be used. Used 'as is' in the cloning pod.",
                                      "type": "object",
                                      "x-kubernetes-preserve-unknown-fields": true
                                    },
                                    "s3": {
                                      "type": "object",
                                      "required": [
                                        "bucketName",
                                        "prefix",
                                        "config"
                                      ],
                                      "properties": {
                                        "bucketName": {
                                          "description": "Name of the S3 bucket where the dump is stored",
                                          "type": "string"
                                        },
                                        "config": {
                                          "description": "Name of a Secret with S3 configuration and credentials",
                                          "type": "string"
                                        },
                                        "endpoint": {
                                          "description": "Override endpoint URL",
                                          "type": "string"
                                        },
                                        "prefix": {
                                          "description": "Path in the bucket where the dump files are stored",
                                          "type": "string"
                                        },
                                        "profile": {
                                          "description": "Profile being used in configuration files",
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    }
                                  },
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            }
                          },
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "instances": {
                          "description": "Number of MySQL replica instances for the cluster",
                          "type": "integer",
                          "default": 1,
                          "maximum": 9,
                          "minimum": 1
                        },
                        "keyring": {
                          "description": "Keyring specification",
                          "type": "object",
                          "properties": {
                            "encryptedFile": {
                              "description": "Keyring 'Encrypted File' specification",
                              "type": "object",
                              "required": [
                                "fileName",
                                "storage",
                                "password"
                              ],
                              "properties": {
                                "fileName": {
                                  "description": "Full path to the keyring file name inside the storage volume",
                                  "type": "string"
                                },
                                "password": {
                                  "description": "Name of a secret that contains password for the keyring in the key 'keyring_password'",
                                  "type": "string"
                                },
                                "readOnly": {
                                  "description": "Whether to open the keyring file in read-only mode",
                                  "type": "boolean",
                                  "default": false
                                },
                                "storage": {
                                  "description": "Specification of the volume to be mounted where the keyring file resides",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            },
                            "file": {
                              "description": "Keyring 'File' specification",
                              "type": "object",
                              "required": [
                                "fileName",
                                "storage"
                              ],
                              "properties": {
                                "fileName": {
                                  "description": "Full path to the keyring file name inside the storage volume",
                                  "type": "string"
                                },
                                "readOnly": {
                                  "description": "Whether to open the keyring file in read-only mode",
                                  "type": "boolean",
                                  "default": false
                                },
                                "storage": {
                                  "description": "Specification of the volume to be mounted where the keyring file resides",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            },
                            "oci": {
                              "description": "Keyring 'OCI' specification",
                              "type": "object",
                              "required": [
                                "user",
                                "keySecret",
                                "keyFingerprint",
                                "tenancy"
                              ],
                              "properties": {
                                "caCertificate": {
                                  "description": "Secret that contains ca.crt field with CA certificate bundle file that the keyring_oci plugin uses for Oracle Cloud Infrastructure certificate verification",
                                  "type": "string"
                                },
                                "compartment": {
                                  "description": "Compartment identifier in the form ocid1.compartment.oc1...",
                                  "type": "string",
                                  "pattern": "^ocid1\\.compartment\\."
                                },
                                "endpoints": {
                                  "type": "object",
                                  "properties": {
                                    "encryption": {
                                      "description": "Encryption endpoint URI like {identifier}-crypto.kms.{region}.oraclecloud.com",
                                      "type": "string"
                                    },
                                    "management": {
                                      "description": "Management endpoint URI like {identifier}-management.kms.{region}.oraclecloud.com",
                                      "type": "string"
                                    },
                                    "secrets": {
                                      "description": "Secrets endpoint URI like secrets.vaults.{region}.oci.oraclecloud.com",
                                      "type": "string"
                                    },
                                    "vaults": {
                                      "description": "Vaults endpoint URI like vaults.{region}.oci.oraclecloud.com",
                                      "type": "string"
                                    }
                                  }
                                },
                                "keyFingerprint": {
                                  "description": "Private key fingerprint",
                                  "type": "string",
                                  "pattern": "([0-9a-f]{2}:){15}[0-9a-f]{2}$"
                                },
                                "keySecret": {
                                  "description": "A secret that contains the private key under the field 'privatekey'",
                                  "type": "string"
                                },
                                "masterKey": {
                                  "description": "Master key identified in the form ocid1.key.oc1...",
                                  "type": "string",
                                  "pattern": "^ocid1\\.key\\."
                                },
                                "tenancy": {
                                  "description": "Tenancy identifier in the form ocid1.tenancy.oc1...",
                                  "type": "string",
                                  "pattern": "^ocid1\\.tenancy\\."
                                },
                                "user": {
                                  "description": "User identifier in the form of ocid1.user.oc1...",
                                  "type": "string",
                                  "pattern": "^ocid1\\.user\\."
                                },
                                "virtualVault": {
                                  "description": "Vault identifier in the form ocid1.vault.oc1...",
                                  "type": "string",
                                  "pattern": "^ocid1\\.vault\\."
                                }
                              }
                            }
                          }
                        },
                        "logs": {
                          "type": "object",
                          "properties": {
                            "collector": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "required": [
                                    "image",
                                    "fluentd"
                                  ]
                                }
                              ],
                              "properties": {
                                "containerName": {
                                  "description": "Name of the collector container sidecar",
                                  "type": "string",
                                  "default": "logcollector"
                                },
                                "env": {
                                  "type": "array",
                                  "items": {
                                    "description": "Environment variables to be passed to the image. Definition will be directly copied like podSpec fields are",
                                    "type": "object",
                                    "x-kubernetes-preserve-unknown-fields": true
                                  }
                                },
                                "fluentd": {
                                  "description": "Properties of the fluentd log collector",
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "required": [
                                        "sinks"
                                      ]
                                    }
                                  ],
                                  "properties": {
                                    "additionalFilterConfiguration": {
                                      "description": "Raw configuration of additional Fluentd filters to be added to the configuration file",
                                      "type": "string"
                                    },
                                    "errorLog": {
                                      "type": "object",
                                      "properties": {
                                        "options": {
                                          "description": "fluentd specific options for the error log",
                                          "type": "object",
                                          "x-kubernetes-preserve-unknown-fields": true
                                        },
                                        "tag": {
                                          "description": "Tag for the error log records",
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    },
                                    "generalLog": {
                                      "type": "object",
                                      "properties": {
                                        "options": {
                                          "description": "fluentd specific options for the general log",
                                          "type": "object",
                                          "x-kubernetes-preserve-unknown-fields": true
                                        },
                                        "tag": {
                                          "description": "Tag for the general log records",
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    },
                                    "recordAugmentation": {
                                      "type": "object",
                                      "properties": {
                                        "annotations": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "fieldName",
                                              "annotationName"
                                            ],
                                            "properties": {
                                              "annotationName": {
                                                "description": "Name of the pod label that holds the value to be stored under fieldName in the log record",
                                                "type": "string"
                                              },
                                              "fieldName": {
                                                "description": "Name of the field added to the log record with value from annotationName",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "enabled": {
                                          "description": "Whether to enable record augmentation with additional data",
                                          "type": "boolean",
                                          "default": false
                                        },
                                        "labels": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "fieldName",
                                              "labelName"
                                            ],
                                            "properties": {
                                              "fieldName": {
                                                "description": "Name of the field added to the log record with value from labelName",
                                                "type": "string"
                                              },
                                              "labelName": {
                                                "description": "Name of the pod label that holds the value to be stored under fieldName in the log record",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "podFields": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "fieldName",
                                              "fieldPath"
                                            ],
                                            "properties": {
                                              "fieldName": {
                                                "description": "Name of the field added to the log record with value taken from a field with path stored in fieldPath",
                                                "type": "string"
                                              },
                                              "fieldPath": {
                                                "description": "Value for the field fieldName. The path should be of the same syntax as the one used for mounting environment variables from field reference - valueFrom.fieldRef.fieldPath . The field will be mounted in the pod as a environment variable, prefixed with a prefix and used then added to the log record. Examples for fieldRef are : spec.nodeName, metadata.namespace, status.podIP, etc.",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "resourceFields": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "fieldName",
                                              "containerName",
                                              "resource"
                                            ],
                                            "properties": {
                                              "containerName": {
                                                "type": "string"
                                              },
                                              "fieldName": {
                                                "description": "Name of the field added to the log record with value taken from a field with path stored in fieldPath",
                                                "type": "string"
                                              },
                                              "resource": {
                                                "description": "See https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/#use-container-fields-as-values-for-environment-variables",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "staticFields": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "fieldName",
                                              "fieldValue"
                                            ],
                                            "properties": {
                                              "fieldName": {
                                                "description": "Name of the field added to the log record with value from fieldValue",
                                                "type": "string"
                                              },
                                              "fieldValue": {
                                                "description": "Value for the static field with name taken from fieldName",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "sinks": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "rawConfig"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "Name of the sink. Used only for documentation purposes",
                                            "type": "string"
                                          },
                                          "rawConfig": {
                                            "description": "Raw configuration of the sink",
                                            "type": "string"
                                          }
                                        },
                                        "x-kubernetes-preserve-unknown-fields": true
                                      }
                                    },
                                    "slowQueryLog": {
                                      "type": "object",
                                      "properties": {
                                        "options": {
                                          "description": "fluentd specific options for the slow log",
                                          "type": "object",
                                          "x-kubernetes-preserve-unknown-fields": true
                                        },
                                        "tag": {
                                          "description": "Tag for the slow log records",
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    }
                                  }
                                },
                                "image": {
                                  "description": "Name of an image, including registry and repository, to be used for the log collector sidecar. If provided it needs to be an image for the configured collector type.",
                                  "type": "string"
                                }
                              }
                            },
                            "error": {
                              "type": "object",
                              "properties": {
                                "collect": {
                                  "description": "Whether error logging data should be collected. Implies that the logging should be enabled. If enabled the error log will be switched to JSON format output",
                                  "type": "boolean",
                                  "default": false
                                },
                                "verbosity": {
                                  "description": "Log error verbosity. For details, see the MySQL Server --log-error-verbosity documentation.",
                                  "type": "integer",
                                  "default": 3,
                                  "maximum": 3,
                                  "minimum": 1
                                }
                              }
                            },
                            "general": {
                              "type": "object",
                              "properties": {
                                "collect": {
                                  "description": "Whether general logging data should be collected. Implies that the logging should be enabled.",
                                  "type": "boolean",
                                  "default": false
                                },
                                "enabled": {
                                  "description": "Whether general logging should be enabled",
                                  "type": "boolean",
                                  "default": false
                                }
                              }
                            },
                            "slowQuery": {
                              "type": "object",
                              "properties": {
                                "collect": {
                                  "description": "Whether slow query logging data should be collected. Implies that the logging should be enabled.",
                                  "type": "boolean",
                                  "default": false
                                },
                                "enabled": {
                                  "description": "Whether slow query logging should be enabled",
                                  "type": "boolean",
                                  "default": false
                                },
                                "longQueryTime": {
                                  "description": "Long query time threshold",
                                  "type": "number",
                                  "default": 10,
                                  "minimum": 0
                                }
                              }
                            }
                          }
                        },
                        "metrics": {
                          "description": "Configuration of a Prometheus-style metrics provider",
                          "type": "object",
                          "required": [
                            "enable",
                            "image"
                          ],
                          "properties": {
                            "enable": {
                              "description": "Toggle to enable or disable the metrics sidecar",
                              "type": "boolean",
                              "default": false
                            },
                            "image": {
                              "description": "Name of an image to be used for the metrics sidecar, if provided metrics will be enabled",
                              "type": "string"
                            },
                            "monitor": {
                              "description": "Create a ServiceMonitor for Prometheus Operator",
                              "type": "boolean",
                              "default": false
                            },
                            "monitorSpec": {
                              "description": "Custom configuration for the ServiceMonitor object",
                              "type": "object",
                              "default": {},
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "options": {
                              "description": "Options passed to the metrics provider as command line arguments",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "tlsSecret": {
                              "description": "Name of a Secret with TLS certificate, key and CA, which will be mounted at /tls into the container an can be used from webConfig",
                              "type": "string"
                            },
                            "webConfig": {
                              "description": "Name of a ConfigMap with a web.config file, if this option is provided a command line option --web.config.file is added",
                              "type": "string"
                            }
                          }
                        },
                        "mycnf": {
                          "description": "Custom configuration additions for my.cnf",
                          "type": "string"
                        },
                        "podAnnotations": {
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "podLabels": {
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "podSpec": {
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "readReplicas": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name",
                              "baseServerId"
                            ],
                            "properties": {
                              "baseServerId": {
                                "description": "Base value for MySQL server_id for instances of the readReplica, if 0 it will be assigned automatically",
                                "type": "integer",
                                "default": 0,
                                "maximum": 4294967195,
                                "minimum": 0
                              },
                              "datadirVolumeClaimTemplate": {
                                "description": "Template for a PersistentVolumeClaim, to be used as datadir",
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "instances": {
                                "description": "Number of MySQL instances for the set of read replica",
                                "type": "integer",
                                "default": 1,
                                "maximum": 999,
                                "minimum": 1
                              },
                              "mycnf": {
                                "description": "Custom configuration additions for my.cnf",
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "podAnnotations": {
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "podLabels": {
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "podSpec": {
                                "type": "object",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "version": {
                                "description": "MySQL Server version",
                                "type": "string",
                                "pattern": "^\\d+\\.\\d+\\.\\d+(-.+)?"
                              }
                            }
                          }
                        },
                        "router": {
                          "description": "MySQL Router specification",
                          "type": "object",
                          "properties": {
                            "bootstrapOptions": {
                              "description": "Command line options passed to MySQL Router while bootstrapping",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "instances": {
                              "description": "Number of MySQL Router instances to deploy",
                              "type": "integer",
                              "default": 1,
                              "minimum": 0
                            },
                            "options": {
                              "description": "Command line options passed to MySQL Router while running",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "podAnnotations": {
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "podLabels": {
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "podSpec": {
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "routingOptions": {
                              "description": "Set routing options for the cluster",
                              "type": "object",
                              "properties": {
                                "invalidated_cluster_policy": {
                                  "type": "string",
                                  "enum": [
                                    "drop_all",
                                    "accept_ro"
                                  ]
                                },
                                "read_only_targets": {
                                  "type": "string",
                                  "enum": [
                                    "all",
                                    "read_replicas",
                                    "secondaries"
                                  ]
                                },
                                "stats_updates_frequency": {
                                  "type": "integer",
                                  "default": 0,
                                  "minimum": 0
                                }
                              }
                            },
                            "tlsSecretName": {
                              "description": "Name of a TLS type Secret containing MySQL Router certificate and private key used for SSL",
                              "type": "string"
                            },
                            "version": {
                              "description": "Override MySQL Router version",
                              "type": "string",
                              "pattern": "^\\d+\\.\\d+\\.\\d+(-.+)?"
                            }
                          }
                        },
                        "secretName": {
                          "description": "Name of a generic type Secret containing root/default account password",
                          "type": "string"
                        },
                        "service": {
                          "description": "Configuration of the Service used by applications connecting to the InnoDB Cluster",
                          "type": "object",
                          "properties": {
                            "annotations": {
                              "description": "Custom annotations for the Service",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "defaultPort": {
                              "description": "Target for the Service's default (3306) port. If mysql-rw traffic will go to the primary and allow read and write operations, with mysql-ro traffic goes to the replica and allows only read operations, with mysql-rw-split the router's read-write-splitting will be targeted",
                              "type": "string",
                              "default": "mysql-rw",
                              "enum": [
                                "mysql-rw",
                                "mysql-ro",
                                "mysql-rw-split"
                              ]
                            },
                            "labels": {
                              "description": "Custom labels for the Service",
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "type": {
                              "type": "string",
                              "default": "ClusterIP",
                              "enum": [
                                "ClusterIP",
                                "NodePort",
                                "LoadBalancer"
                              ]
                            }
                          }
                        },
                        "serviceAccountName": {
                          "type": "string"
                        },
                        "tlsCASecretName": {
                          "description": "Name of a generic type Secret containing CA (ca.pem) and optional CRL (crl.pem) for SSL",
                          "type": "string"
                        },
                        "tlsSecretName": {
                          "description": "Name of a TLS type Secret containing Server certificate and private key for SSL",
                          "type": "string"
                        },
                        "tlsUseSelfSigned": {
                          "description": "Enables use of self-signed TLS certificates, reducing or disabling TLS based security verifications",
                          "type": "boolean",
                          "default": false
                        },
                        "version": {
                          "description": "MySQL Server version",
                          "type": "string",
                          "pattern": "^\\d+\\.\\d+\\.\\d+(-.+)?"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Status",
                  "type": "string",
                  "description": "Status of the InnoDB Cluster",
                  "jsonPath": ".status.cluster.status"
                },
                {
                  "name": "Online",
                  "type": "integer",
                  "description": "Number of ONLINE InnoDB Cluster instances",
                  "jsonPath": ".status.cluster.onlineInstances"
                },
                {
                  "name": "Instances",
                  "type": "integer",
                  "description": "Number of InnoDB Cluster instances configured",
                  "jsonPath": ".spec.instances"
                },
                {
                  "name": "Routers",
                  "type": "integer",
                  "description": "Number of Router instances configured for the InnoDB Cluster",
                  "jsonPath": ".spec.router.instances"
                },
                {
                  "name": "Age",
                  "type": "date",
                  "jsonPath": ".metadata.creationTimestamp"
                }
              ]
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "innodbclusters",
            "singular": "innodbcluster",
            "shortNames": [
              "ic",
              "ics"
            ],
            "kind": "InnoDBCluster",
            "listKind": "InnoDBClusterList"
          },
          "storedVersions": [
            "v2"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "Status",
          "type": "string",
          "description": "Status of the InnoDB Cluster",
          "jsonPath": ".status.cluster.status"
        },
        {
          "name": "Online",
          "type": "integer",
          "description": "Number of ONLINE InnoDB Cluster instances",
          "jsonPath": ".status.cluster.onlineInstances"
        },
        {
          "name": "Instances",
          "type": "integer",
          "description": "Number of InnoDB Cluster instances configured",
          "jsonPath": ".spec.instances"
        },
        {
          "name": "Routers",
          "type": "integer",
          "description": "Number of Router instances configured for the InnoDB Cluster",
          "jsonPath": ".spec.router.instances"
        },
        {
          "name": "Age",
          "type": "date",
          "jsonPath": ".metadata.creationTimestamp"
        }
      ],
      "short": "InnoDBCluster",
      "apiGroup": "mysql.oracle.com",
      "apiKind": "InnoDBCluster",
      "apiVersion": "v2",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "oracle",
      "sub": "oracle",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.oracle.mysql.v2.MySQLBackup",
      "definition": {
        "properties": {
          "spec": {
            "type": "object",
            "required": [
              "clusterName"
            ],
            "properties": {
              "addTimestampToBackupDirectory": {
                "type": "boolean",
                "default": true
              },
              "backupProfile": {
                "description": "backupProfile specification if backupProfileName is not specified",
                "x-kubernetes-preserve-unknown-fields": true,
                "type": "object",
                "properties": {
                  "dumpInstance": {
                    "type": "object",
                    "properties": {
                      "dumpOptions": {
                        "description": "A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()",
                        "type": "object",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "storage": {
                        "type": "object",
                        "properties": {
                          "azure": {
                            "type": "object",
                            "required": [
                              "containerName",
                              "config"
                            ],
                            "properties": {
                              "config": {
                                "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                "type": "string"
                              },
                              "containerName": {
                                "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                "type": "string"
                              },
                              "prefix": {
                                "description": "Path in the container where the dump files are stored",
                                "type": "string"
                              }
                            }
                          },
                          "ociObjectStorage": {
                            "type": "object",
                            "required": [
                              "bucketName",
                              "credentials"
                            ],
                            "properties": {
                              "bucketName": {
                                "description": "Name of the OCI bucket where backup is stored",
                                "type": "string"
                              },
                              "credentials": {
                                "description": "Name of a Secret with data for accessing the bucket",
                                "type": "string"
                              },
                              "prefix": {
                                "description": "Path in bucket where backup is stored",
                                "type": "string"
                              }
                            }
                          },
                          "persistentVolumeClaim": {
                            "description": "Specification of the PVC to be used. Used 'as is' in pod executing the backup.",
                            "type": "object",
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "s3": {
                            "type": "object",
                            "required": [
                              "bucketName",
                              "config"
                            ],
                            "properties": {
                              "bucketName": {
                                "description": "Name of the S3 bucket where the dump is stored",
                                "type": "string"
                              },
                              "config": {
                                "description": "Name of a Secret with S3 configuration and credentials",
                                "type": "string"
                              },
                              "endpoint": {
                                "description": "Override endpoint URL",
                                "type": "string"
                              },
                              "prefix": {
                                "description": "Path in the bucket where the dump files are stored",
                                "type": "string"
                              },
                              "profile": {
                                "description": "Profile being used in configuration files",
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "x-kubernetes-preserve-unknown-fields": true
                      }
                    }
                  },
                  "podAnnotations": {
                    "type": "object",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "podLabels": {
                    "type": "object",
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              },
              "backupProfileName": {
                "type": "string"
              },
              "clusterName": {
                "type": "string"
              },
              "deleteBackupData": {
                "type": "boolean",
                "default": false
              }
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "bucket": {
                "type": "string"
              },
              "completionTime": {
                "type": "string"
              },
              "container": {
                "type": "string"
              },
              "elapsedTime": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "ociTenancy": {
                "type": "string"
              },
              "output": {
                "type": "string"
              },
              "size": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "spaceAvailable": {
                "type": "string"
              },
              "startTime": {
                "type": "string"
              },
              "status": {
                "type": "string"
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "mysql.oracle.com",
            "kind": "MySQLBackup",
            "version": "v2"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "mysqlbackups.mysql.oracle.com"
        },
        "spec": {
          "group": "mysql.oracle.com",
          "names": {
            "plural": "mysqlbackups",
            "singular": "mysqlbackup",
            "shortNames": [
              "mbk"
            ],
            "kind": "MySQLBackup",
            "listKind": "MySQLBackupList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v2",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "properties": {
                    "spec": {
                      "type": "object",
                      "required": [
                        "clusterName"
                      ],
                      "properties": {
                        "addTimestampToBackupDirectory": {
                          "type": "boolean",
                          "default": true
                        },
                        "backupProfile": {
                          "description": "backupProfile specification if backupProfileName is not specified",
                          "type": "object",
                          "properties": {
                            "dumpInstance": {
                              "type": "object",
                              "properties": {
                                "dumpOptions": {
                                  "description": "A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()",
                                  "type": "object",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "storage": {
                                  "type": "object",
                                  "properties": {
                                    "azure": {
                                      "type": "object",
                                      "required": [
                                        "containerName",
                                        "config"
                                      ],
                                      "properties": {
                                        "config": {
                                          "description": "Name of a Secret with Azure BLOB Storage configuration and credentials",
                                          "type": "string"
                                        },
                                        "containerName": {
                                          "description": "Name of the Azure  BLOB Storage container where the dump is stored",
                                          "type": "string"
                                        },
                                        "prefix": {
                                          "description": "Path in the container where the dump files are stored",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "ociObjectStorage": {
                                      "type": "object",
                                      "required": [
                                        "bucketName",
                                        "credentials"
                                      ],
                                      "properties": {
                                        "bucketName": {
                                          "description": "Name of the OCI bucket where backup is stored",
                                          "type": "string"
                                        },
                                        "credentials": {
                                          "description": "Name of a Secret with data for accessing the bucket",
                                          "type": "string"
                                        },
                                        "prefix": {
                                          "description": "Path in bucket where backup is stored",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "persistentVolumeClaim": {
                                      "description": "Specification of the PVC to be used. Used 'as is' in pod executing the backup.",
                                      "type": "object",
                                      "x-kubernetes-preserve-unknown-fields": true
                                    },
                                    "s3": {
                                      "type": "object",
                                      "required": [
                                        "bucketName",
                                        "config"
                                      ],
                                      "properties": {
                                        "bucketName": {
                                          "description": "Name of the S3 bucket where the dump is stored",
                                          "type": "string"
                                        },
                                        "config": {
                                          "description": "Name of a Secret with S3 configuration and credentials",
                                          "type": "string"
                                        },
                                        "endpoint": {
                                          "description": "Override endpoint URL",
                                          "type": "string"
                                        },
                                        "prefix": {
                                          "description": "Path in the bucket where the dump files are stored",
                                          "type": "string"
                                        },
                                        "profile": {
                                          "description": "Profile being used in configuration files",
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    }
                                  },
                                  "x-kubernetes-preserve-unknown-fields": true
                                }
                              }
                            },
                            "podAnnotations": {
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            },
                            "podLabels": {
                              "type": "object",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          },
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "backupProfileName": {
                          "type": "string"
                        },
                        "clusterName": {
                          "type": "string"
                        },
                        "deleteBackupData": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "bucket": {
                          "type": "string"
                        },
                        "completionTime": {
                          "type": "string"
                        },
                        "container": {
                          "type": "string"
                        },
                        "elapsedTime": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "method": {
                          "type": "string"
                        },
                        "ociTenancy": {
                          "type": "string"
                        },
                        "output": {
                          "type": "string"
                        },
                        "size": {
                          "type": "string"
                        },
                        "source": {
                          "type": "string"
                        },
                        "spaceAvailable": {
                          "type": "string"
                        },
                        "startTime": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Cluster",
                  "type": "string",
                  "description": "Name of the target cluster",
                  "jsonPath": ".spec.clusterName"
                },
                {
                  "name": "Status",
                  "type": "string",
                  "description": "Status of the Backup",
                  "jsonPath": ".status.status"
                },
                {
                  "name": "Output",
                  "type": "string",
                  "description": "Name of the produced file/directory",
                  "jsonPath": ".status.output"
                },
                {
                  "name": "Age",
                  "type": "date",
                  "jsonPath": ".metadata.creationTimestamp"
                }
              ]
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "mysqlbackups",
            "singular": "mysqlbackup",
            "shortNames": [
              "mbk"
            ],
            "kind": "MySQLBackup",
            "listKind": "MySQLBackupList"
          },
          "storedVersions": [
            "v2"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "Cluster",
          "type": "string",
          "description": "Name of the target cluster",
          "jsonPath": ".spec.clusterName"
        },
        {
          "name": "Status",
          "type": "string",
          "description": "Status of the Backup",
          "jsonPath": ".status.status"
        },
        {
          "name": "Output",
          "type": "string",
          "description": "Name of the produced file/directory",
          "jsonPath": ".status.output"
        },
        {
          "name": "Age",
          "type": "date",
          "jsonPath": ".metadata.creationTimestamp"
        }
      ],
      "short": "MySQLBackup",
      "apiGroup": "mysql.oracle.com",
      "apiKind": "MySQLBackup",
      "apiVersion": "v2",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "oracle",
      "sub": "oracle",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    }
  ]
}