{
  "name": "rabbitmq",
  "objects": [
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1alpha1.SuperStream",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "SuperStreamSpec defines the desired state of SuperStream",
            "type": "object",
            "required": [
              "name",
              "rabbitmqClusterReference"
            ],
            "properties": {
              "name": {
                "description": "Name of the queue; required property.",
                "type": "string"
              },
              "partitions": {
                "description": "Number of partitions to create within this super stream.\nDefaults to '3'.",
                "type": "integer"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that the SuperStream will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "routingKeys": {
                "description": "Routing keys to use for each of the partitions in the SuperStream\nIf unset, the routing keys for the partitions will be set to the index of the partitions",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "vhost": {
                "description": "Default to vhost '/'; cannot be updated",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "SuperStreamStatus defines the observed state of SuperStream",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the\nSuperStream's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              },
              "partitions": {
                "description": "Partitions are a list of the stream queue names which form the partitions of this SuperStream.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "SuperStream is the Schema for the queues API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "SuperStream",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "superstreams.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "superstreams",
            "singular": "superstream",
            "kind": "SuperStream",
            "listKind": "SuperStreamList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "SuperStream is the Schema for the queues API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "SuperStreamSpec defines the desired state of SuperStream",
                      "type": "object",
                      "required": [
                        "name",
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name of the queue; required property.",
                          "type": "string"
                        },
                        "partitions": {
                          "description": "Number of partitions to create within this super stream.\nDefaults to '3'.",
                          "type": "integer",
                          "default": 3
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that the SuperStream will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "routingKeys": {
                          "description": "Routing keys to use for each of the partitions in the SuperStream\nIf unset, the routing keys for the partitions will be set to the index of the partitions",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "vhost": {
                          "description": "Default to vhost '/'; cannot be updated",
                          "type": "string",
                          "default": "/"
                        }
                      }
                    },
                    "status": {
                      "description": "SuperStreamStatus defines the observed state of SuperStream",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the\nSuperStream's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "partitions": {
                          "description": "Partitions are a list of the stream queue names which form the partitions of this SuperStream.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "superstreams",
            "singular": "superstream",
            "kind": "SuperStream",
            "listKind": "SuperStreamList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "SuperStream",
      "apiGroup": "rabbitmq.com",
      "apiKind": "SuperStream",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.Binding",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "BindingSpec defines the desired state of Binding",
            "type": "object",
            "required": [
              "rabbitmqClusterReference"
            ],
            "properties": {
              "arguments": {
                "description": "Cannot be updated",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "destination": {
                "description": "Cannot be updated",
                "type": "string"
              },
              "destinationType": {
                "description": "Cannot be updated",
                "type": "string",
                "enum": [
                  "exchange",
                  "queue"
                ]
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that the binding will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "routingKey": {
                "description": "Cannot be updated",
                "type": "string"
              },
              "source": {
                "description": "Cannot be updated",
                "type": "string"
              },
              "vhost": {
                "description": "Default to vhost '/'; cannot be updated",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "BindingStatus defines the observed state of Binding",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Binding. It corresponds to the\nBinding's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "Binding is the Schema for the bindings API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "Binding",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "bindings.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "bindings",
            "singular": "binding",
            "kind": "Binding",
            "listKind": "BindingList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Binding is the Schema for the bindings API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "BindingSpec defines the desired state of Binding",
                      "type": "object",
                      "required": [
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "arguments": {
                          "description": "Cannot be updated",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "destination": {
                          "description": "Cannot be updated",
                          "type": "string"
                        },
                        "destinationType": {
                          "description": "Cannot be updated",
                          "type": "string",
                          "enum": [
                            "exchange",
                            "queue"
                          ]
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that the binding will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "routingKey": {
                          "description": "Cannot be updated",
                          "type": "string"
                        },
                        "source": {
                          "description": "Cannot be updated",
                          "type": "string"
                        },
                        "vhost": {
                          "description": "Default to vhost '/'; cannot be updated",
                          "type": "string",
                          "default": "/"
                        }
                      }
                    },
                    "status": {
                      "description": "BindingStatus defines the observed state of Binding",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Binding. It corresponds to the\nBinding's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "bindings",
            "singular": "binding",
            "kind": "Binding",
            "listKind": "BindingList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Binding",
      "apiGroup": "rabbitmq.com",
      "apiKind": "Binding",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.Exchange",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "ExchangeSpec defines the desired state of Exchange",
            "type": "object",
            "required": [
              "name",
              "rabbitmqClusterReference"
            ],
            "properties": {
              "arguments": {
                "x-kubernetes-preserve-unknown-fields": true
              },
              "autoDelete": {
                "description": "Cannot be updated",
                "type": "boolean"
              },
              "durable": {
                "description": "Cannot be updated",
                "type": "boolean"
              },
              "name": {
                "description": "Required property; cannot be updated",
                "type": "string"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that the exchange will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "type": {
                "description": "Cannot be updated",
                "type": "string"
              },
              "vhost": {
                "description": "Default to vhost '/'; cannot be updated",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "ExchangeStatus defines the observed state of Exchange",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Exchange. It corresponds to the\nExchange's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "Exchange is the Schema for the exchanges API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "Exchange",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "exchanges.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "exchanges",
            "singular": "exchange",
            "kind": "Exchange",
            "listKind": "ExchangeList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Exchange is the Schema for the exchanges API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "ExchangeSpec defines the desired state of Exchange",
                      "type": "object",
                      "required": [
                        "name",
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "arguments": {
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "autoDelete": {
                          "description": "Cannot be updated",
                          "type": "boolean"
                        },
                        "durable": {
                          "description": "Cannot be updated",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "Required property; cannot be updated",
                          "type": "string"
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that the exchange will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "type": {
                          "description": "Cannot be updated",
                          "type": "string",
                          "default": "direct"
                        },
                        "vhost": {
                          "description": "Default to vhost '/'; cannot be updated",
                          "type": "string",
                          "default": "/"
                        }
                      }
                    },
                    "status": {
                      "description": "ExchangeStatus defines the observed state of Exchange",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Exchange. It corresponds to the\nExchange's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "exchanges",
            "singular": "exchange",
            "kind": "Exchange",
            "listKind": "ExchangeList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Exchange",
      "apiGroup": "rabbitmq.com",
      "apiKind": "Exchange",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.Federation",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "FederationSpec defines the desired state of Federation\nFor how to configure federation upstreams, see: https://www.rabbitmq.com/federation-reference.html.",
            "type": "object",
            "required": [
              "name",
              "rabbitmqClusterReference",
              "uriSecret"
            ],
            "properties": {
              "ackMode": {
                "type": "string",
                "enum": [
                  "on-confirm",
                  "on-publish",
                  "no-ack"
                ]
              },
              "exchange": {
                "type": "string"
              },
              "expires": {
                "type": "integer"
              },
              "maxHops": {
                "type": "integer"
              },
              "messageTTL": {
                "type": "integer"
              },
              "name": {
                "description": "Required property; cannot be updated",
                "type": "string"
              },
              "prefetch-count": {
                "type": "integer"
              },
              "queue": {
                "type": "string"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that this federation upstream will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "reconnectDelay": {
                "type": "integer"
              },
              "trustUserId": {
                "type": "boolean"
              },
              "uriSecret": {
                "description": "Secret contains the AMQP URI(s) for the upstream.\nThe Secret must contain the key `uri` or operator will error.\n`uri` should be one or multiple uris separated by ','.\nRequired property.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "vhost": {
                "description": "Default to vhost '/'; cannot be updated",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "FederationStatus defines the observed state of Federation",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Federation. It corresponds to the\nFederation's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "Federation is the Schema for the federations API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "Federation",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "federations.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "federations",
            "singular": "federation",
            "kind": "Federation",
            "listKind": "FederationList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Federation is the Schema for the federations API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "FederationSpec defines the desired state of Federation\nFor how to configure federation upstreams, see: https://www.rabbitmq.com/federation-reference.html.",
                      "type": "object",
                      "required": [
                        "name",
                        "rabbitmqClusterReference",
                        "uriSecret"
                      ],
                      "properties": {
                        "ackMode": {
                          "type": "string",
                          "enum": [
                            "on-confirm",
                            "on-publish",
                            "no-ack"
                          ]
                        },
                        "exchange": {
                          "type": "string"
                        },
                        "expires": {
                          "type": "integer"
                        },
                        "maxHops": {
                          "type": "integer"
                        },
                        "messageTTL": {
                          "type": "integer"
                        },
                        "name": {
                          "description": "Required property; cannot be updated",
                          "type": "string"
                        },
                        "prefetch-count": {
                          "type": "integer"
                        },
                        "queue": {
                          "type": "string"
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that this federation upstream will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "reconnectDelay": {
                          "type": "integer"
                        },
                        "trustUserId": {
                          "type": "boolean"
                        },
                        "uriSecret": {
                          "description": "Secret contains the AMQP URI(s) for the upstream.\nThe Secret must contain the key `uri` or operator will error.\n`uri` should be one or multiple uris separated by ','.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "vhost": {
                          "description": "Default to vhost '/'; cannot be updated",
                          "type": "string",
                          "default": "/"
                        }
                      }
                    },
                    "status": {
                      "description": "FederationStatus defines the observed state of Federation",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Federation. It corresponds to the\nFederation's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "federations",
            "singular": "federation",
            "kind": "Federation",
            "listKind": "FederationList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Federation",
      "apiGroup": "rabbitmq.com",
      "apiKind": "Federation",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.OperatorPolicy",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "OperatorPolicySpec defines the desired state of OperatorPolicy\nhttps://www.rabbitmq.com/parameters.html#operator-policies",
            "type": "object",
            "required": [
              "definition",
              "name",
              "pattern",
              "rabbitmqClusterReference"
            ],
            "properties": {
              "applyTo": {
                "description": "What this operator policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams'.\nDefault to 'queues'.",
                "type": "string",
                "enum": [
                  "queues",
                  "classic_queues",
                  "quorum_queues",
                  "streams"
                ]
              },
              "definition": {
                "description": "OperatorPolicy definition. Required property.",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "name": {
                "description": "Required property; cannot be updated",
                "type": "string"
              },
              "pattern": {
                "description": "Regular expression pattern used to match queues, e.g. \"^my-queue$\".\nRequired property.",
                "type": "string"
              },
              "priority": {
                "description": "Default to '0'.\nIn the event that more than one operator policy can match a given queue, the operator policy with the greatest priority applies.",
                "type": "integer"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that the operator policy will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "vhost": {
                "description": "Default to vhost '/'; cannot be updated",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "OperatorPolicyStatus defines the observed state of OperatorPolicy",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this OperatorPolicy. It corresponds to the\nOperatorPolicy's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "OperatorPolicy is the Schema for the operator policies API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "OperatorPolicy",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "operatorpolicies.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "operatorpolicies",
            "singular": "operatorpolicy",
            "kind": "OperatorPolicy",
            "listKind": "OperatorPolicyList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "OperatorPolicy is the Schema for the operator policies API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "OperatorPolicySpec defines the desired state of OperatorPolicy\nhttps://www.rabbitmq.com/parameters.html#operator-policies",
                      "type": "object",
                      "required": [
                        "definition",
                        "name",
                        "pattern",
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "applyTo": {
                          "description": "What this operator policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams'.\nDefault to 'queues'.",
                          "type": "string",
                          "default": "queues",
                          "enum": [
                            "queues",
                            "classic_queues",
                            "quorum_queues",
                            "streams"
                          ]
                        },
                        "definition": {
                          "description": "OperatorPolicy definition. Required property.",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "name": {
                          "description": "Required property; cannot be updated",
                          "type": "string"
                        },
                        "pattern": {
                          "description": "Regular expression pattern used to match queues, e.g. \"^my-queue$\".\nRequired property.",
                          "type": "string"
                        },
                        "priority": {
                          "description": "Default to '0'.\nIn the event that more than one operator policy can match a given queue, the operator policy with the greatest priority applies.",
                          "type": "integer",
                          "default": 0
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that the operator policy will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "vhost": {
                          "description": "Default to vhost '/'; cannot be updated",
                          "type": "string",
                          "default": "/"
                        }
                      }
                    },
                    "status": {
                      "description": "OperatorPolicyStatus defines the observed state of OperatorPolicy",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this OperatorPolicy. It corresponds to the\nOperatorPolicy's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "operatorpolicies",
            "singular": "operatorpolicy",
            "kind": "OperatorPolicy",
            "listKind": "OperatorPolicyList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "OperatorPolicy",
      "apiGroup": "rabbitmq.com",
      "apiKind": "OperatorPolicy",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.Permission",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "PermissionSpec defines the desired state of Permission",
            "type": "object",
            "required": [
              "permissions",
              "rabbitmqClusterReference",
              "vhost"
            ],
            "properties": {
              "permissions": {
                "description": "Permissions to grant to the user in the specific vhost; required property.\nSee RabbitMQ doc for more information: https://www.rabbitmq.com/access-control.html#user-management",
                "type": "object",
                "properties": {
                  "configure": {
                    "type": "string"
                  },
                  "read": {
                    "type": "string"
                  },
                  "write": {
                    "type": "string"
                  }
                }
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that both the provided user and vhost are.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "user": {
                "description": "Name of an existing user; must provide user or userReference, else create/update will fail; cannot be updated",
                "type": "string"
              },
              "userReference": {
                "description": "Reference to an existing user.rabbitmq.com object; must provide user or userReference, else create/update will fail; cannot be updated",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "vhost": {
                "description": "Name of an existing vhost; required property; cannot be updated",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "PermissionStatus defines the observed state of Permission",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Permission. It corresponds to the\nPermission's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "Permission is the Schema for the permissions API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "Permission",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "permissions.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "permissions",
            "singular": "permission",
            "kind": "Permission",
            "listKind": "PermissionList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Permission is the Schema for the permissions API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "PermissionSpec defines the desired state of Permission",
                      "type": "object",
                      "required": [
                        "permissions",
                        "rabbitmqClusterReference",
                        "vhost"
                      ],
                      "properties": {
                        "permissions": {
                          "description": "Permissions to grant to the user in the specific vhost; required property.\nSee RabbitMQ doc for more information: https://www.rabbitmq.com/access-control.html#user-management",
                          "type": "object",
                          "properties": {
                            "configure": {
                              "type": "string"
                            },
                            "read": {
                              "type": "string"
                            },
                            "write": {
                              "type": "string"
                            }
                          }
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that both the provided user and vhost are.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "user": {
                          "description": "Name of an existing user; must provide user or userReference, else create/update will fail; cannot be updated",
                          "type": "string"
                        },
                        "userReference": {
                          "description": "Reference to an existing user.rabbitmq.com object; must provide user or userReference, else create/update will fail; cannot be updated",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "vhost": {
                          "description": "Name of an existing vhost; required property; cannot be updated",
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "description": "PermissionStatus defines the observed state of Permission",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Permission. It corresponds to the\nPermission's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "permissions",
            "singular": "permission",
            "kind": "Permission",
            "listKind": "PermissionList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Permission",
      "apiGroup": "rabbitmq.com",
      "apiKind": "Permission",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.Policy",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "PolicySpec defines the desired state of Policy\nhttps://www.rabbitmq.com/parameters.html#policies",
            "type": "object",
            "required": [
              "definition",
              "name",
              "pattern",
              "rabbitmqClusterReference"
            ],
            "properties": {
              "applyTo": {
                "description": "What this policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams', 'exchanges', or 'all'.\nDefault to 'all'.",
                "type": "string",
                "enum": [
                  "queues",
                  "classic_queues",
                  "quorum_queues",
                  "streams",
                  "exchanges",
                  "all"
                ]
              },
              "definition": {
                "description": "Policy definition. Required property.",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "name": {
                "description": "Required property; cannot be updated",
                "type": "string"
              },
              "pattern": {
                "description": "Regular expression pattern used to match queues and exchanges, e.g. \"^amq.\".\nRequired property.",
                "type": "string"
              },
              "priority": {
                "description": "Default to '0'.\nIn the event that more than one policy can match a given exchange or queue, the policy with the greatest priority applies.",
                "type": "integer"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that the policy will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "vhost": {
                "description": "Default to vhost '/'; cannot be updated",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "PolicyStatus defines the observed state of Policy",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Policy. It corresponds to the\nPolicy's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "Policy is the Schema for the policies API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "Policy",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "policies.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "policies",
            "singular": "policy",
            "kind": "Policy",
            "listKind": "PolicyList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Policy is the Schema for the policies API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "PolicySpec defines the desired state of Policy\nhttps://www.rabbitmq.com/parameters.html#policies",
                      "type": "object",
                      "required": [
                        "definition",
                        "name",
                        "pattern",
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "applyTo": {
                          "description": "What this policy applies to: 'queues', 'classic_queues', 'quorum_queues', 'streams', 'exchanges', or 'all'.\nDefault to 'all'.",
                          "type": "string",
                          "default": "all",
                          "enum": [
                            "queues",
                            "classic_queues",
                            "quorum_queues",
                            "streams",
                            "exchanges",
                            "all"
                          ]
                        },
                        "definition": {
                          "description": "Policy definition. Required property.",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "name": {
                          "description": "Required property; cannot be updated",
                          "type": "string"
                        },
                        "pattern": {
                          "description": "Regular expression pattern used to match queues and exchanges, e.g. \"^amq.\".\nRequired property.",
                          "type": "string"
                        },
                        "priority": {
                          "description": "Default to '0'.\nIn the event that more than one policy can match a given exchange or queue, the policy with the greatest priority applies.",
                          "type": "integer",
                          "default": 0
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that the policy will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "vhost": {
                          "description": "Default to vhost '/'; cannot be updated",
                          "type": "string",
                          "default": "/"
                        }
                      }
                    },
                    "status": {
                      "description": "PolicyStatus defines the observed state of Policy",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Policy. It corresponds to the\nPolicy's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "policies",
            "singular": "policy",
            "kind": "Policy",
            "listKind": "PolicyList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Policy",
      "apiGroup": "rabbitmq.com",
      "apiKind": "Policy",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.Queue",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "QueueSpec defines the desired state of Queue",
            "type": "object",
            "required": [
              "name",
              "rabbitmqClusterReference"
            ],
            "properties": {
              "arguments": {
                "description": "Queue arguments in the format of KEY: VALUE. e.g. x-delivery-limit: 10000.\nConfiguring queues through arguments is not recommended because they cannot be updated once set; we recommend configuring queues through policies instead.",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "autoDelete": {
                "description": "when set to true, queues that have had at least one consumer before are deleted after the last consumer unsubscribes.",
                "type": "boolean"
              },
              "deleteIfEmpty": {
                "description": "when set to true, queues are deleted only if empty.",
                "type": "boolean"
              },
              "deleteIfUnused": {
                "description": "when set to true, queues are delete only if they have no consumer.",
                "type": "boolean"
              },
              "durable": {
                "description": "When set to false queues does not survive server restart.",
                "type": "boolean"
              },
              "name": {
                "description": "Name of the queue; required property.",
                "type": "string"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that the queue will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "type": {
                "type": "string"
              },
              "vhost": {
                "description": "Default to vhost '/'",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "QueueStatus defines the observed state of Queue",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Queue. It corresponds to the\nQueue's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "Queue is the Schema for the queues API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "Queue",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "queues.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "queues",
            "singular": "queue",
            "kind": "Queue",
            "listKind": "QueueList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Queue is the Schema for the queues API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "QueueSpec defines the desired state of Queue",
                      "type": "object",
                      "required": [
                        "name",
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "arguments": {
                          "description": "Queue arguments in the format of KEY: VALUE. e.g. x-delivery-limit: 10000.\nConfiguring queues through arguments is not recommended because they cannot be updated once set; we recommend configuring queues through policies instead.",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "autoDelete": {
                          "description": "when set to true, queues that have had at least one consumer before are deleted after the last consumer unsubscribes.",
                          "type": "boolean"
                        },
                        "deleteIfEmpty": {
                          "description": "when set to true, queues are deleted only if empty.",
                          "type": "boolean"
                        },
                        "deleteIfUnused": {
                          "description": "when set to true, queues are delete only if they have no consumer.",
                          "type": "boolean"
                        },
                        "durable": {
                          "description": "When set to false queues does not survive server restart.",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "Name of the queue; required property.",
                          "type": "string"
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that the queue will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "type": {
                          "type": "string"
                        },
                        "vhost": {
                          "description": "Default to vhost '/'",
                          "type": "string",
                          "default": "/"
                        }
                      }
                    },
                    "status": {
                      "description": "QueueStatus defines the observed state of Queue",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Queue. It corresponds to the\nQueue's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "queues",
            "singular": "queue",
            "kind": "Queue",
            "listKind": "QueueList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Queue",
      "apiGroup": "rabbitmq.com",
      "apiKind": "Queue",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.RabbitmqCluster",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "Spec is the desired state of the RabbitmqCluster Custom Resource.",
            "type": "object",
            "properties": {
              "affinity": {
                "description": "Affinity scheduling rules to be applied on created Pods.",
                "type": "object",
                "properties": {
                  "nodeAffinity": {
                    "description": "Describes node affinity scheduling rules for the pod.",
                    "type": "object",
                    "properties": {
                      "preferredDuringSchedulingIgnoredDuringExecution": {
                        "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.",
                        "type": "array",
                        "items": {
                          "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                          "type": "object",
                          "required": [
                            "preference",
                            "weight"
                          ],
                          "properties": {
                            "preference": {
                              "description": "A node selector term, associated with the corresponding weight.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "A list of node selector requirements by node's labels.",
                                  "type": "array",
                                  "items": {
                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "matchFields": {
                                  "description": "A list of node selector requirements by node's fields.",
                                  "type": "array",
                                  "items": {
                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "weight": {
                              "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        }
                      },
                      "requiredDuringSchedulingIgnoredDuringExecution": {
                        "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.",
                        "type": "object",
                        "required": [
                          "nodeSelectorTerms"
                        ],
                        "properties": {
                          "nodeSelectorTerms": {
                            "description": "Required. A list of node selector terms. The terms are ORed.",
                            "type": "array",
                            "items": {
                              "description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "A list of node selector requirements by node's labels.",
                                  "type": "array",
                                  "items": {
                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "matchFields": {
                                  "description": "A list of node selector requirements by node's fields.",
                                  "type": "array",
                                  "items": {
                                    "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "The label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            }
                          }
                        },
                        "x-kubernetes-map-type": "atomic"
                      }
                    }
                  },
                  "podAffinity": {
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                    "type": "object",
                    "properties": {
                      "preferredDuringSchedulingIgnoredDuringExecution": {
                        "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                        "type": "array",
                        "items": {
                          "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                          "type": "object",
                          "required": [
                            "podAffinityTerm",
                            "weight"
                          ],
                          "properties": {
                            "podAffinityTerm": {
                              "description": "Required. A pod affinity term, associated with the corresponding weight.",
                              "type": "object",
                              "required": [
                                "topologyKey"
                              ],
                              "properties": {
                                "labelSelector": {
                                  "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "matchLabelKeys": {
                                  "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "mismatchLabelKeys": {
                                  "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "namespaceSelector": {
                                  "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "namespaces": {
                                  "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "topologyKey": {
                                  "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                  "type": "string"
                                }
                              }
                            },
                            "weight": {
                              "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        }
                      },
                      "requiredDuringSchedulingIgnoredDuringExecution": {
                        "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                        "type": "array",
                        "items": {
                          "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running",
                          "type": "object",
                          "required": [
                            "topologyKey"
                          ],
                          "properties": {
                            "labelSelector": {
                              "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "matchLabels": {
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "matchLabelKeys": {
                              "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "mismatchLabelKeys": {
                              "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "namespaceSelector": {
                              "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "matchLabels": {
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "namespaces": {
                              "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "topologyKey": {
                              "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "podAntiAffinity": {
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                    "type": "object",
                    "properties": {
                      "preferredDuringSchedulingIgnoredDuringExecution": {
                        "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                        "type": "array",
                        "items": {
                          "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                          "type": "object",
                          "required": [
                            "podAffinityTerm",
                            "weight"
                          ],
                          "properties": {
                            "podAffinityTerm": {
                              "description": "Required. A pod affinity term, associated with the corresponding weight.",
                              "type": "object",
                              "required": [
                                "topologyKey"
                              ],
                              "properties": {
                                "labelSelector": {
                                  "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "matchLabelKeys": {
                                  "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "mismatchLabelKeys": {
                                  "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "namespaceSelector": {
                                  "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                        "type": "object",
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                },
                                "namespaces": {
                                  "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "topologyKey": {
                                  "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                  "type": "string"
                                }
                              }
                            },
                            "weight": {
                              "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        }
                      },
                      "requiredDuringSchedulingIgnoredDuringExecution": {
                        "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                        "type": "array",
                        "items": {
                          "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running",
                          "type": "object",
                          "required": [
                            "topologyKey"
                          ],
                          "properties": {
                            "labelSelector": {
                              "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "matchLabels": {
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "matchLabelKeys": {
                              "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "mismatchLabelKeys": {
                              "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "namespaceSelector": {
                              "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                    "type": "object",
                                    "required": [
                                      "key",
                                      "operator"
                                    ],
                                    "properties": {
                                      "key": {
                                        "description": "key is the label key that the selector applies to.",
                                        "type": "string"
                                      },
                                      "operator": {
                                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                        "type": "string"
                                      },
                                      "values": {
                                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "matchLabels": {
                                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "namespaces": {
                              "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "topologyKey": {
                              "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "delayStartSeconds": {
                "description": "DelayStartSeconds is the time the init container (`setup-container`) will sleep before terminating.\nThis effectively delays the time between starting the Pod and starting the `rabbitmq` container.\nRabbitMQ relies on up-to-date DNS entries early during peer discovery.\nThe purpose of this artificial delay is to ensure that DNS entries are up-to-date when booting RabbitMQ.\nFor more information, see https://github.com/kubernetes/kubernetes/issues/92559\nIf your Kubernetes DNS backend is configured with a low DNS cache value or publishes not ready addresses\npromptly, you can decrase this value or set it to 0.",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "image": {
                "description": "Image is the name of the RabbitMQ docker image to use for RabbitMQ nodes in the RabbitmqCluster.\nMust be provided together with ImagePullSecrets in order to use an image in a private registry.",
                "type": "string"
              },
              "imagePullSecrets": {
                "description": "List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.",
                "type": "array",
                "items": {
                  "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                }
              },
              "override": {
                "type": "object",
                "properties": {
                  "service": {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "spec": {
                        "type": "object",
                        "properties": {
                          "allocateLoadBalancerNodePorts": {
                            "type": "boolean"
                          },
                          "clusterIP": {
                            "type": "string"
                          },
                          "clusterIPs": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "externalIPs": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "externalName": {
                            "type": "string"
                          },
                          "externalTrafficPolicy": {
                            "type": "string"
                          },
                          "healthCheckNodePort": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "internalTrafficPolicy": {
                            "type": "string"
                          },
                          "ipFamilies": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "x-kubernetes-list-type": "atomic"
                          },
                          "ipFamilyPolicy": {
                            "type": "string"
                          },
                          "loadBalancerClass": {
                            "type": "string"
                          },
                          "loadBalancerIP": {
                            "type": "string"
                          },
                          "loadBalancerSourceRanges": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ports": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "port"
                              ],
                              "properties": {
                                "appProtocol": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "nodePort": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "port": {
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "protocol": {
                                  "type": "string"
                                },
                                "targetPort": {
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "x-kubernetes-list-map-keys": [
                              "port",
                              "protocol"
                            ],
                            "x-kubernetes-list-type": "map"
                          },
                          "publishNotReadyAddresses": {
                            "type": "boolean"
                          },
                          "selector": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "sessionAffinity": {
                            "type": "string"
                          },
                          "sessionAffinityConfig": {
                            "type": "object",
                            "properties": {
                              "clientIP": {
                                "type": "object",
                                "properties": {
                                  "timeoutSeconds": {
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                }
                              }
                            }
                          },
                          "type": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "statefulSet": {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "annotations": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "labels": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "spec": {
                        "type": "object",
                        "properties": {
                          "minReadySeconds": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "persistentVolumeClaimRetentionPolicy": {
                            "type": "object",
                            "properties": {
                              "whenDeleted": {
                                "type": "string"
                              },
                              "whenScaled": {
                                "type": "string"
                              }
                            }
                          },
                          "podManagementPolicy": {
                            "type": "string"
                          },
                          "replicas": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "selector": {
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "values": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "matchLabels": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "serviceName": {
                            "type": "string"
                          },
                          "template": {
                            "type": "object",
                            "properties": {
                              "metadata": {
                                "type": "object",
                                "properties": {
                                  "annotations": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "labels": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                }
                              },
                              "spec": {
                                "type": "object",
                                "required": [
                                  "containers"
                                ],
                                "properties": {
                                  "activeDeadlineSeconds": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "affinity": {
                                    "type": "object",
                                    "properties": {
                                      "nodeAffinity": {
                                        "type": "object",
                                        "properties": {
                                          "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "preference",
                                                "weight"
                                              ],
                                              "properties": {
                                                "preference": {
                                                  "type": "object",
                                                  "properties": {
                                                    "matchExpressions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "key",
                                                          "operator"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "type": "string"
                                                          },
                                                          "operator": {
                                                            "type": "string"
                                                          },
                                                          "values": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "matchFields": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "key",
                                                          "operator"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "type": "string"
                                                          },
                                                          "operator": {
                                                            "type": "string"
                                                          },
                                                          "values": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "x-kubernetes-map-type": "atomic"
                                                },
                                                "weight": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            }
                                          },
                                          "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "type": "object",
                                            "required": [
                                              "nodeSelectorTerms"
                                            ],
                                            "properties": {
                                              "nodeSelectorTerms": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "matchExpressions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "key",
                                                          "operator"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "type": "string"
                                                          },
                                                          "operator": {
                                                            "type": "string"
                                                          },
                                                          "values": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "matchFields": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "key",
                                                          "operator"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "type": "string"
                                                          },
                                                          "operator": {
                                                            "type": "string"
                                                          },
                                                          "values": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "x-kubernetes-map-type": "atomic"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          }
                                        }
                                      },
                                      "podAffinity": {
                                        "type": "object",
                                        "properties": {
                                          "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "podAffinityTerm",
                                                "weight"
                                              ],
                                              "properties": {
                                                "podAffinityTerm": {
                                                  "type": "object",
                                                  "required": [
                                                    "topologyKey"
                                                  ],
                                                  "properties": {
                                                    "labelSelector": {
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchLabels": {
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchLabels": {
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "topologyKey": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "weight": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            }
                                          },
                                          "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "topologyKey"
                                              ],
                                              "properties": {
                                                "labelSelector": {
                                                  "type": "object",
                                                  "properties": {
                                                    "matchExpressions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "key",
                                                          "operator"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "type": "string"
                                                          },
                                                          "operator": {
                                                            "type": "string"
                                                          },
                                                          "values": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "matchLabels": {
                                                      "type": "object",
                                                      "additionalProperties": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "x-kubernetes-map-type": "atomic"
                                                },
                                                "matchLabelKeys": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                },
                                                "mismatchLabelKeys": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                },
                                                "namespaceSelector": {
                                                  "type": "object",
                                                  "properties": {
                                                    "matchExpressions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "key",
                                                          "operator"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "type": "string"
                                                          },
                                                          "operator": {
                                                            "type": "string"
                                                          },
                                                          "values": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "matchLabels": {
                                                      "type": "object",
                                                      "additionalProperties": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "x-kubernetes-map-type": "atomic"
                                                },
                                                "namespaces": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "topologyKey": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "podAntiAffinity": {
                                        "type": "object",
                                        "properties": {
                                          "preferredDuringSchedulingIgnoredDuringExecution": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "podAffinityTerm",
                                                "weight"
                                              ],
                                              "properties": {
                                                "podAffinityTerm": {
                                                  "type": "object",
                                                  "required": [
                                                    "topologyKey"
                                                  ],
                                                  "properties": {
                                                    "labelSelector": {
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchLabels": {
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "matchLabelKeys": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "mismatchLabelKeys": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "namespaceSelector": {
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchLabels": {
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "namespaces": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "topologyKey": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "weight": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                }
                                              }
                                            }
                                          },
                                          "requiredDuringSchedulingIgnoredDuringExecution": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "topologyKey"
                                              ],
                                              "properties": {
                                                "labelSelector": {
                                                  "type": "object",
                                                  "properties": {
                                                    "matchExpressions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "key",
                                                          "operator"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "type": "string"
                                                          },
                                                          "operator": {
                                                            "type": "string"
                                                          },
                                                          "values": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "matchLabels": {
                                                      "type": "object",
                                                      "additionalProperties": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "x-kubernetes-map-type": "atomic"
                                                },
                                                "matchLabelKeys": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                },
                                                "mismatchLabelKeys": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "x-kubernetes-list-type": "atomic"
                                                },
                                                "namespaceSelector": {
                                                  "type": "object",
                                                  "properties": {
                                                    "matchExpressions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "key",
                                                          "operator"
                                                        ],
                                                        "properties": {
                                                          "key": {
                                                            "type": "string"
                                                          },
                                                          "operator": {
                                                            "type": "string"
                                                          },
                                                          "values": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "matchLabels": {
                                                      "type": "object",
                                                      "additionalProperties": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "x-kubernetes-map-type": "atomic"
                                                },
                                                "namespaces": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "topologyKey": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "automountServiceAccountToken": {
                                    "type": "boolean"
                                  },
                                  "containers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "command": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "env": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "name"
                                            ],
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "value": {
                                                "type": "string"
                                              },
                                              "valueFrom": {
                                                "type": "object",
                                                "properties": {
                                                  "configMapKeyRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "key"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "fieldRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "fieldPath"
                                                    ],
                                                    "properties": {
                                                      "apiVersion": {
                                                        "type": "string"
                                                      },
                                                      "fieldPath": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "resourceFieldRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "resource"
                                                    ],
                                                    "properties": {
                                                      "containerName": {
                                                        "type": "string"
                                                      },
                                                      "divisor": {
                                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                        "x-kubernetes-int-or-string": true
                                                      },
                                                      "resource": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "secretKeyRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "key"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "envFrom": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "configMapRef": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "optional": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "prefix": {
                                                "type": "string"
                                              },
                                              "secretRef": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "optional": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              }
                                            }
                                          }
                                        },
                                        "image": {
                                          "type": "string"
                                        },
                                        "imagePullPolicy": {
                                          "type": "string"
                                        },
                                        "lifecycle": {
                                          "type": "object",
                                          "properties": {
                                            "postStart": {
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "httpGet": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "sleep": {
                                                  "type": "object",
                                                  "required": [
                                                    "seconds"
                                                  ],
                                                  "properties": {
                                                    "seconds": {
                                                      "type": "integer",
                                                      "format": "int64"
                                                    }
                                                  }
                                                },
                                                "tcpSocket": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "preStop": {
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "httpGet": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "sleep": {
                                                  "type": "object",
                                                  "required": [
                                                    "seconds"
                                                  ],
                                                  "properties": {
                                                    "seconds": {
                                                      "type": "integer",
                                                      "format": "int64"
                                                    }
                                                  }
                                                },
                                                "tcpSocket": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "livenessProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "ports": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "containerPort"
                                            ],
                                            "properties": {
                                              "containerPort": {
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "hostIP": {
                                                "type": "string"
                                              },
                                              "hostPort": {
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "protocol": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-list-map-keys": [
                                            "containerPort",
                                            "protocol"
                                          ],
                                          "x-kubernetes-list-type": "map"
                                        },
                                        "readinessProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "resizePolicy": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "resourceName",
                                              "restartPolicy"
                                            ],
                                            "properties": {
                                              "resourceName": {
                                                "type": "string"
                                              },
                                              "restartPolicy": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "resources": {
                                          "type": "object",
                                          "properties": {
                                            "claims": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "x-kubernetes-list-map-keys": [
                                                "name"
                                              ],
                                              "x-kubernetes-list-type": "map"
                                            },
                                            "limits": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            },
                                            "requests": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            }
                                          }
                                        },
                                        "restartPolicy": {
                                          "type": "string"
                                        },
                                        "securityContext": {
                                          "type": "object",
                                          "properties": {
                                            "allowPrivilegeEscalation": {
                                              "type": "boolean"
                                            },
                                            "capabilities": {
                                              "type": "object",
                                              "properties": {
                                                "add": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "drop": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "privileged": {
                                              "type": "boolean"
                                            },
                                            "procMount": {
                                              "type": "string"
                                            },
                                            "readOnlyRootFilesystem": {
                                              "type": "boolean"
                                            },
                                            "runAsGroup": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "runAsNonRoot": {
                                              "type": "boolean"
                                            },
                                            "runAsUser": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "seLinuxOptions": {
                                              "type": "object",
                                              "properties": {
                                                "level": {
                                                  "type": "string"
                                                },
                                                "role": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                },
                                                "user": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "seccompProfile": {
                                              "type": "object",
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "localhostProfile": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "windowsOptions": {
                                              "type": "object",
                                              "properties": {
                                                "gmsaCredentialSpec": {
                                                  "type": "string"
                                                },
                                                "gmsaCredentialSpecName": {
                                                  "type": "string"
                                                },
                                                "hostProcess": {
                                                  "type": "boolean"
                                                },
                                                "runAsUserName": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "startupProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "stdin": {
                                          "type": "boolean"
                                        },
                                        "stdinOnce": {
                                          "type": "boolean"
                                        },
                                        "terminationMessagePath": {
                                          "type": "string"
                                        },
                                        "terminationMessagePolicy": {
                                          "type": "string"
                                        },
                                        "tty": {
                                          "type": "boolean"
                                        },
                                        "volumeDevices": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "devicePath",
                                              "name"
                                            ],
                                            "properties": {
                                              "devicePath": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "volumeMounts": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "mountPath",
                                              "name"
                                            ],
                                            "properties": {
                                              "mountPath": {
                                                "type": "string"
                                              },
                                              "mountPropagation": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "readOnly": {
                                                "type": "boolean"
                                              },
                                              "subPath": {
                                                "type": "string"
                                              },
                                              "subPathExpr": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "workingDir": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "dnsConfig": {
                                    "type": "object",
                                    "properties": {
                                      "nameservers": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "options": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "searches": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "dnsPolicy": {
                                    "type": "string"
                                  },
                                  "enableServiceLinks": {
                                    "type": "boolean"
                                  },
                                  "ephemeralContainers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "command": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "env": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "name"
                                            ],
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "value": {
                                                "type": "string"
                                              },
                                              "valueFrom": {
                                                "type": "object",
                                                "properties": {
                                                  "configMapKeyRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "key"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "fieldRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "fieldPath"
                                                    ],
                                                    "properties": {
                                                      "apiVersion": {
                                                        "type": "string"
                                                      },
                                                      "fieldPath": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "resourceFieldRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "resource"
                                                    ],
                                                    "properties": {
                                                      "containerName": {
                                                        "type": "string"
                                                      },
                                                      "divisor": {
                                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                        "x-kubernetes-int-or-string": true
                                                      },
                                                      "resource": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "secretKeyRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "key"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "envFrom": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "configMapRef": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "optional": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "prefix": {
                                                "type": "string"
                                              },
                                              "secretRef": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "optional": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              }
                                            }
                                          }
                                        },
                                        "image": {
                                          "type": "string"
                                        },
                                        "imagePullPolicy": {
                                          "type": "string"
                                        },
                                        "lifecycle": {
                                          "type": "object",
                                          "properties": {
                                            "postStart": {
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "httpGet": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "sleep": {
                                                  "type": "object",
                                                  "required": [
                                                    "seconds"
                                                  ],
                                                  "properties": {
                                                    "seconds": {
                                                      "type": "integer",
                                                      "format": "int64"
                                                    }
                                                  }
                                                },
                                                "tcpSocket": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "preStop": {
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "httpGet": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "sleep": {
                                                  "type": "object",
                                                  "required": [
                                                    "seconds"
                                                  ],
                                                  "properties": {
                                                    "seconds": {
                                                      "type": "integer",
                                                      "format": "int64"
                                                    }
                                                  }
                                                },
                                                "tcpSocket": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "livenessProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "ports": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "containerPort"
                                            ],
                                            "properties": {
                                              "containerPort": {
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "hostIP": {
                                                "type": "string"
                                              },
                                              "hostPort": {
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "protocol": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-list-map-keys": [
                                            "containerPort",
                                            "protocol"
                                          ],
                                          "x-kubernetes-list-type": "map"
                                        },
                                        "readinessProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "resizePolicy": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "resourceName",
                                              "restartPolicy"
                                            ],
                                            "properties": {
                                              "resourceName": {
                                                "type": "string"
                                              },
                                              "restartPolicy": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "resources": {
                                          "type": "object",
                                          "properties": {
                                            "claims": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "x-kubernetes-list-map-keys": [
                                                "name"
                                              ],
                                              "x-kubernetes-list-type": "map"
                                            },
                                            "limits": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            },
                                            "requests": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            }
                                          }
                                        },
                                        "restartPolicy": {
                                          "type": "string"
                                        },
                                        "securityContext": {
                                          "type": "object",
                                          "properties": {
                                            "allowPrivilegeEscalation": {
                                              "type": "boolean"
                                            },
                                            "capabilities": {
                                              "type": "object",
                                              "properties": {
                                                "add": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "drop": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "privileged": {
                                              "type": "boolean"
                                            },
                                            "procMount": {
                                              "type": "string"
                                            },
                                            "readOnlyRootFilesystem": {
                                              "type": "boolean"
                                            },
                                            "runAsGroup": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "runAsNonRoot": {
                                              "type": "boolean"
                                            },
                                            "runAsUser": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "seLinuxOptions": {
                                              "type": "object",
                                              "properties": {
                                                "level": {
                                                  "type": "string"
                                                },
                                                "role": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                },
                                                "user": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "seccompProfile": {
                                              "type": "object",
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "localhostProfile": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "windowsOptions": {
                                              "type": "object",
                                              "properties": {
                                                "gmsaCredentialSpec": {
                                                  "type": "string"
                                                },
                                                "gmsaCredentialSpecName": {
                                                  "type": "string"
                                                },
                                                "hostProcess": {
                                                  "type": "boolean"
                                                },
                                                "runAsUserName": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "startupProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "stdin": {
                                          "type": "boolean"
                                        },
                                        "stdinOnce": {
                                          "type": "boolean"
                                        },
                                        "targetContainerName": {
                                          "type": "string"
                                        },
                                        "terminationMessagePath": {
                                          "type": "string"
                                        },
                                        "terminationMessagePolicy": {
                                          "type": "string"
                                        },
                                        "tty": {
                                          "type": "boolean"
                                        },
                                        "volumeDevices": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "devicePath",
                                              "name"
                                            ],
                                            "properties": {
                                              "devicePath": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "volumeMounts": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "mountPath",
                                              "name"
                                            ],
                                            "properties": {
                                              "mountPath": {
                                                "type": "string"
                                              },
                                              "mountPropagation": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "readOnly": {
                                                "type": "boolean"
                                              },
                                              "subPath": {
                                                "type": "string"
                                              },
                                              "subPathExpr": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "workingDir": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "hostAliases": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hostnames": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "ip": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "hostIPC": {
                                    "type": "boolean"
                                  },
                                  "hostNetwork": {
                                    "type": "boolean"
                                  },
                                  "hostPID": {
                                    "type": "boolean"
                                  },
                                  "hostUsers": {
                                    "type": "boolean"
                                  },
                                  "hostname": {
                                    "type": "string"
                                  },
                                  "imagePullSecrets": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    }
                                  },
                                  "initContainers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "command": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "env": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "name"
                                            ],
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "value": {
                                                "type": "string"
                                              },
                                              "valueFrom": {
                                                "type": "object",
                                                "properties": {
                                                  "configMapKeyRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "key"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "fieldRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "fieldPath"
                                                    ],
                                                    "properties": {
                                                      "apiVersion": {
                                                        "type": "string"
                                                      },
                                                      "fieldPath": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "resourceFieldRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "resource"
                                                    ],
                                                    "properties": {
                                                      "containerName": {
                                                        "type": "string"
                                                      },
                                                      "divisor": {
                                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                        "x-kubernetes-int-or-string": true
                                                      },
                                                      "resource": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "secretKeyRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "key"
                                                    ],
                                                    "properties": {
                                                      "key": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "envFrom": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "configMapRef": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "optional": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "prefix": {
                                                "type": "string"
                                              },
                                              "secretRef": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "optional": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              }
                                            }
                                          }
                                        },
                                        "image": {
                                          "type": "string"
                                        },
                                        "imagePullPolicy": {
                                          "type": "string"
                                        },
                                        "lifecycle": {
                                          "type": "object",
                                          "properties": {
                                            "postStart": {
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "httpGet": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "sleep": {
                                                  "type": "object",
                                                  "required": [
                                                    "seconds"
                                                  ],
                                                  "properties": {
                                                    "seconds": {
                                                      "type": "integer",
                                                      "format": "int64"
                                                    }
                                                  }
                                                },
                                                "tcpSocket": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "preStop": {
                                              "type": "object",
                                              "properties": {
                                                "exec": {
                                                  "type": "object",
                                                  "properties": {
                                                    "command": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "httpGet": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "httpHeaders": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "name",
                                                          "value"
                                                        ],
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "path": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    },
                                                    "scheme": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "sleep": {
                                                  "type": "object",
                                                  "required": [
                                                    "seconds"
                                                  ],
                                                  "properties": {
                                                    "seconds": {
                                                      "type": "integer",
                                                      "format": "int64"
                                                    }
                                                  }
                                                },
                                                "tcpSocket": {
                                                  "type": "object",
                                                  "required": [
                                                    "port"
                                                  ],
                                                  "properties": {
                                                    "host": {
                                                      "type": "string"
                                                    },
                                                    "port": {
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "livenessProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "ports": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "containerPort"
                                            ],
                                            "properties": {
                                              "containerPort": {
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "hostIP": {
                                                "type": "string"
                                              },
                                              "hostPort": {
                                                "type": "integer",
                                                "format": "int32"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "protocol": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-list-map-keys": [
                                            "containerPort",
                                            "protocol"
                                          ],
                                          "x-kubernetes-list-type": "map"
                                        },
                                        "readinessProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "resizePolicy": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "resourceName",
                                              "restartPolicy"
                                            ],
                                            "properties": {
                                              "resourceName": {
                                                "type": "string"
                                              },
                                              "restartPolicy": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "resources": {
                                          "type": "object",
                                          "properties": {
                                            "claims": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "x-kubernetes-list-map-keys": [
                                                "name"
                                              ],
                                              "x-kubernetes-list-type": "map"
                                            },
                                            "limits": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            },
                                            "requests": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "x-kubernetes-int-or-string": true
                                              }
                                            }
                                          }
                                        },
                                        "restartPolicy": {
                                          "type": "string"
                                        },
                                        "securityContext": {
                                          "type": "object",
                                          "properties": {
                                            "allowPrivilegeEscalation": {
                                              "type": "boolean"
                                            },
                                            "capabilities": {
                                              "type": "object",
                                              "properties": {
                                                "add": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "drop": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "privileged": {
                                              "type": "boolean"
                                            },
                                            "procMount": {
                                              "type": "string"
                                            },
                                            "readOnlyRootFilesystem": {
                                              "type": "boolean"
                                            },
                                            "runAsGroup": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "runAsNonRoot": {
                                              "type": "boolean"
                                            },
                                            "runAsUser": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "seLinuxOptions": {
                                              "type": "object",
                                              "properties": {
                                                "level": {
                                                  "type": "string"
                                                },
                                                "role": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                },
                                                "user": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "seccompProfile": {
                                              "type": "object",
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "localhostProfile": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "windowsOptions": {
                                              "type": "object",
                                              "properties": {
                                                "gmsaCredentialSpec": {
                                                  "type": "string"
                                                },
                                                "gmsaCredentialSpecName": {
                                                  "type": "string"
                                                },
                                                "hostProcess": {
                                                  "type": "boolean"
                                                },
                                                "runAsUserName": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "startupProbe": {
                                          "type": "object",
                                          "properties": {
                                            "exec": {
                                              "type": "object",
                                              "properties": {
                                                "command": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "failureThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "grpc": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "port": {
                                                  "type": "integer",
                                                  "format": "int32"
                                                },
                                                "service": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "httpGet": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "httpHeaders": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "path": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                },
                                                "scheme": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "initialDelaySeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "periodSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "successThreshold": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "tcpSocket": {
                                              "type": "object",
                                              "required": [
                                                "port"
                                              ],
                                              "properties": {
                                                "host": {
                                                  "type": "string"
                                                },
                                                "port": {
                                                  "x-kubernetes-int-or-string": true
                                                }
                                              }
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "stdin": {
                                          "type": "boolean"
                                        },
                                        "stdinOnce": {
                                          "type": "boolean"
                                        },
                                        "terminationMessagePath": {
                                          "type": "string"
                                        },
                                        "terminationMessagePolicy": {
                                          "type": "string"
                                        },
                                        "tty": {
                                          "type": "boolean"
                                        },
                                        "volumeDevices": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "devicePath",
                                              "name"
                                            ],
                                            "properties": {
                                              "devicePath": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "volumeMounts": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "mountPath",
                                              "name"
                                            ],
                                            "properties": {
                                              "mountPath": {
                                                "type": "string"
                                              },
                                              "mountPropagation": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "readOnly": {
                                                "type": "boolean"
                                              },
                                              "subPath": {
                                                "type": "string"
                                              },
                                              "subPathExpr": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "workingDir": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "nodeName": {
                                    "type": "string"
                                  },
                                  "nodeSelector": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "x-kubernetes-map-type": "atomic"
                                  },
                                  "os": {
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "overhead": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                      "x-kubernetes-int-or-string": true
                                    }
                                  },
                                  "preemptionPolicy": {
                                    "type": "string"
                                  },
                                  "priority": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "priorityClassName": {
                                    "type": "string"
                                  },
                                  "readinessGates": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "conditionType"
                                      ],
                                      "properties": {
                                        "conditionType": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "resourceClaims": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        },
                                        "source": {
                                          "type": "object",
                                          "properties": {
                                            "resourceClaimName": {
                                              "type": "string"
                                            },
                                            "resourceClaimTemplateName": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "x-kubernetes-list-map-keys": [
                                      "name"
                                    ],
                                    "x-kubernetes-list-type": "map"
                                  },
                                  "restartPolicy": {
                                    "type": "string"
                                  },
                                  "runtimeClassName": {
                                    "type": "string"
                                  },
                                  "schedulerName": {
                                    "type": "string"
                                  },
                                  "schedulingGates": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "x-kubernetes-list-map-keys": [
                                      "name"
                                    ],
                                    "x-kubernetes-list-type": "map"
                                  },
                                  "securityContext": {
                                    "type": "object",
                                    "properties": {
                                      "fsGroup": {
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "fsGroupChangePolicy": {
                                        "type": "string"
                                      },
                                      "runAsGroup": {
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "runAsNonRoot": {
                                        "type": "boolean"
                                      },
                                      "runAsUser": {
                                        "type": "integer",
                                        "format": "int64"
                                      },
                                      "seLinuxOptions": {
                                        "type": "object",
                                        "properties": {
                                          "level": {
                                            "type": "string"
                                          },
                                          "role": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "user": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "seccompProfile": {
                                        "type": "object",
                                        "required": [
                                          "type"
                                        ],
                                        "properties": {
                                          "localhostProfile": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "supplementalGroups": {
                                        "type": "array",
                                        "items": {
                                          "type": "integer",
                                          "format": "int64"
                                        }
                                      },
                                      "sysctls": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "required": [
                                            "name",
                                            "value"
                                          ],
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "windowsOptions": {
                                        "type": "object",
                                        "properties": {
                                          "gmsaCredentialSpec": {
                                            "type": "string"
                                          },
                                          "gmsaCredentialSpecName": {
                                            "type": "string"
                                          },
                                          "hostProcess": {
                                            "type": "boolean"
                                          },
                                          "runAsUserName": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "serviceAccount": {
                                    "type": "string"
                                  },
                                  "serviceAccountName": {
                                    "type": "string"
                                  },
                                  "setHostnameAsFQDN": {
                                    "type": "boolean"
                                  },
                                  "shareProcessNamespace": {
                                    "type": "boolean"
                                  },
                                  "subdomain": {
                                    "type": "string"
                                  },
                                  "terminationGracePeriodSeconds": {
                                    "type": "integer",
                                    "format": "int64"
                                  },
                                  "tolerations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "effect": {
                                          "type": "string"
                                        },
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "tolerationSeconds": {
                                          "type": "integer",
                                          "format": "int64"
                                        },
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "topologySpreadConstraints": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "maxSkew",
                                        "topologyKey",
                                        "whenUnsatisfiable"
                                      ],
                                      "properties": {
                                        "labelSelector": {
                                          "type": "object",
                                          "properties": {
                                            "matchExpressions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "operator"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "type": "string"
                                                  },
                                                  "values": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "matchLabels": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "matchLabelKeys": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "maxSkew": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "minDomains": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "nodeAffinityPolicy": {
                                          "type": "string"
                                        },
                                        "nodeTaintsPolicy": {
                                          "type": "string"
                                        },
                                        "topologyKey": {
                                          "type": "string"
                                        },
                                        "whenUnsatisfiable": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "x-kubernetes-list-map-keys": [
                                      "topologyKey",
                                      "whenUnsatisfiable"
                                    ],
                                    "x-kubernetes-list-type": "map"
                                  },
                                  "volumes": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "awsElasticBlockStore": {
                                          "type": "object",
                                          "required": [
                                            "volumeID"
                                          ],
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "partition": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "volumeID": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "azureDisk": {
                                          "type": "object",
                                          "required": [
                                            "diskName",
                                            "diskURI"
                                          ],
                                          "properties": {
                                            "cachingMode": {
                                              "type": "string"
                                            },
                                            "diskName": {
                                              "type": "string"
                                            },
                                            "diskURI": {
                                              "type": "string"
                                            },
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "kind": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            }
                                          }
                                        },
                                        "azureFile": {
                                          "type": "object",
                                          "required": [
                                            "secretName",
                                            "shareName"
                                          ],
                                          "properties": {
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "secretName": {
                                              "type": "string"
                                            },
                                            "shareName": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "cephfs": {
                                          "type": "object",
                                          "required": [
                                            "monitors"
                                          ],
                                          "properties": {
                                            "monitors": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "path": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "secretFile": {
                                              "type": "string"
                                            },
                                            "secretRef": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            },
                                            "user": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "cinder": {
                                          "type": "object",
                                          "required": [
                                            "volumeID"
                                          ],
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "secretRef": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            },
                                            "volumeID": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "configMap": {
                                          "type": "object",
                                          "properties": {
                                            "defaultMode": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "path"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  },
                                                  "mode": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "path": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "optional": {
                                              "type": "boolean"
                                            }
                                          },
                                          "x-kubernetes-map-type": "atomic"
                                        },
                                        "csi": {
                                          "type": "object",
                                          "required": [
                                            "driver"
                                          ],
                                          "properties": {
                                            "driver": {
                                              "type": "string"
                                            },
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "nodePublishSecretRef": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "volumeAttributes": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "downwardAPI": {
                                          "type": "object",
                                          "properties": {
                                            "defaultMode": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "path"
                                                ],
                                                "properties": {
                                                  "fieldRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "fieldPath"
                                                    ],
                                                    "properties": {
                                                      "apiVersion": {
                                                        "type": "string"
                                                      },
                                                      "fieldPath": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "mode": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "path": {
                                                    "type": "string"
                                                  },
                                                  "resourceFieldRef": {
                                                    "type": "object",
                                                    "required": [
                                                      "resource"
                                                    ],
                                                    "properties": {
                                                      "containerName": {
                                                        "type": "string"
                                                      },
                                                      "divisor": {
                                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                        "x-kubernetes-int-or-string": true
                                                      },
                                                      "resource": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "emptyDir": {
                                          "type": "object",
                                          "properties": {
                                            "medium": {
                                              "type": "string"
                                            },
                                            "sizeLimit": {
                                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                              "x-kubernetes-int-or-string": true
                                            }
                                          }
                                        },
                                        "ephemeral": {
                                          "type": "object",
                                          "properties": {
                                            "volumeClaimTemplate": {
                                              "type": "object",
                                              "required": [
                                                "spec"
                                              ],
                                              "properties": {
                                                "metadata": {
                                                  "type": "object"
                                                },
                                                "spec": {
                                                  "type": "object",
                                                  "properties": {
                                                    "accessModes": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "dataSource": {
                                                      "type": "object",
                                                      "required": [
                                                        "kind",
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "apiGroup": {
                                                          "type": "string"
                                                        },
                                                        "kind": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "dataSourceRef": {
                                                      "type": "object",
                                                      "required": [
                                                        "kind",
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "apiGroup": {
                                                          "type": "string"
                                                        },
                                                        "kind": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "namespace": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "resources": {
                                                      "type": "object",
                                                      "properties": {
                                                        "limits": {
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        },
                                                        "requests": {
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "selector": {
                                                      "type": "object",
                                                      "properties": {
                                                        "matchExpressions": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "required": [
                                                              "key",
                                                              "operator"
                                                            ],
                                                            "properties": {
                                                              "key": {
                                                                "type": "string"
                                                              },
                                                              "operator": {
                                                                "type": "string"
                                                              },
                                                              "values": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "matchLabels": {
                                                          "type": "object",
                                                          "additionalProperties": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "x-kubernetes-map-type": "atomic"
                                                    },
                                                    "storageClassName": {
                                                      "type": "string"
                                                    },
                                                    "volumeAttributesClassName": {
                                                      "type": "string"
                                                    },
                                                    "volumeMode": {
                                                      "type": "string"
                                                    },
                                                    "volumeName": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "fc": {
                                          "type": "object",
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "lun": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "targetWWNs": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "wwids": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "flexVolume": {
                                          "type": "object",
                                          "required": [
                                            "driver"
                                          ],
                                          "properties": {
                                            "driver": {
                                              "type": "string"
                                            },
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "options": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "secretRef": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            }
                                          }
                                        },
                                        "flocker": {
                                          "type": "object",
                                          "properties": {
                                            "datasetName": {
                                              "type": "string"
                                            },
                                            "datasetUUID": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "gcePersistentDisk": {
                                          "type": "object",
                                          "required": [
                                            "pdName"
                                          ],
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "partition": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "pdName": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            }
                                          }
                                        },
                                        "gitRepo": {
                                          "type": "object",
                                          "required": [
                                            "repository"
                                          ],
                                          "properties": {
                                            "directory": {
                                              "type": "string"
                                            },
                                            "repository": {
                                              "type": "string"
                                            },
                                            "revision": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "glusterfs": {
                                          "type": "object",
                                          "required": [
                                            "endpoints",
                                            "path"
                                          ],
                                          "properties": {
                                            "endpoints": {
                                              "type": "string"
                                            },
                                            "path": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            }
                                          }
                                        },
                                        "hostPath": {
                                          "type": "object",
                                          "required": [
                                            "path"
                                          ],
                                          "properties": {
                                            "path": {
                                              "type": "string"
                                            },
                                            "type": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "iscsi": {
                                          "type": "object",
                                          "required": [
                                            "iqn",
                                            "lun",
                                            "targetPortal"
                                          ],
                                          "properties": {
                                            "chapAuthDiscovery": {
                                              "type": "boolean"
                                            },
                                            "chapAuthSession": {
                                              "type": "boolean"
                                            },
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "initiatorName": {
                                              "type": "string"
                                            },
                                            "iqn": {
                                              "type": "string"
                                            },
                                            "iscsiInterface": {
                                              "type": "string"
                                            },
                                            "lun": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "portals": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "secretRef": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            },
                                            "targetPortal": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "nfs": {
                                          "type": "object",
                                          "required": [
                                            "path",
                                            "server"
                                          ],
                                          "properties": {
                                            "path": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "server": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "persistentVolumeClaim": {
                                          "type": "object",
                                          "required": [
                                            "claimName"
                                          ],
                                          "properties": {
                                            "claimName": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            }
                                          }
                                        },
                                        "photonPersistentDisk": {
                                          "type": "object",
                                          "required": [
                                            "pdID"
                                          ],
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "pdID": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "portworxVolume": {
                                          "type": "object",
                                          "required": [
                                            "volumeID"
                                          ],
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "volumeID": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "projected": {
                                          "type": "object",
                                          "properties": {
                                            "defaultMode": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "sources": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "clusterTrustBundle": {
                                                    "type": "object",
                                                    "required": [
                                                      "path"
                                                    ],
                                                    "properties": {
                                                      "labelSelector": {
                                                        "type": "object",
                                                        "properties": {
                                                          "matchExpressions": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "key",
                                                                "operator"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "type": "string"
                                                                },
                                                                "operator": {
                                                                  "type": "string"
                                                                },
                                                                "values": {
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "string"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "matchLabels": {
                                                            "type": "object",
                                                            "additionalProperties": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      },
                                                      "path": {
                                                        "type": "string"
                                                      },
                                                      "signerName": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "configMap": {
                                                    "type": "object",
                                                    "properties": {
                                                      "items": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "path"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "type": "string"
                                                            },
                                                            "mode": {
                                                              "type": "integer",
                                                              "format": "int32"
                                                            },
                                                            "path": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "downwardAPI": {
                                                    "type": "object",
                                                    "properties": {
                                                      "items": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "path"
                                                          ],
                                                          "properties": {
                                                            "fieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "fieldPath"
                                                              ],
                                                              "properties": {
                                                                "apiVersion": {
                                                                  "type": "string"
                                                                },
                                                                "fieldPath": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "mode": {
                                                              "type": "integer",
                                                              "format": "int32"
                                                            },
                                                            "path": {
                                                              "type": "string"
                                                            },
                                                            "resourceFieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "resource"
                                                              ],
                                                              "properties": {
                                                                "containerName": {
                                                                  "type": "string"
                                                                },
                                                                "divisor": {
                                                                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                  "x-kubernetes-int-or-string": true
                                                                },
                                                                "resource": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "secret": {
                                                    "type": "object",
                                                    "properties": {
                                                      "items": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "path"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "type": "string"
                                                            },
                                                            "mode": {
                                                              "type": "integer",
                                                              "format": "int32"
                                                            },
                                                            "path": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "serviceAccountToken": {
                                                    "type": "object",
                                                    "required": [
                                                      "path"
                                                    ],
                                                    "properties": {
                                                      "audience": {
                                                        "type": "string"
                                                      },
                                                      "expirationSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "path": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "quobyte": {
                                          "type": "object",
                                          "required": [
                                            "registry",
                                            "volume"
                                          ],
                                          "properties": {
                                            "group": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "registry": {
                                              "type": "string"
                                            },
                                            "tenant": {
                                              "type": "string"
                                            },
                                            "user": {
                                              "type": "string"
                                            },
                                            "volume": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "rbd": {
                                          "type": "object",
                                          "required": [
                                            "image",
                                            "monitors"
                                          ],
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "image": {
                                              "type": "string"
                                            },
                                            "keyring": {
                                              "type": "string"
                                            },
                                            "monitors": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            "pool": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "secretRef": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            },
                                            "user": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "scaleIO": {
                                          "type": "object",
                                          "required": [
                                            "gateway",
                                            "secretRef",
                                            "system"
                                          ],
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "gateway": {
                                              "type": "string"
                                            },
                                            "protectionDomain": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "secretRef": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            },
                                            "sslEnabled": {
                                              "type": "boolean"
                                            },
                                            "storageMode": {
                                              "type": "string"
                                            },
                                            "storagePool": {
                                              "type": "string"
                                            },
                                            "system": {
                                              "type": "string"
                                            },
                                            "volumeName": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "secret": {
                                          "type": "object",
                                          "properties": {
                                            "defaultMode": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "key",
                                                  "path"
                                                ],
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  },
                                                  "mode": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "path": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "optional": {
                                              "type": "boolean"
                                            },
                                            "secretName": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "storageos": {
                                          "type": "object",
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "readOnly": {
                                              "type": "boolean"
                                            },
                                            "secretRef": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            },
                                            "volumeName": {
                                              "type": "string"
                                            },
                                            "volumeNamespace": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "vsphereVolume": {
                                          "type": "object",
                                          "required": [
                                            "volumePath"
                                          ],
                                          "properties": {
                                            "fsType": {
                                              "type": "string"
                                            },
                                            "storagePolicyID": {
                                              "type": "string"
                                            },
                                            "storagePolicyName": {
                                              "type": "string"
                                            },
                                            "volumePath": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "updateStrategy": {
                            "type": "object",
                            "properties": {
                              "rollingUpdate": {
                                "type": "object",
                                "properties": {
                                  "maxUnavailable": {
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "partition": {
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                }
                              },
                              "type": {
                                "type": "string"
                              }
                            }
                          },
                          "volumeClaimTemplates": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "apiVersion": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "type": "object",
                                  "properties": {
                                    "annotations": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "labels": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "spec": {
                                  "type": "object",
                                  "properties": {
                                    "accessModes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "dataSource": {
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "name"
                                      ],
                                      "properties": {
                                        "apiGroup": {
                                          "type": "string"
                                        },
                                        "kind": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "dataSourceRef": {
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "name"
                                      ],
                                      "properties": {
                                        "apiGroup": {
                                          "type": "string"
                                        },
                                        "kind": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "resources": {
                                      "type": "object",
                                      "properties": {
                                        "limits": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          }
                                        },
                                        "requests": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                            "x-kubernetes-int-or-string": true
                                          }
                                        }
                                      }
                                    },
                                    "selector": {
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "type": "string"
                                              },
                                              "operator": {
                                                "type": "string"
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "storageClassName": {
                                      "type": "string"
                                    },
                                    "volumeAttributesClassName": {
                                      "type": "string"
                                    },
                                    "volumeMode": {
                                      "type": "string"
                                    },
                                    "volumeName": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "persistence": {
                "description": "The desired persistent storage configuration for each Pod in the cluster.",
                "type": "object",
                "properties": {
                  "storage": {
                    "description": "The requested size of the persistent volume attached to each Pod in the RabbitmqCluster.\nThe format of this field matches that defined by kubernetes/apimachinery.\nSee https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info on the format of this field.",
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "storageClassName": {
                    "description": "The name of the StorageClass to claim a PersistentVolume from.",
                    "type": "string"
                  }
                }
              },
              "rabbitmq": {
                "description": "Configuration options for RabbitMQ Pods created in the cluster.",
                "type": "object",
                "properties": {
                  "additionalConfig": {
                    "description": "Modify to add to the rabbitmq.conf file in addition to default configurations set by the operator.\nModifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime.\nFor more information on this config, see https://www.rabbitmq.com/configure.html#config-file",
                    "type": "string",
                    "maxLength": 2000
                  },
                  "additionalPlugins": {
                    "description": "List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.",
                    "type": "array",
                    "maxItems": 100,
                    "items": {
                      "description": "A Plugin to enable on the RabbitmqCluster.",
                      "type": "string",
                      "maxLength": 100,
                      "pattern": "^\\w+$"
                    }
                  },
                  "advancedConfig": {
                    "description": "Specify any rabbitmq advanced.config configurations to apply to the cluster.\nFor more information on advanced config, see https://www.rabbitmq.com/configure.html#advanced-config-file",
                    "type": "string",
                    "maxLength": 100000
                  },
                  "envConfig": {
                    "description": "Modify to add to the rabbitmq-env.conf file. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime.\nFor more information on env config, see https://www.rabbitmq.com/man/rabbitmq-env.conf.5.html",
                    "type": "string",
                    "maxLength": 100000
                  },
                  "erlangInetConfig": {
                    "description": "Erlang Inet configuration to apply to the Erlang VM running rabbit.\nSee also: https://www.erlang.org/doc/apps/erts/inet_cfg.html",
                    "type": "string",
                    "maxLength": 2000
                  }
                }
              },
              "replicas": {
                "description": "Replicas is the number of nodes in the RabbitMQ cluster. Each node is deployed as a Replica in a StatefulSet. Only 1, 3, 5 replicas clusters are tested.\nThis value should be an odd number to ensure the resultant cluster can establish exactly one quorum of nodes\nin the event of a fragmenting network partition.",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "resources": {
                "description": "The desired compute resource requirements of Pods in the cluster.",
                "type": "object",
                "properties": {
                  "claims": {
                    "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                    "type": "array",
                    "items": {
                      "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-map-keys": [
                      "name"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object",
                    "additionalProperties": {
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object",
                    "additionalProperties": {
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "x-kubernetes-int-or-string": true
                    }
                  }
                }
              },
              "secretBackend": {
                "description": "Secret backend configuration for the RabbitmqCluster.\nEnables to fetch default user credentials and certificates from K8s external secret stores.",
                "type": "object",
                "properties": {
                  "externalSecret": {
                    "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "vault": {
                    "description": "VaultSpec will add Vault annotations (see https://www.vaultproject.io/docs/platform/k8s/injector/annotations)\nto RabbitMQ Pods. It requires a Vault Agent Sidecar Injector (https://www.vaultproject.io/docs/platform/k8s/injector)\nto be installed in the K8s cluster. The injector is a K8s Mutation Webhook Controller that alters RabbitMQ Pod specifications\n(based on the added Vault annotations) to include Vault Agent containers that render Vault secrets to the volume.",
                    "type": "object",
                    "properties": {
                      "annotations": {
                        "description": "Vault annotations that override the Vault annotations set by the cluster-operator.\nFor a list of valid Vault annotations, see https://www.vaultproject.io/docs/platform/k8s/injector/annotations",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "defaultUserPath": {
                        "description": "Path in Vault to access a KV (Key-Value) secret with the fields username and password for the default user.\nFor example \"secret/data/rabbitmq/config\".",
                        "type": "string"
                      },
                      "defaultUserUpdaterImage": {
                        "description": "Sidecar container that updates the default user's password in RabbitMQ when it changes in Vault.\nAdditionally, it updates /var/lib/rabbitmq/.rabbitmqadmin.conf (used by rabbitmqadmin CLI).\nSet to empty string to disable the sidecar container.",
                        "type": "string"
                      },
                      "role": {
                        "description": "Role in Vault.\nIf vault.defaultUserPath is set, this role must have capability to read the pre-created default user credential in Vault.\nIf vault.tls is set, this role must have capability to create and update certificates in the Vault PKI engine for the domains\n\"<namespace>\" and \"<namespace>.svc\".",
                        "type": "string"
                      },
                      "tls": {
                        "type": "object",
                        "properties": {
                          "altNames": {
                            "description": "Specifies the requested Subject Alternative Names (SANs), in a comma-delimited list.\nThese will be appended to the SANs added by the cluster-operator.\nThe cluster-operator will add SANs:\n\"<RabbitmqCluster name>-server-<index>.<RabbitmqCluster name>-nodes.<namespace>\" for each pod,\ne.g. \"myrabbit-server-0.myrabbit-nodes.default\".",
                            "type": "string"
                          },
                          "commonName": {
                            "description": "Specifies the requested certificate Common Name (CN).\nDefaults to <serviceName>.<namespace>.svc if not provided.",
                            "type": "string"
                          },
                          "ipSans": {
                            "description": "Specifies the requested IP Subject Alternative Names, in a comma-delimited list.",
                            "type": "string"
                          },
                          "pkiIssuerPath": {
                            "description": "Path in Vault PKI engine.\nFor example \"pki/issue/hashicorp-com\".\nrequired",
                            "type": "string"
                          },
                          "pkiRootPath": {
                            "description": "Specifies an optional path to retrieve the root CA from vault.  Useful if certificates are issued by an intermediate CA",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "service": {
                "description": "The desired state of the Kubernetes Service to create for the cluster.",
                "type": "object",
                "properties": {
                  "annotations": {
                    "description": "Annotations to add to the Service.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "ipFamilyPolicy": {
                    "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by a Service\nSee also: https://pkg.go.dev/k8s.io/api/core/v1#IPFamilyPolicy",
                    "type": "string",
                    "enum": [
                      "SingleStack",
                      "PreferDualStack",
                      "RequireDualStack"
                    ]
                  },
                  "type": {
                    "description": "Type of Service to create for the cluster. Must be one of: ClusterIP, LoadBalancer, NodePort.\nFor more info see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType",
                    "type": "string",
                    "enum": [
                      "ClusterIP",
                      "LoadBalancer",
                      "NodePort"
                    ]
                  }
                }
              },
              "skipPostDeploySteps": {
                "description": "If unset, or set to false, the cluster will run `rabbitmq-queues rebalance all` whenever the cluster is updated.\nSet to true to prevent the operator rebalancing queue leaders after a cluster update.\nHas no effect if the cluster only consists of one node.\nFor more information, see https://www.rabbitmq.com/rabbitmq-queues.8.html#rebalance",
                "type": "boolean"
              },
              "terminationGracePeriodSeconds": {
                "description": "TerminationGracePeriodSeconds is the timeout that each rabbitmqcluster pod will have to terminate gracefully.\nIt defaults to 604800 seconds ( a week long) to ensure that the container preStop lifecycle hook can finish running.\nFor more information, see: https://github.com/rabbitmq/cluster-operator/blob/main/docs/design/20200520-graceful-pod-termination.md",
                "type": "integer",
                "format": "int64",
                "minimum": 0
              },
              "tls": {
                "description": "TLS-related configuration for the RabbitMQ cluster.",
                "type": "object",
                "properties": {
                  "caSecretName": {
                    "description": "Name of a Secret in the same Namespace as the RabbitmqCluster, containing the Certificate Authority's public certificate for TLS.\nThe Secret must store this as ca.crt.\nThis Secret can be created by running `kubectl create secret generic ca-secret --from-file=ca.crt=path/to/ca.cert`\nUsed for mTLS, and TLS for rabbitmq_web_stomp and rabbitmq_web_mqtt.",
                    "type": "string"
                  },
                  "disableNonTLSListeners": {
                    "description": "When set to true, the RabbitmqCluster disables non-TLS listeners for RabbitMQ, management plugin and for any enabled plugins in the following list: stomp, mqtt, web_stomp, web_mqtt.\nOnly TLS-enabled clients will be able to connect.",
                    "type": "boolean"
                  },
                  "secretName": {
                    "description": "Name of a Secret in the same Namespace as the RabbitmqCluster, containing the server's private key & public certificate for TLS.\nThe Secret must store these as tls.key and tls.crt, respectively.\nThis Secret can be created by running `kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key`",
                    "type": "string"
                  }
                }
              },
              "tolerations": {
                "description": "Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.",
                "type": "array",
                "items": {
                  "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.",
                  "type": "object",
                  "properties": {
                    "effect": {
                      "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                      "type": "string"
                    },
                    "key": {
                      "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                      "type": "string"
                    },
                    "tolerationSeconds": {
                      "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "value": {
                      "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "status": {
            "description": "Status presents the observed state of RabbitmqCluster",
            "type": "object",
            "required": [
              "conditions"
            ],
            "properties": {
              "binding": {
                "description": "Binding exposes a secret containing the binding information for this\nRabbitmqCluster. It implements the service binding Provisioned Service\nduck type. See: https://github.com/servicebinding/spec#provisioned-service",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "conditions": {
                "description": "Set of Conditions describing the current state of the RabbitmqCluster",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition type changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of RabbitmqCluster status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "defaultUser": {
                "description": "Identifying information on internal resources",
                "type": "object",
                "properties": {
                  "secretReference": {
                    "description": "Reference to the Kubernetes Secret containing the credentials of the default\nuser.",
                    "type": "object",
                    "required": [
                      "keys",
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "keys": {
                        "description": "Key-value pairs in the Secret corresponding to `username`, `password`, `host`, and `port`",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "description": "Name of the Secret containing the default user credentials",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the Secret containing the default user credentials",
                        "type": "string"
                      }
                    }
                  },
                  "serviceReference": {
                    "description": "Reference to the Kubernetes Service serving the cluster.",
                    "type": "object",
                    "required": [
                      "name",
                      "namespace"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the Service serving the cluster",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace of the Service serving the cluster",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this RabbitmqCluster. It corresponds to the\nRabbitmqCluster's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object\ncorresponds to a single RabbitMQ cluster.",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "RabbitmqCluster",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "rabbitmqclusters.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "rabbitmqclusters",
            "singular": "rabbitmqcluster",
            "shortNames": [
              "rmq"
            ],
            "kind": "RabbitmqCluster",
            "listKind": "RabbitmqClusterList",
            "categories": [
              "all",
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object\ncorresponds to a single RabbitMQ cluster.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "Spec is the desired state of the RabbitmqCluster Custom Resource.",
                      "type": "object",
                      "properties": {
                        "affinity": {
                          "description": "Affinity scheduling rules to be applied on created Pods.",
                          "type": "object",
                          "properties": {
                            "nodeAffinity": {
                              "description": "Describes node affinity scheduling rules for the pod.",
                              "type": "object",
                              "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.",
                                  "type": "array",
                                  "items": {
                                    "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                    "type": "object",
                                    "required": [
                                      "preference",
                                      "weight"
                                    ],
                                    "properties": {
                                      "preference": {
                                        "description": "A node selector term, associated with the corresponding weight.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "A list of node selector requirements by node's labels.",
                                            "type": "array",
                                            "items": {
                                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "The label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "matchFields": {
                                            "description": "A list of node selector requirements by node's fields.",
                                            "type": "array",
                                            "items": {
                                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "The label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "weight": {
                                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    }
                                  }
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.",
                                  "type": "object",
                                  "required": [
                                    "nodeSelectorTerms"
                                  ],
                                  "properties": {
                                    "nodeSelectorTerms": {
                                      "description": "Required. A list of node selector terms. The terms are ORed.",
                                      "type": "array",
                                      "items": {
                                        "description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "A list of node selector requirements by node's labels.",
                                            "type": "array",
                                            "items": {
                                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "The label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "matchFields": {
                                            "description": "A list of node selector requirements by node's fields.",
                                            "type": "array",
                                            "items": {
                                              "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "The label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic"
                                }
                              }
                            },
                            "podAffinity": {
                              "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                              "type": "object",
                              "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                                  "type": "array",
                                  "items": {
                                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                    "type": "object",
                                    "required": [
                                      "podAffinityTerm",
                                      "weight"
                                    ],
                                    "properties": {
                                      "podAffinityTerm": {
                                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                        "type": "object",
                                        "required": [
                                          "topologyKey"
                                        ],
                                        "properties": {
                                          "labelSelector": {
                                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "matchLabelKeys": {
                                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "mismatchLabelKeys": {
                                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "namespaceSelector": {
                                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "namespaces": {
                                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "topologyKey": {
                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "weight": {
                                        "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    }
                                  }
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                  "type": "array",
                                  "items": {
                                    "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running",
                                    "type": "object",
                                    "required": [
                                      "topologyKey"
                                    ],
                                    "properties": {
                                      "labelSelector": {
                                        "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "matchLabelKeys": {
                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "mismatchLabelKeys": {
                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "namespaceSelector": {
                                        "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "namespaces": {
                                        "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "topologyKey": {
                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "podAntiAffinity": {
                              "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                              "type": "object",
                              "properties": {
                                "preferredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.",
                                  "type": "array",
                                  "items": {
                                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                    "type": "object",
                                    "required": [
                                      "podAffinityTerm",
                                      "weight"
                                    ],
                                    "properties": {
                                      "podAffinityTerm": {
                                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                        "type": "object",
                                        "required": [
                                          "topologyKey"
                                        ],
                                        "properties": {
                                          "labelSelector": {
                                            "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "matchLabelKeys": {
                                            "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "mismatchLabelKeys": {
                                            "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          },
                                          "namespaceSelector": {
                                            "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                            "type": "object",
                                            "properties": {
                                              "matchExpressions": {
                                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                                "type": "array",
                                                "items": {
                                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                                  "type": "object",
                                                  "required": [
                                                    "key",
                                                    "operator"
                                                  ],
                                                  "properties": {
                                                    "key": {
                                                      "description": "key is the label key that the selector applies to.",
                                                      "type": "string"
                                                    },
                                                    "operator": {
                                                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                      "type": "string"
                                                    },
                                                    "values": {
                                                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "matchLabels": {
                                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "x-kubernetes-map-type": "atomic"
                                          },
                                          "namespaces": {
                                            "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "topologyKey": {
                                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "weight": {
                                        "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    }
                                  }
                                },
                                "requiredDuringSchedulingIgnoredDuringExecution": {
                                  "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.",
                                  "type": "array",
                                  "items": {
                                    "description": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running",
                                    "type": "object",
                                    "required": [
                                      "topologyKey"
                                    ],
                                    "properties": {
                                      "labelSelector": {
                                        "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "matchLabelKeys": {
                                        "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nAlso, MatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "mismatchLabelKeys": {
                                        "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both MismatchLabelKeys and LabelSelector.\nAlso, MismatchLabelKeys cannot be set when LabelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "x-kubernetes-list-type": "atomic"
                                      },
                                      "namespaceSelector": {
                                        "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "x-kubernetes-map-type": "atomic"
                                      },
                                      "namespaces": {
                                        "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "topologyKey": {
                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "delayStartSeconds": {
                          "description": "DelayStartSeconds is the time the init container (`setup-container`) will sleep before terminating.\nThis effectively delays the time between starting the Pod and starting the `rabbitmq` container.\nRabbitMQ relies on up-to-date DNS entries early during peer discovery.\nThe purpose of this artificial delay is to ensure that DNS entries are up-to-date when booting RabbitMQ.\nFor more information, see https://github.com/kubernetes/kubernetes/issues/92559\nIf your Kubernetes DNS backend is configured with a low DNS cache value or publishes not ready addresses\npromptly, you can decrase this value or set it to 0.",
                          "type": "integer",
                          "format": "int32",
                          "default": 30,
                          "minimum": 0
                        },
                        "image": {
                          "description": "Image is the name of the RabbitMQ docker image to use for RabbitMQ nodes in the RabbitmqCluster.\nMust be provided together with ImagePullSecrets in order to use an image in a private registry.",
                          "type": "string"
                        },
                        "imagePullSecrets": {
                          "description": "List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.",
                          "type": "array",
                          "items": {
                            "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        },
                        "override": {
                          "type": "object",
                          "properties": {
                            "service": {
                              "type": "object",
                              "properties": {
                                "metadata": {
                                  "type": "object",
                                  "properties": {
                                    "annotations": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "labels": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "spec": {
                                  "type": "object",
                                  "properties": {
                                    "allocateLoadBalancerNodePorts": {
                                      "type": "boolean"
                                    },
                                    "clusterIP": {
                                      "type": "string"
                                    },
                                    "clusterIPs": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "externalIPs": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "externalName": {
                                      "type": "string"
                                    },
                                    "externalTrafficPolicy": {
                                      "type": "string"
                                    },
                                    "healthCheckNodePort": {
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "internalTrafficPolicy": {
                                      "type": "string"
                                    },
                                    "ipFamilies": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "ipFamilyPolicy": {
                                      "type": "string"
                                    },
                                    "loadBalancerClass": {
                                      "type": "string"
                                    },
                                    "loadBalancerIP": {
                                      "type": "string"
                                    },
                                    "loadBalancerSourceRanges": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "ports": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "port"
                                        ],
                                        "properties": {
                                          "appProtocol": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "nodePort": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "port": {
                                            "type": "integer",
                                            "format": "int32"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "default": "TCP"
                                          },
                                          "targetPort": {
                                            "anyOf": [
                                              {
                                                "type": "integer"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ],
                                            "x-kubernetes-int-or-string": true
                                          }
                                        }
                                      },
                                      "x-kubernetes-list-map-keys": [
                                        "port",
                                        "protocol"
                                      ],
                                      "x-kubernetes-list-type": "map"
                                    },
                                    "publishNotReadyAddresses": {
                                      "type": "boolean"
                                    },
                                    "selector": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "sessionAffinity": {
                                      "type": "string"
                                    },
                                    "sessionAffinityConfig": {
                                      "type": "object",
                                      "properties": {
                                        "clientIP": {
                                          "type": "object",
                                          "properties": {
                                            "timeoutSeconds": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "statefulSet": {
                              "type": "object",
                              "properties": {
                                "metadata": {
                                  "type": "object",
                                  "properties": {
                                    "annotations": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "labels": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "spec": {
                                  "type": "object",
                                  "properties": {
                                    "minReadySeconds": {
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "persistentVolumeClaimRetentionPolicy": {
                                      "type": "object",
                                      "properties": {
                                        "whenDeleted": {
                                          "type": "string"
                                        },
                                        "whenScaled": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "podManagementPolicy": {
                                      "type": "string"
                                    },
                                    "replicas": {
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "selector": {
                                      "type": "object",
                                      "properties": {
                                        "matchExpressions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "required": [
                                              "key",
                                              "operator"
                                            ],
                                            "properties": {
                                              "key": {
                                                "type": "string"
                                              },
                                              "operator": {
                                                "type": "string"
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "matchLabels": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "x-kubernetes-map-type": "atomic"
                                    },
                                    "serviceName": {
                                      "type": "string"
                                    },
                                    "template": {
                                      "type": "object",
                                      "properties": {
                                        "metadata": {
                                          "type": "object",
                                          "properties": {
                                            "annotations": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            },
                                            "labels": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "namespace": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "spec": {
                                          "type": "object",
                                          "required": [
                                            "containers"
                                          ],
                                          "properties": {
                                            "activeDeadlineSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "affinity": {
                                              "type": "object",
                                              "properties": {
                                                "nodeAffinity": {
                                                  "type": "object",
                                                  "properties": {
                                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "preference",
                                                          "weight"
                                                        ],
                                                        "properties": {
                                                          "preference": {
                                                            "type": "object",
                                                            "properties": {
                                                              "matchExpressions": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "key",
                                                                    "operator"
                                                                  ],
                                                                  "properties": {
                                                                    "key": {
                                                                      "type": "string"
                                                                    },
                                                                    "operator": {
                                                                      "type": "string"
                                                                    },
                                                                    "values": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "matchFields": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "key",
                                                                    "operator"
                                                                  ],
                                                                  "properties": {
                                                                    "key": {
                                                                      "type": "string"
                                                                    },
                                                                    "operator": {
                                                                      "type": "string"
                                                                    },
                                                                    "values": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "x-kubernetes-map-type": "atomic"
                                                          },
                                                          "weight": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                                      "type": "object",
                                                      "required": [
                                                        "nodeSelectorTerms"
                                                      ],
                                                      "properties": {
                                                        "nodeSelectorTerms": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "properties": {
                                                              "matchExpressions": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "key",
                                                                    "operator"
                                                                  ],
                                                                  "properties": {
                                                                    "key": {
                                                                      "type": "string"
                                                                    },
                                                                    "operator": {
                                                                      "type": "string"
                                                                    },
                                                                    "values": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "matchFields": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "key",
                                                                    "operator"
                                                                  ],
                                                                  "properties": {
                                                                    "key": {
                                                                      "type": "string"
                                                                    },
                                                                    "operator": {
                                                                      "type": "string"
                                                                    },
                                                                    "values": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "x-kubernetes-map-type": "atomic"
                                                          }
                                                        }
                                                      },
                                                      "x-kubernetes-map-type": "atomic"
                                                    }
                                                  }
                                                },
                                                "podAffinity": {
                                                  "type": "object",
                                                  "properties": {
                                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "podAffinityTerm",
                                                          "weight"
                                                        ],
                                                        "properties": {
                                                          "podAffinityTerm": {
                                                            "type": "object",
                                                            "required": [
                                                              "topologyKey"
                                                            ],
                                                            "properties": {
                                                              "labelSelector": {
                                                                "type": "object",
                                                                "properties": {
                                                                  "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                      "type": "object",
                                                                      "required": [
                                                                        "key",
                                                                        "operator"
                                                                      ],
                                                                      "properties": {
                                                                        "key": {
                                                                          "type": "string"
                                                                        },
                                                                        "operator": {
                                                                          "type": "string"
                                                                        },
                                                                        "values": {
                                                                          "type": "array",
                                                                          "items": {
                                                                            "type": "string"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  "matchLabels": {
                                                                    "type": "object",
                                                                    "additionalProperties": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                },
                                                                "x-kubernetes-map-type": "atomic"
                                                              },
                                                              "matchLabelKeys": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                },
                                                                "x-kubernetes-list-type": "atomic"
                                                              },
                                                              "mismatchLabelKeys": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                },
                                                                "x-kubernetes-list-type": "atomic"
                                                              },
                                                              "namespaceSelector": {
                                                                "type": "object",
                                                                "properties": {
                                                                  "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                      "type": "object",
                                                                      "required": [
                                                                        "key",
                                                                        "operator"
                                                                      ],
                                                                      "properties": {
                                                                        "key": {
                                                                          "type": "string"
                                                                        },
                                                                        "operator": {
                                                                          "type": "string"
                                                                        },
                                                                        "values": {
                                                                          "type": "array",
                                                                          "items": {
                                                                            "type": "string"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  "matchLabels": {
                                                                    "type": "object",
                                                                    "additionalProperties": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                },
                                                                "x-kubernetes-map-type": "atomic"
                                                              },
                                                              "namespaces": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "topologyKey": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "weight": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "topologyKey"
                                                        ],
                                                        "properties": {
                                                          "labelSelector": {
                                                            "type": "object",
                                                            "properties": {
                                                              "matchExpressions": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "key",
                                                                    "operator"
                                                                  ],
                                                                  "properties": {
                                                                    "key": {
                                                                      "type": "string"
                                                                    },
                                                                    "operator": {
                                                                      "type": "string"
                                                                    },
                                                                    "values": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "matchLabels": {
                                                                "type": "object",
                                                                "additionalProperties": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            "x-kubernetes-map-type": "atomic"
                                                          },
                                                          "matchLabelKeys": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "x-kubernetes-list-type": "atomic"
                                                          },
                                                          "mismatchLabelKeys": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "x-kubernetes-list-type": "atomic"
                                                          },
                                                          "namespaceSelector": {
                                                            "type": "object",
                                                            "properties": {
                                                              "matchExpressions": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "key",
                                                                    "operator"
                                                                  ],
                                                                  "properties": {
                                                                    "key": {
                                                                      "type": "string"
                                                                    },
                                                                    "operator": {
                                                                      "type": "string"
                                                                    },
                                                                    "values": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "matchLabels": {
                                                                "type": "object",
                                                                "additionalProperties": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            "x-kubernetes-map-type": "atomic"
                                                          },
                                                          "namespaces": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "topologyKey": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "podAntiAffinity": {
                                                  "type": "object",
                                                  "properties": {
                                                    "preferredDuringSchedulingIgnoredDuringExecution": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "podAffinityTerm",
                                                          "weight"
                                                        ],
                                                        "properties": {
                                                          "podAffinityTerm": {
                                                            "type": "object",
                                                            "required": [
                                                              "topologyKey"
                                                            ],
                                                            "properties": {
                                                              "labelSelector": {
                                                                "type": "object",
                                                                "properties": {
                                                                  "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                      "type": "object",
                                                                      "required": [
                                                                        "key",
                                                                        "operator"
                                                                      ],
                                                                      "properties": {
                                                                        "key": {
                                                                          "type": "string"
                                                                        },
                                                                        "operator": {
                                                                          "type": "string"
                                                                        },
                                                                        "values": {
                                                                          "type": "array",
                                                                          "items": {
                                                                            "type": "string"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  "matchLabels": {
                                                                    "type": "object",
                                                                    "additionalProperties": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                },
                                                                "x-kubernetes-map-type": "atomic"
                                                              },
                                                              "matchLabelKeys": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                },
                                                                "x-kubernetes-list-type": "atomic"
                                                              },
                                                              "mismatchLabelKeys": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                },
                                                                "x-kubernetes-list-type": "atomic"
                                                              },
                                                              "namespaceSelector": {
                                                                "type": "object",
                                                                "properties": {
                                                                  "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                      "type": "object",
                                                                      "required": [
                                                                        "key",
                                                                        "operator"
                                                                      ],
                                                                      "properties": {
                                                                        "key": {
                                                                          "type": "string"
                                                                        },
                                                                        "operator": {
                                                                          "type": "string"
                                                                        },
                                                                        "values": {
                                                                          "type": "array",
                                                                          "items": {
                                                                            "type": "string"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  "matchLabels": {
                                                                    "type": "object",
                                                                    "additionalProperties": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                },
                                                                "x-kubernetes-map-type": "atomic"
                                                              },
                                                              "namespaces": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "topologyKey": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "weight": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "topologyKey"
                                                        ],
                                                        "properties": {
                                                          "labelSelector": {
                                                            "type": "object",
                                                            "properties": {
                                                              "matchExpressions": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "key",
                                                                    "operator"
                                                                  ],
                                                                  "properties": {
                                                                    "key": {
                                                                      "type": "string"
                                                                    },
                                                                    "operator": {
                                                                      "type": "string"
                                                                    },
                                                                    "values": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "matchLabels": {
                                                                "type": "object",
                                                                "additionalProperties": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            "x-kubernetes-map-type": "atomic"
                                                          },
                                                          "matchLabelKeys": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "x-kubernetes-list-type": "atomic"
                                                          },
                                                          "mismatchLabelKeys": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            },
                                                            "x-kubernetes-list-type": "atomic"
                                                          },
                                                          "namespaceSelector": {
                                                            "type": "object",
                                                            "properties": {
                                                              "matchExpressions": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "key",
                                                                    "operator"
                                                                  ],
                                                                  "properties": {
                                                                    "key": {
                                                                      "type": "string"
                                                                    },
                                                                    "operator": {
                                                                      "type": "string"
                                                                    },
                                                                    "values": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "matchLabels": {
                                                                "type": "object",
                                                                "additionalProperties": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            "x-kubernetes-map-type": "atomic"
                                                          },
                                                          "namespaces": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "topologyKey": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "automountServiceAccountToken": {
                                              "type": "boolean"
                                            },
                                            "containers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "args": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "command": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "env": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "type": "string"
                                                        },
                                                        "valueFrom": {
                                                          "type": "object",
                                                          "properties": {
                                                            "configMapKeyRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "key"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "fieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "fieldPath"
                                                              ],
                                                              "properties": {
                                                                "apiVersion": {
                                                                  "type": "string"
                                                                },
                                                                "fieldPath": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "resourceFieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "resource"
                                                              ],
                                                              "properties": {
                                                                "containerName": {
                                                                  "type": "string"
                                                                },
                                                                "divisor": {
                                                                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "integer"
                                                                    },
                                                                    {
                                                                      "type": "string"
                                                                    }
                                                                  ],
                                                                  "x-kubernetes-int-or-string": true
                                                                },
                                                                "resource": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "secretKeyRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "key"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "envFrom": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "configMapRef": {
                                                          "type": "object",
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "optional": {
                                                              "type": "boolean"
                                                            }
                                                          },
                                                          "x-kubernetes-map-type": "atomic"
                                                        },
                                                        "prefix": {
                                                          "type": "string"
                                                        },
                                                        "secretRef": {
                                                          "type": "object",
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "optional": {
                                                              "type": "boolean"
                                                            }
                                                          },
                                                          "x-kubernetes-map-type": "atomic"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "image": {
                                                    "type": "string"
                                                  },
                                                  "imagePullPolicy": {
                                                    "type": "string"
                                                  },
                                                  "lifecycle": {
                                                    "type": "object",
                                                    "properties": {
                                                      "postStart": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exec": {
                                                            "type": "object",
                                                            "properties": {
                                                              "command": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "httpGet": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "httpHeaders": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "name",
                                                                    "value"
                                                                  ],
                                                                  "properties": {
                                                                    "name": {
                                                                      "type": "string"
                                                                    },
                                                                    "value": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "path": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              },
                                                              "scheme": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "sleep": {
                                                            "type": "object",
                                                            "required": [
                                                              "seconds"
                                                            ],
                                                            "properties": {
                                                              "seconds": {
                                                                "type": "integer",
                                                                "format": "int64"
                                                              }
                                                            }
                                                          },
                                                          "tcpSocket": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "preStop": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exec": {
                                                            "type": "object",
                                                            "properties": {
                                                              "command": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "httpGet": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "httpHeaders": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "name",
                                                                    "value"
                                                                  ],
                                                                  "properties": {
                                                                    "name": {
                                                                      "type": "string"
                                                                    },
                                                                    "value": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "path": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              },
                                                              "scheme": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "sleep": {
                                                            "type": "object",
                                                            "required": [
                                                              "seconds"
                                                            ],
                                                            "properties": {
                                                              "seconds": {
                                                                "type": "integer",
                                                                "format": "int64"
                                                              }
                                                            }
                                                          },
                                                          "tcpSocket": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "livenessProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "ports": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "containerPort"
                                                      ],
                                                      "properties": {
                                                        "containerPort": {
                                                          "type": "integer",
                                                          "format": "int32"
                                                        },
                                                        "hostIP": {
                                                          "type": "string"
                                                        },
                                                        "hostPort": {
                                                          "type": "integer",
                                                          "format": "int32"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "protocol": {
                                                          "type": "string",
                                                          "default": "TCP"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-list-map-keys": [
                                                      "containerPort",
                                                      "protocol"
                                                    ],
                                                    "x-kubernetes-list-type": "map"
                                                  },
                                                  "readinessProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "resizePolicy": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "resourceName",
                                                        "restartPolicy"
                                                      ],
                                                      "properties": {
                                                        "resourceName": {
                                                          "type": "string"
                                                        },
                                                        "restartPolicy": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-list-type": "atomic"
                                                  },
                                                  "resources": {
                                                    "type": "object",
                                                    "properties": {
                                                      "claims": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "name"
                                                          ],
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "x-kubernetes-list-map-keys": [
                                                          "name"
                                                        ],
                                                        "x-kubernetes-list-type": "map"
                                                      },
                                                      "limits": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                          "anyOf": [
                                                            {
                                                              "type": "integer"
                                                            },
                                                            {
                                                              "type": "string"
                                                            }
                                                          ],
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      },
                                                      "requests": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                          "anyOf": [
                                                            {
                                                              "type": "integer"
                                                            },
                                                            {
                                                              "type": "string"
                                                            }
                                                          ],
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "restartPolicy": {
                                                    "type": "string"
                                                  },
                                                  "securityContext": {
                                                    "type": "object",
                                                    "properties": {
                                                      "allowPrivilegeEscalation": {
                                                        "type": "boolean"
                                                      },
                                                      "capabilities": {
                                                        "type": "object",
                                                        "properties": {
                                                          "add": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "drop": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "privileged": {
                                                        "type": "boolean"
                                                      },
                                                      "procMount": {
                                                        "type": "string"
                                                      },
                                                      "readOnlyRootFilesystem": {
                                                        "type": "boolean"
                                                      },
                                                      "runAsGroup": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "runAsNonRoot": {
                                                        "type": "boolean"
                                                      },
                                                      "runAsUser": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "seLinuxOptions": {
                                                        "type": "object",
                                                        "properties": {
                                                          "level": {
                                                            "type": "string"
                                                          },
                                                          "role": {
                                                            "type": "string"
                                                          },
                                                          "type": {
                                                            "type": "string"
                                                          },
                                                          "user": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "seccompProfile": {
                                                        "type": "object",
                                                        "required": [
                                                          "type"
                                                        ],
                                                        "properties": {
                                                          "localhostProfile": {
                                                            "type": "string"
                                                          },
                                                          "type": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "windowsOptions": {
                                                        "type": "object",
                                                        "properties": {
                                                          "gmsaCredentialSpec": {
                                                            "type": "string"
                                                          },
                                                          "gmsaCredentialSpecName": {
                                                            "type": "string"
                                                          },
                                                          "hostProcess": {
                                                            "type": "boolean"
                                                          },
                                                          "runAsUserName": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "startupProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "stdin": {
                                                    "type": "boolean"
                                                  },
                                                  "stdinOnce": {
                                                    "type": "boolean"
                                                  },
                                                  "terminationMessagePath": {
                                                    "type": "string"
                                                  },
                                                  "terminationMessagePolicy": {
                                                    "type": "string"
                                                  },
                                                  "tty": {
                                                    "type": "boolean"
                                                  },
                                                  "volumeDevices": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "devicePath",
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "devicePath": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "volumeMounts": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "mountPath",
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "mountPath": {
                                                          "type": "string"
                                                        },
                                                        "mountPropagation": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "readOnly": {
                                                          "type": "boolean"
                                                        },
                                                        "subPath": {
                                                          "type": "string"
                                                        },
                                                        "subPathExpr": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "workingDir": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "dnsConfig": {
                                              "type": "object",
                                              "properties": {
                                                "nameservers": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                "options": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "searches": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "dnsPolicy": {
                                              "type": "string"
                                            },
                                            "enableServiceLinks": {
                                              "type": "boolean"
                                            },
                                            "ephemeralContainers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "args": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "command": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "env": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "type": "string"
                                                        },
                                                        "valueFrom": {
                                                          "type": "object",
                                                          "properties": {
                                                            "configMapKeyRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "key"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "fieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "fieldPath"
                                                              ],
                                                              "properties": {
                                                                "apiVersion": {
                                                                  "type": "string"
                                                                },
                                                                "fieldPath": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "resourceFieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "resource"
                                                              ],
                                                              "properties": {
                                                                "containerName": {
                                                                  "type": "string"
                                                                },
                                                                "divisor": {
                                                                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "integer"
                                                                    },
                                                                    {
                                                                      "type": "string"
                                                                    }
                                                                  ],
                                                                  "x-kubernetes-int-or-string": true
                                                                },
                                                                "resource": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "secretKeyRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "key"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "envFrom": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "configMapRef": {
                                                          "type": "object",
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "optional": {
                                                              "type": "boolean"
                                                            }
                                                          },
                                                          "x-kubernetes-map-type": "atomic"
                                                        },
                                                        "prefix": {
                                                          "type": "string"
                                                        },
                                                        "secretRef": {
                                                          "type": "object",
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "optional": {
                                                              "type": "boolean"
                                                            }
                                                          },
                                                          "x-kubernetes-map-type": "atomic"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "image": {
                                                    "type": "string"
                                                  },
                                                  "imagePullPolicy": {
                                                    "type": "string"
                                                  },
                                                  "lifecycle": {
                                                    "type": "object",
                                                    "properties": {
                                                      "postStart": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exec": {
                                                            "type": "object",
                                                            "properties": {
                                                              "command": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "httpGet": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "httpHeaders": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "name",
                                                                    "value"
                                                                  ],
                                                                  "properties": {
                                                                    "name": {
                                                                      "type": "string"
                                                                    },
                                                                    "value": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "path": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              },
                                                              "scheme": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "sleep": {
                                                            "type": "object",
                                                            "required": [
                                                              "seconds"
                                                            ],
                                                            "properties": {
                                                              "seconds": {
                                                                "type": "integer",
                                                                "format": "int64"
                                                              }
                                                            }
                                                          },
                                                          "tcpSocket": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "preStop": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exec": {
                                                            "type": "object",
                                                            "properties": {
                                                              "command": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "httpGet": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "httpHeaders": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "name",
                                                                    "value"
                                                                  ],
                                                                  "properties": {
                                                                    "name": {
                                                                      "type": "string"
                                                                    },
                                                                    "value": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "path": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              },
                                                              "scheme": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "sleep": {
                                                            "type": "object",
                                                            "required": [
                                                              "seconds"
                                                            ],
                                                            "properties": {
                                                              "seconds": {
                                                                "type": "integer",
                                                                "format": "int64"
                                                              }
                                                            }
                                                          },
                                                          "tcpSocket": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "livenessProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "ports": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "containerPort"
                                                      ],
                                                      "properties": {
                                                        "containerPort": {
                                                          "type": "integer",
                                                          "format": "int32"
                                                        },
                                                        "hostIP": {
                                                          "type": "string"
                                                        },
                                                        "hostPort": {
                                                          "type": "integer",
                                                          "format": "int32"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "protocol": {
                                                          "type": "string",
                                                          "default": "TCP"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-list-map-keys": [
                                                      "containerPort",
                                                      "protocol"
                                                    ],
                                                    "x-kubernetes-list-type": "map"
                                                  },
                                                  "readinessProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "resizePolicy": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "resourceName",
                                                        "restartPolicy"
                                                      ],
                                                      "properties": {
                                                        "resourceName": {
                                                          "type": "string"
                                                        },
                                                        "restartPolicy": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-list-type": "atomic"
                                                  },
                                                  "resources": {
                                                    "type": "object",
                                                    "properties": {
                                                      "claims": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "name"
                                                          ],
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "x-kubernetes-list-map-keys": [
                                                          "name"
                                                        ],
                                                        "x-kubernetes-list-type": "map"
                                                      },
                                                      "limits": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                          "anyOf": [
                                                            {
                                                              "type": "integer"
                                                            },
                                                            {
                                                              "type": "string"
                                                            }
                                                          ],
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      },
                                                      "requests": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                          "anyOf": [
                                                            {
                                                              "type": "integer"
                                                            },
                                                            {
                                                              "type": "string"
                                                            }
                                                          ],
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "restartPolicy": {
                                                    "type": "string"
                                                  },
                                                  "securityContext": {
                                                    "type": "object",
                                                    "properties": {
                                                      "allowPrivilegeEscalation": {
                                                        "type": "boolean"
                                                      },
                                                      "capabilities": {
                                                        "type": "object",
                                                        "properties": {
                                                          "add": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "drop": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "privileged": {
                                                        "type": "boolean"
                                                      },
                                                      "procMount": {
                                                        "type": "string"
                                                      },
                                                      "readOnlyRootFilesystem": {
                                                        "type": "boolean"
                                                      },
                                                      "runAsGroup": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "runAsNonRoot": {
                                                        "type": "boolean"
                                                      },
                                                      "runAsUser": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "seLinuxOptions": {
                                                        "type": "object",
                                                        "properties": {
                                                          "level": {
                                                            "type": "string"
                                                          },
                                                          "role": {
                                                            "type": "string"
                                                          },
                                                          "type": {
                                                            "type": "string"
                                                          },
                                                          "user": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "seccompProfile": {
                                                        "type": "object",
                                                        "required": [
                                                          "type"
                                                        ],
                                                        "properties": {
                                                          "localhostProfile": {
                                                            "type": "string"
                                                          },
                                                          "type": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "windowsOptions": {
                                                        "type": "object",
                                                        "properties": {
                                                          "gmsaCredentialSpec": {
                                                            "type": "string"
                                                          },
                                                          "gmsaCredentialSpecName": {
                                                            "type": "string"
                                                          },
                                                          "hostProcess": {
                                                            "type": "boolean"
                                                          },
                                                          "runAsUserName": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "startupProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "stdin": {
                                                    "type": "boolean"
                                                  },
                                                  "stdinOnce": {
                                                    "type": "boolean"
                                                  },
                                                  "targetContainerName": {
                                                    "type": "string"
                                                  },
                                                  "terminationMessagePath": {
                                                    "type": "string"
                                                  },
                                                  "terminationMessagePolicy": {
                                                    "type": "string"
                                                  },
                                                  "tty": {
                                                    "type": "boolean"
                                                  },
                                                  "volumeDevices": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "devicePath",
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "devicePath": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "volumeMounts": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "mountPath",
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "mountPath": {
                                                          "type": "string"
                                                        },
                                                        "mountPropagation": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "readOnly": {
                                                          "type": "boolean"
                                                        },
                                                        "subPath": {
                                                          "type": "string"
                                                        },
                                                        "subPathExpr": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "workingDir": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "hostAliases": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "hostnames": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "ip": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "hostIPC": {
                                              "type": "boolean"
                                            },
                                            "hostNetwork": {
                                              "type": "boolean"
                                            },
                                            "hostPID": {
                                              "type": "boolean"
                                            },
                                            "hostUsers": {
                                              "type": "boolean"
                                            },
                                            "hostname": {
                                              "type": "string"
                                            },
                                            "imagePullSecrets": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              }
                                            },
                                            "initContainers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "args": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "command": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "env": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "type": "string"
                                                        },
                                                        "valueFrom": {
                                                          "type": "object",
                                                          "properties": {
                                                            "configMapKeyRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "key"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "fieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "fieldPath"
                                                              ],
                                                              "properties": {
                                                                "apiVersion": {
                                                                  "type": "string"
                                                                },
                                                                "fieldPath": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "resourceFieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "resource"
                                                              ],
                                                              "properties": {
                                                                "containerName": {
                                                                  "type": "string"
                                                                },
                                                                "divisor": {
                                                                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "integer"
                                                                    },
                                                                    {
                                                                      "type": "string"
                                                                    }
                                                                  ],
                                                                  "x-kubernetes-int-or-string": true
                                                                },
                                                                "resource": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "secretKeyRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "key"
                                                              ],
                                                              "properties": {
                                                                "key": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "envFrom": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "configMapRef": {
                                                          "type": "object",
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "optional": {
                                                              "type": "boolean"
                                                            }
                                                          },
                                                          "x-kubernetes-map-type": "atomic"
                                                        },
                                                        "prefix": {
                                                          "type": "string"
                                                        },
                                                        "secretRef": {
                                                          "type": "object",
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "optional": {
                                                              "type": "boolean"
                                                            }
                                                          },
                                                          "x-kubernetes-map-type": "atomic"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "image": {
                                                    "type": "string"
                                                  },
                                                  "imagePullPolicy": {
                                                    "type": "string"
                                                  },
                                                  "lifecycle": {
                                                    "type": "object",
                                                    "properties": {
                                                      "postStart": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exec": {
                                                            "type": "object",
                                                            "properties": {
                                                              "command": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "httpGet": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "httpHeaders": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "name",
                                                                    "value"
                                                                  ],
                                                                  "properties": {
                                                                    "name": {
                                                                      "type": "string"
                                                                    },
                                                                    "value": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "path": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              },
                                                              "scheme": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "sleep": {
                                                            "type": "object",
                                                            "required": [
                                                              "seconds"
                                                            ],
                                                            "properties": {
                                                              "seconds": {
                                                                "type": "integer",
                                                                "format": "int64"
                                                              }
                                                            }
                                                          },
                                                          "tcpSocket": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "preStop": {
                                                        "type": "object",
                                                        "properties": {
                                                          "exec": {
                                                            "type": "object",
                                                            "properties": {
                                                              "command": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "httpGet": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "httpHeaders": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "object",
                                                                  "required": [
                                                                    "name",
                                                                    "value"
                                                                  ],
                                                                  "properties": {
                                                                    "name": {
                                                                      "type": "string"
                                                                    },
                                                                    "value": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "path": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              },
                                                              "scheme": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "sleep": {
                                                            "type": "object",
                                                            "required": [
                                                              "seconds"
                                                            ],
                                                            "properties": {
                                                              "seconds": {
                                                                "type": "integer",
                                                                "format": "int64"
                                                              }
                                                            }
                                                          },
                                                          "tcpSocket": {
                                                            "type": "object",
                                                            "required": [
                                                              "port"
                                                            ],
                                                            "properties": {
                                                              "host": {
                                                                "type": "string"
                                                              },
                                                              "port": {
                                                                "anyOf": [
                                                                  {
                                                                    "type": "integer"
                                                                  },
                                                                  {
                                                                    "type": "string"
                                                                  }
                                                                ],
                                                                "x-kubernetes-int-or-string": true
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "livenessProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "ports": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "containerPort"
                                                      ],
                                                      "properties": {
                                                        "containerPort": {
                                                          "type": "integer",
                                                          "format": "int32"
                                                        },
                                                        "hostIP": {
                                                          "type": "string"
                                                        },
                                                        "hostPort": {
                                                          "type": "integer",
                                                          "format": "int32"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "protocol": {
                                                          "type": "string",
                                                          "default": "TCP"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-list-map-keys": [
                                                      "containerPort",
                                                      "protocol"
                                                    ],
                                                    "x-kubernetes-list-type": "map"
                                                  },
                                                  "readinessProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "resizePolicy": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "resourceName",
                                                        "restartPolicy"
                                                      ],
                                                      "properties": {
                                                        "resourceName": {
                                                          "type": "string"
                                                        },
                                                        "restartPolicy": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-list-type": "atomic"
                                                  },
                                                  "resources": {
                                                    "type": "object",
                                                    "properties": {
                                                      "claims": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "name"
                                                          ],
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "x-kubernetes-list-map-keys": [
                                                          "name"
                                                        ],
                                                        "x-kubernetes-list-type": "map"
                                                      },
                                                      "limits": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                          "anyOf": [
                                                            {
                                                              "type": "integer"
                                                            },
                                                            {
                                                              "type": "string"
                                                            }
                                                          ],
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      },
                                                      "requests": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                          "anyOf": [
                                                            {
                                                              "type": "integer"
                                                            },
                                                            {
                                                              "type": "string"
                                                            }
                                                          ],
                                                          "x-kubernetes-int-or-string": true
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "restartPolicy": {
                                                    "type": "string"
                                                  },
                                                  "securityContext": {
                                                    "type": "object",
                                                    "properties": {
                                                      "allowPrivilegeEscalation": {
                                                        "type": "boolean"
                                                      },
                                                      "capabilities": {
                                                        "type": "object",
                                                        "properties": {
                                                          "add": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "drop": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "privileged": {
                                                        "type": "boolean"
                                                      },
                                                      "procMount": {
                                                        "type": "string"
                                                      },
                                                      "readOnlyRootFilesystem": {
                                                        "type": "boolean"
                                                      },
                                                      "runAsGroup": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "runAsNonRoot": {
                                                        "type": "boolean"
                                                      },
                                                      "runAsUser": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "seLinuxOptions": {
                                                        "type": "object",
                                                        "properties": {
                                                          "level": {
                                                            "type": "string"
                                                          },
                                                          "role": {
                                                            "type": "string"
                                                          },
                                                          "type": {
                                                            "type": "string"
                                                          },
                                                          "user": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "seccompProfile": {
                                                        "type": "object",
                                                        "required": [
                                                          "type"
                                                        ],
                                                        "properties": {
                                                          "localhostProfile": {
                                                            "type": "string"
                                                          },
                                                          "type": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "windowsOptions": {
                                                        "type": "object",
                                                        "properties": {
                                                          "gmsaCredentialSpec": {
                                                            "type": "string"
                                                          },
                                                          "gmsaCredentialSpecName": {
                                                            "type": "string"
                                                          },
                                                          "hostProcess": {
                                                            "type": "boolean"
                                                          },
                                                          "runAsUserName": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "startupProbe": {
                                                    "type": "object",
                                                    "properties": {
                                                      "exec": {
                                                        "type": "object",
                                                        "properties": {
                                                          "command": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "failureThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "grpc": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "port": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                          },
                                                          "service": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "httpGet": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "httpHeaders": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "name",
                                                                "value"
                                                              ],
                                                              "properties": {
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "path": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          },
                                                          "scheme": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "initialDelaySeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "periodSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "successThreshold": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "tcpSocket": {
                                                        "type": "object",
                                                        "required": [
                                                          "port"
                                                        ],
                                                        "properties": {
                                                          "host": {
                                                            "type": "string"
                                                          },
                                                          "port": {
                                                            "anyOf": [
                                                              {
                                                                "type": "integer"
                                                              },
                                                              {
                                                                "type": "string"
                                                              }
                                                            ],
                                                            "x-kubernetes-int-or-string": true
                                                          }
                                                        }
                                                      },
                                                      "terminationGracePeriodSeconds": {
                                                        "type": "integer",
                                                        "format": "int64"
                                                      },
                                                      "timeoutSeconds": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      }
                                                    }
                                                  },
                                                  "stdin": {
                                                    "type": "boolean"
                                                  },
                                                  "stdinOnce": {
                                                    "type": "boolean"
                                                  },
                                                  "terminationMessagePath": {
                                                    "type": "string"
                                                  },
                                                  "terminationMessagePolicy": {
                                                    "type": "string"
                                                  },
                                                  "tty": {
                                                    "type": "boolean"
                                                  },
                                                  "volumeDevices": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "devicePath",
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "devicePath": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "volumeMounts": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "mountPath",
                                                        "name"
                                                      ],
                                                      "properties": {
                                                        "mountPath": {
                                                          "type": "string"
                                                        },
                                                        "mountPropagation": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "readOnly": {
                                                          "type": "boolean"
                                                        },
                                                        "subPath": {
                                                          "type": "string"
                                                        },
                                                        "subPathExpr": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "workingDir": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "nodeName": {
                                              "type": "string"
                                            },
                                            "nodeSelector": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "x-kubernetes-map-type": "atomic"
                                            },
                                            "os": {
                                              "type": "object",
                                              "required": [
                                                "name"
                                              ],
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "overhead": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                "anyOf": [
                                                  {
                                                    "type": "integer"
                                                  },
                                                  {
                                                    "type": "string"
                                                  }
                                                ],
                                                "x-kubernetes-int-or-string": true
                                              }
                                            },
                                            "preemptionPolicy": {
                                              "type": "string"
                                            },
                                            "priority": {
                                              "type": "integer",
                                              "format": "int32"
                                            },
                                            "priorityClassName": {
                                              "type": "string"
                                            },
                                            "readinessGates": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "conditionType"
                                                ],
                                                "properties": {
                                                  "conditionType": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "resourceClaims": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "source": {
                                                    "type": "object",
                                                    "properties": {
                                                      "resourceClaimName": {
                                                        "type": "string"
                                                      },
                                                      "resourceClaimTemplateName": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "x-kubernetes-list-map-keys": [
                                                "name"
                                              ],
                                              "x-kubernetes-list-type": "map"
                                            },
                                            "restartPolicy": {
                                              "type": "string"
                                            },
                                            "runtimeClassName": {
                                              "type": "string"
                                            },
                                            "schedulerName": {
                                              "type": "string"
                                            },
                                            "schedulingGates": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "x-kubernetes-list-map-keys": [
                                                "name"
                                              ],
                                              "x-kubernetes-list-type": "map"
                                            },
                                            "securityContext": {
                                              "type": "object",
                                              "properties": {
                                                "fsGroup": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "fsGroupChangePolicy": {
                                                  "type": "string"
                                                },
                                                "runAsGroup": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "runAsNonRoot": {
                                                  "type": "boolean"
                                                },
                                                "runAsUser": {
                                                  "type": "integer",
                                                  "format": "int64"
                                                },
                                                "seLinuxOptions": {
                                                  "type": "object",
                                                  "properties": {
                                                    "level": {
                                                      "type": "string"
                                                    },
                                                    "role": {
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "type": "string"
                                                    },
                                                    "user": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "seccompProfile": {
                                                  "type": "object",
                                                  "required": [
                                                    "type"
                                                  ],
                                                  "properties": {
                                                    "localhostProfile": {
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "supplementalGroups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  }
                                                },
                                                "sysctls": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "value"
                                                    ],
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "windowsOptions": {
                                                  "type": "object",
                                                  "properties": {
                                                    "gmsaCredentialSpec": {
                                                      "type": "string"
                                                    },
                                                    "gmsaCredentialSpecName": {
                                                      "type": "string"
                                                    },
                                                    "hostProcess": {
                                                      "type": "boolean"
                                                    },
                                                    "runAsUserName": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "serviceAccount": {
                                              "type": "string"
                                            },
                                            "serviceAccountName": {
                                              "type": "string"
                                            },
                                            "setHostnameAsFQDN": {
                                              "type": "boolean"
                                            },
                                            "shareProcessNamespace": {
                                              "type": "boolean"
                                            },
                                            "subdomain": {
                                              "type": "string"
                                            },
                                            "terminationGracePeriodSeconds": {
                                              "type": "integer",
                                              "format": "int64"
                                            },
                                            "tolerations": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "effect": {
                                                    "type": "string"
                                                  },
                                                  "key": {
                                                    "type": "string"
                                                  },
                                                  "operator": {
                                                    "type": "string"
                                                  },
                                                  "tolerationSeconds": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                  },
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "topologySpreadConstraints": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "maxSkew",
                                                  "topologyKey",
                                                  "whenUnsatisfiable"
                                                ],
                                                "properties": {
                                                  "labelSelector": {
                                                    "type": "object",
                                                    "properties": {
                                                      "matchExpressions": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "operator"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "type": "string"
                                                            },
                                                            "operator": {
                                                              "type": "string"
                                                            },
                                                            "values": {
                                                              "type": "array",
                                                              "items": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "matchLabels": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "matchLabelKeys": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "x-kubernetes-list-type": "atomic"
                                                  },
                                                  "maxSkew": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "minDomains": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                  },
                                                  "nodeAffinityPolicy": {
                                                    "type": "string"
                                                  },
                                                  "nodeTaintsPolicy": {
                                                    "type": "string"
                                                  },
                                                  "topologyKey": {
                                                    "type": "string"
                                                  },
                                                  "whenUnsatisfiable": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "x-kubernetes-list-map-keys": [
                                                "topologyKey",
                                                "whenUnsatisfiable"
                                              ],
                                              "x-kubernetes-list-type": "map"
                                            },
                                            "volumes": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "required": [
                                                  "name"
                                                ],
                                                "properties": {
                                                  "awsElasticBlockStore": {
                                                    "type": "object",
                                                    "required": [
                                                      "volumeID"
                                                    ],
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "partition": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "volumeID": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "azureDisk": {
                                                    "type": "object",
                                                    "required": [
                                                      "diskName",
                                                      "diskURI"
                                                    ],
                                                    "properties": {
                                                      "cachingMode": {
                                                        "type": "string"
                                                      },
                                                      "diskName": {
                                                        "type": "string"
                                                      },
                                                      "diskURI": {
                                                        "type": "string"
                                                      },
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "kind": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  },
                                                  "azureFile": {
                                                    "type": "object",
                                                    "required": [
                                                      "secretName",
                                                      "shareName"
                                                    ],
                                                    "properties": {
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "secretName": {
                                                        "type": "string"
                                                      },
                                                      "shareName": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "cephfs": {
                                                    "type": "object",
                                                    "required": [
                                                      "monitors"
                                                    ],
                                                    "properties": {
                                                      "monitors": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "path": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "secretFile": {
                                                        "type": "string"
                                                      },
                                                      "secretRef": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      },
                                                      "user": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "cinder": {
                                                    "type": "object",
                                                    "required": [
                                                      "volumeID"
                                                    ],
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "secretRef": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      },
                                                      "volumeID": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "configMap": {
                                                    "type": "object",
                                                    "properties": {
                                                      "defaultMode": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "items": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "path"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "type": "string"
                                                            },
                                                            "mode": {
                                                              "type": "integer",
                                                              "format": "int32"
                                                            },
                                                            "path": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      }
                                                    },
                                                    "x-kubernetes-map-type": "atomic"
                                                  },
                                                  "csi": {
                                                    "type": "object",
                                                    "required": [
                                                      "driver"
                                                    ],
                                                    "properties": {
                                                      "driver": {
                                                        "type": "string"
                                                      },
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "nodePublishSecretRef": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "volumeAttributes": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "downwardAPI": {
                                                    "type": "object",
                                                    "properties": {
                                                      "defaultMode": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "items": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "path"
                                                          ],
                                                          "properties": {
                                                            "fieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "fieldPath"
                                                              ],
                                                              "properties": {
                                                                "apiVersion": {
                                                                  "type": "string"
                                                                },
                                                                "fieldPath": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "mode": {
                                                              "type": "integer",
                                                              "format": "int32"
                                                            },
                                                            "path": {
                                                              "type": "string"
                                                            },
                                                            "resourceFieldRef": {
                                                              "type": "object",
                                                              "required": [
                                                                "resource"
                                                              ],
                                                              "properties": {
                                                                "containerName": {
                                                                  "type": "string"
                                                                },
                                                                "divisor": {
                                                                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                  "anyOf": [
                                                                    {
                                                                      "type": "integer"
                                                                    },
                                                                    {
                                                                      "type": "string"
                                                                    }
                                                                  ],
                                                                  "x-kubernetes-int-or-string": true
                                                                },
                                                                "resource": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "emptyDir": {
                                                    "type": "object",
                                                    "properties": {
                                                      "medium": {
                                                        "type": "string"
                                                      },
                                                      "sizeLimit": {
                                                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                        "anyOf": [
                                                          {
                                                            "type": "integer"
                                                          },
                                                          {
                                                            "type": "string"
                                                          }
                                                        ],
                                                        "x-kubernetes-int-or-string": true
                                                      }
                                                    }
                                                  },
                                                  "ephemeral": {
                                                    "type": "object",
                                                    "properties": {
                                                      "volumeClaimTemplate": {
                                                        "type": "object",
                                                        "required": [
                                                          "spec"
                                                        ],
                                                        "properties": {
                                                          "metadata": {
                                                            "type": "object"
                                                          },
                                                          "spec": {
                                                            "type": "object",
                                                            "properties": {
                                                              "accessModes": {
                                                                "type": "array",
                                                                "items": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "dataSource": {
                                                                "type": "object",
                                                                "required": [
                                                                  "kind",
                                                                  "name"
                                                                ],
                                                                "properties": {
                                                                  "apiGroup": {
                                                                    "type": "string"
                                                                  },
                                                                  "kind": {
                                                                    "type": "string"
                                                                  },
                                                                  "name": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "x-kubernetes-map-type": "atomic"
                                                              },
                                                              "dataSourceRef": {
                                                                "type": "object",
                                                                "required": [
                                                                  "kind",
                                                                  "name"
                                                                ],
                                                                "properties": {
                                                                  "apiGroup": {
                                                                    "type": "string"
                                                                  },
                                                                  "kind": {
                                                                    "type": "string"
                                                                  },
                                                                  "name": {
                                                                    "type": "string"
                                                                  },
                                                                  "namespace": {
                                                                    "type": "string"
                                                                  }
                                                                }
                                                              },
                                                              "resources": {
                                                                "type": "object",
                                                                "properties": {
                                                                  "limits": {
                                                                    "type": "object",
                                                                    "additionalProperties": {
                                                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                      "anyOf": [
                                                                        {
                                                                          "type": "integer"
                                                                        },
                                                                        {
                                                                          "type": "string"
                                                                        }
                                                                      ],
                                                                      "x-kubernetes-int-or-string": true
                                                                    }
                                                                  },
                                                                  "requests": {
                                                                    "type": "object",
                                                                    "additionalProperties": {
                                                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                      "anyOf": [
                                                                        {
                                                                          "type": "integer"
                                                                        },
                                                                        {
                                                                          "type": "string"
                                                                        }
                                                                      ],
                                                                      "x-kubernetes-int-or-string": true
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "selector": {
                                                                "type": "object",
                                                                "properties": {
                                                                  "matchExpressions": {
                                                                    "type": "array",
                                                                    "items": {
                                                                      "type": "object",
                                                                      "required": [
                                                                        "key",
                                                                        "operator"
                                                                      ],
                                                                      "properties": {
                                                                        "key": {
                                                                          "type": "string"
                                                                        },
                                                                        "operator": {
                                                                          "type": "string"
                                                                        },
                                                                        "values": {
                                                                          "type": "array",
                                                                          "items": {
                                                                            "type": "string"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  "matchLabels": {
                                                                    "type": "object",
                                                                    "additionalProperties": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                },
                                                                "x-kubernetes-map-type": "atomic"
                                                              },
                                                              "storageClassName": {
                                                                "type": "string"
                                                              },
                                                              "volumeAttributesClassName": {
                                                                "type": "string"
                                                              },
                                                              "volumeMode": {
                                                                "type": "string"
                                                              },
                                                              "volumeName": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "fc": {
                                                    "type": "object",
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "lun": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "targetWWNs": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "wwids": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "flexVolume": {
                                                    "type": "object",
                                                    "required": [
                                                      "driver"
                                                    ],
                                                    "properties": {
                                                      "driver": {
                                                        "type": "string"
                                                      },
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "options": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "secretRef": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      }
                                                    }
                                                  },
                                                  "flocker": {
                                                    "type": "object",
                                                    "properties": {
                                                      "datasetName": {
                                                        "type": "string"
                                                      },
                                                      "datasetUUID": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "gcePersistentDisk": {
                                                    "type": "object",
                                                    "required": [
                                                      "pdName"
                                                    ],
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "partition": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "pdName": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  },
                                                  "gitRepo": {
                                                    "type": "object",
                                                    "required": [
                                                      "repository"
                                                    ],
                                                    "properties": {
                                                      "directory": {
                                                        "type": "string"
                                                      },
                                                      "repository": {
                                                        "type": "string"
                                                      },
                                                      "revision": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "glusterfs": {
                                                    "type": "object",
                                                    "required": [
                                                      "endpoints",
                                                      "path"
                                                    ],
                                                    "properties": {
                                                      "endpoints": {
                                                        "type": "string"
                                                      },
                                                      "path": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  },
                                                  "hostPath": {
                                                    "type": "object",
                                                    "required": [
                                                      "path"
                                                    ],
                                                    "properties": {
                                                      "path": {
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "iscsi": {
                                                    "type": "object",
                                                    "required": [
                                                      "iqn",
                                                      "lun",
                                                      "targetPortal"
                                                    ],
                                                    "properties": {
                                                      "chapAuthDiscovery": {
                                                        "type": "boolean"
                                                      },
                                                      "chapAuthSession": {
                                                        "type": "boolean"
                                                      },
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "initiatorName": {
                                                        "type": "string"
                                                      },
                                                      "iqn": {
                                                        "type": "string"
                                                      },
                                                      "iscsiInterface": {
                                                        "type": "string"
                                                      },
                                                      "lun": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "portals": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "secretRef": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      },
                                                      "targetPortal": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "nfs": {
                                                    "type": "object",
                                                    "required": [
                                                      "path",
                                                      "server"
                                                    ],
                                                    "properties": {
                                                      "path": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "server": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "persistentVolumeClaim": {
                                                    "type": "object",
                                                    "required": [
                                                      "claimName"
                                                    ],
                                                    "properties": {
                                                      "claimName": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      }
                                                    }
                                                  },
                                                  "photonPersistentDisk": {
                                                    "type": "object",
                                                    "required": [
                                                      "pdID"
                                                    ],
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "pdID": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "portworxVolume": {
                                                    "type": "object",
                                                    "required": [
                                                      "volumeID"
                                                    ],
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "volumeID": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "projected": {
                                                    "type": "object",
                                                    "properties": {
                                                      "defaultMode": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "sources": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "properties": {
                                                            "clusterTrustBundle": {
                                                              "type": "object",
                                                              "required": [
                                                                "path"
                                                              ],
                                                              "properties": {
                                                                "labelSelector": {
                                                                  "type": "object",
                                                                  "properties": {
                                                                    "matchExpressions": {
                                                                      "type": "array",
                                                                      "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                          "key",
                                                                          "operator"
                                                                        ],
                                                                        "properties": {
                                                                          "key": {
                                                                            "type": "string"
                                                                          },
                                                                          "operator": {
                                                                            "type": "string"
                                                                          },
                                                                          "values": {
                                                                            "type": "array",
                                                                            "items": {
                                                                              "type": "string"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    "matchLabels": {
                                                                      "type": "object",
                                                                      "additionalProperties": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  },
                                                                  "x-kubernetes-map-type": "atomic"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                },
                                                                "path": {
                                                                  "type": "string"
                                                                },
                                                                "signerName": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            "configMap": {
                                                              "type": "object",
                                                              "properties": {
                                                                "items": {
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                      "key",
                                                                      "path"
                                                                    ],
                                                                    "properties": {
                                                                      "key": {
                                                                        "type": "string"
                                                                      },
                                                                      "mode": {
                                                                        "type": "integer",
                                                                        "format": "int32"
                                                                      },
                                                                      "path": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "downwardAPI": {
                                                              "type": "object",
                                                              "properties": {
                                                                "items": {
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                      "path"
                                                                    ],
                                                                    "properties": {
                                                                      "fieldRef": {
                                                                        "type": "object",
                                                                        "required": [
                                                                          "fieldPath"
                                                                        ],
                                                                        "properties": {
                                                                          "apiVersion": {
                                                                            "type": "string"
                                                                          },
                                                                          "fieldPath": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "x-kubernetes-map-type": "atomic"
                                                                      },
                                                                      "mode": {
                                                                        "type": "integer",
                                                                        "format": "int32"
                                                                      },
                                                                      "path": {
                                                                        "type": "string"
                                                                      },
                                                                      "resourceFieldRef": {
                                                                        "type": "object",
                                                                        "required": [
                                                                          "resource"
                                                                        ],
                                                                        "properties": {
                                                                          "containerName": {
                                                                            "type": "string"
                                                                          },
                                                                          "divisor": {
                                                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                                            "anyOf": [
                                                                              {
                                                                                "type": "integer"
                                                                              },
                                                                              {
                                                                                "type": "string"
                                                                              }
                                                                            ],
                                                                            "x-kubernetes-int-or-string": true
                                                                          },
                                                                          "resource": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "x-kubernetes-map-type": "atomic"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "secret": {
                                                              "type": "object",
                                                              "properties": {
                                                                "items": {
                                                                  "type": "array",
                                                                  "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                      "key",
                                                                      "path"
                                                                    ],
                                                                    "properties": {
                                                                      "key": {
                                                                        "type": "string"
                                                                      },
                                                                      "mode": {
                                                                        "type": "integer",
                                                                        "format": "int32"
                                                                      },
                                                                      "path": {
                                                                        "type": "string"
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "optional": {
                                                                  "type": "boolean"
                                                                }
                                                              },
                                                              "x-kubernetes-map-type": "atomic"
                                                            },
                                                            "serviceAccountToken": {
                                                              "type": "object",
                                                              "required": [
                                                                "path"
                                                              ],
                                                              "properties": {
                                                                "audience": {
                                                                  "type": "string"
                                                                },
                                                                "expirationSeconds": {
                                                                  "type": "integer",
                                                                  "format": "int64"
                                                                },
                                                                "path": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "quobyte": {
                                                    "type": "object",
                                                    "required": [
                                                      "registry",
                                                      "volume"
                                                    ],
                                                    "properties": {
                                                      "group": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "registry": {
                                                        "type": "string"
                                                      },
                                                      "tenant": {
                                                        "type": "string"
                                                      },
                                                      "user": {
                                                        "type": "string"
                                                      },
                                                      "volume": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "rbd": {
                                                    "type": "object",
                                                    "required": [
                                                      "image",
                                                      "monitors"
                                                    ],
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "image": {
                                                        "type": "string"
                                                      },
                                                      "keyring": {
                                                        "type": "string"
                                                      },
                                                      "monitors": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "pool": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "secretRef": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      },
                                                      "user": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "scaleIO": {
                                                    "type": "object",
                                                    "required": [
                                                      "gateway",
                                                      "secretRef",
                                                      "system"
                                                    ],
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "gateway": {
                                                        "type": "string"
                                                      },
                                                      "protectionDomain": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "secretRef": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      },
                                                      "sslEnabled": {
                                                        "type": "boolean"
                                                      },
                                                      "storageMode": {
                                                        "type": "string"
                                                      },
                                                      "storagePool": {
                                                        "type": "string"
                                                      },
                                                      "system": {
                                                        "type": "string"
                                                      },
                                                      "volumeName": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "secret": {
                                                    "type": "object",
                                                    "properties": {
                                                      "defaultMode": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                      },
                                                      "items": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "object",
                                                          "required": [
                                                            "key",
                                                            "path"
                                                          ],
                                                          "properties": {
                                                            "key": {
                                                              "type": "string"
                                                            },
                                                            "mode": {
                                                              "type": "integer",
                                                              "format": "int32"
                                                            },
                                                            "path": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "optional": {
                                                        "type": "boolean"
                                                      },
                                                      "secretName": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "storageos": {
                                                    "type": "object",
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "readOnly": {
                                                        "type": "boolean"
                                                      },
                                                      "secretRef": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "x-kubernetes-map-type": "atomic"
                                                      },
                                                      "volumeName": {
                                                        "type": "string"
                                                      },
                                                      "volumeNamespace": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "vsphereVolume": {
                                                    "type": "object",
                                                    "required": [
                                                      "volumePath"
                                                    ],
                                                    "properties": {
                                                      "fsType": {
                                                        "type": "string"
                                                      },
                                                      "storagePolicyID": {
                                                        "type": "string"
                                                      },
                                                      "storagePolicyName": {
                                                        "type": "string"
                                                      },
                                                      "volumePath": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "updateStrategy": {
                                      "type": "object",
                                      "properties": {
                                        "rollingUpdate": {
                                          "type": "object",
                                          "properties": {
                                            "maxUnavailable": {
                                              "anyOf": [
                                                {
                                                  "type": "integer"
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ],
                                              "x-kubernetes-int-or-string": true
                                            },
                                            "partition": {
                                              "type": "integer",
                                              "format": "int32"
                                            }
                                          }
                                        },
                                        "type": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "volumeClaimTemplates": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "apiVersion": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "properties": {
                                              "annotations": {
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              },
                                              "labels": {
                                                "type": "object",
                                                "additionalProperties": {
                                                  "type": "string"
                                                }
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "namespace": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "spec": {
                                            "type": "object",
                                            "properties": {
                                              "accessModes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              "dataSource": {
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "apiGroup": {
                                                    "type": "string"
                                                  },
                                                  "kind": {
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "dataSourceRef": {
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "apiGroup": {
                                                    "type": "string"
                                                  },
                                                  "kind": {
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "namespace": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "resources": {
                                                "type": "object",
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                      "anyOf": [
                                                        {
                                                          "type": "integer"
                                                        },
                                                        {
                                                          "type": "string"
                                                        }
                                                      ],
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  },
                                                  "requests": {
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                                      "anyOf": [
                                                        {
                                                          "type": "integer"
                                                        },
                                                        {
                                                          "type": "string"
                                                        }
                                                      ],
                                                      "x-kubernetes-int-or-string": true
                                                    }
                                                  }
                                                }
                                              },
                                              "selector": {
                                                "type": "object",
                                                "properties": {
                                                  "matchExpressions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "required": [
                                                        "key",
                                                        "operator"
                                                      ],
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        },
                                                        "operator": {
                                                          "type": "string"
                                                        },
                                                        "values": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "matchLabels": {
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "x-kubernetes-map-type": "atomic"
                                              },
                                              "storageClassName": {
                                                "type": "string"
                                              },
                                              "volumeAttributesClassName": {
                                                "type": "string"
                                              },
                                              "volumeMode": {
                                                "type": "string"
                                              },
                                              "volumeName": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "persistence": {
                          "description": "The desired persistent storage configuration for each Pod in the cluster.",
                          "type": "object",
                          "default": {
                            "storage": "10Gi"
                          },
                          "properties": {
                            "storage": {
                              "description": "The requested size of the persistent volume attached to each Pod in the RabbitmqCluster.\nThe format of this field matches that defined by kubernetes/apimachinery.\nSee https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info on the format of this field.",
                              "default": "10Gi",
                              "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "storageClassName": {
                              "description": "The name of the StorageClass to claim a PersistentVolume from.",
                              "type": "string"
                            }
                          }
                        },
                        "rabbitmq": {
                          "description": "Configuration options for RabbitMQ Pods created in the cluster.",
                          "type": "object",
                          "properties": {
                            "additionalConfig": {
                              "description": "Modify to add to the rabbitmq.conf file in addition to default configurations set by the operator.\nModifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime.\nFor more information on this config, see https://www.rabbitmq.com/configure.html#config-file",
                              "type": "string",
                              "maxLength": 2000
                            },
                            "additionalPlugins": {
                              "description": "List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.",
                              "type": "array",
                              "maxItems": 100,
                              "items": {
                                "description": "A Plugin to enable on the RabbitmqCluster.",
                                "type": "string",
                                "maxLength": 100,
                                "pattern": "^\\w+$"
                              }
                            },
                            "advancedConfig": {
                              "description": "Specify any rabbitmq advanced.config configurations to apply to the cluster.\nFor more information on advanced config, see https://www.rabbitmq.com/configure.html#advanced-config-file",
                              "type": "string",
                              "maxLength": 100000
                            },
                            "envConfig": {
                              "description": "Modify to add to the rabbitmq-env.conf file. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime.\nFor more information on env config, see https://www.rabbitmq.com/man/rabbitmq-env.conf.5.html",
                              "type": "string",
                              "maxLength": 100000
                            },
                            "erlangInetConfig": {
                              "description": "Erlang Inet configuration to apply to the Erlang VM running rabbit.\nSee also: https://www.erlang.org/doc/apps/erts/inet_cfg.html",
                              "type": "string",
                              "maxLength": 2000
                            }
                          }
                        },
                        "replicas": {
                          "description": "Replicas is the number of nodes in the RabbitMQ cluster. Each node is deployed as a Replica in a StatefulSet. Only 1, 3, 5 replicas clusters are tested.\nThis value should be an odd number to ensure the resultant cluster can establish exactly one quorum of nodes\nin the event of a fragmenting network partition.",
                          "type": "integer",
                          "format": "int32",
                          "default": 1,
                          "minimum": 0
                        },
                        "resources": {
                          "description": "The desired compute resource requirements of Pods in the cluster.",
                          "type": "object",
                          "default": {
                            "limits": {
                              "cpu": "2000m",
                              "memory": "2Gi"
                            },
                            "requests": {
                              "cpu": "1000m",
                              "memory": "2Gi"
                            }
                          },
                          "properties": {
                            "claims": {
                              "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                              "type": "array",
                              "items": {
                                "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                                    "type": "string"
                                  }
                                }
                              },
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            },
                            "limits": {
                              "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "requests": {
                              "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "type": "object",
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              }
                            }
                          }
                        },
                        "secretBackend": {
                          "description": "Secret backend configuration for the RabbitmqCluster.\nEnables to fetch default user credentials and certificates from K8s external secret stores.",
                          "type": "object",
                          "properties": {
                            "externalSecret": {
                              "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "vault": {
                              "description": "VaultSpec will add Vault annotations (see https://www.vaultproject.io/docs/platform/k8s/injector/annotations)\nto RabbitMQ Pods. It requires a Vault Agent Sidecar Injector (https://www.vaultproject.io/docs/platform/k8s/injector)\nto be installed in the K8s cluster. The injector is a K8s Mutation Webhook Controller that alters RabbitMQ Pod specifications\n(based on the added Vault annotations) to include Vault Agent containers that render Vault secrets to the volume.",
                              "type": "object",
                              "properties": {
                                "annotations": {
                                  "description": "Vault annotations that override the Vault annotations set by the cluster-operator.\nFor a list of valid Vault annotations, see https://www.vaultproject.io/docs/platform/k8s/injector/annotations",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "defaultUserPath": {
                                  "description": "Path in Vault to access a KV (Key-Value) secret with the fields username and password for the default user.\nFor example \"secret/data/rabbitmq/config\".",
                                  "type": "string"
                                },
                                "defaultUserUpdaterImage": {
                                  "description": "Sidecar container that updates the default user's password in RabbitMQ when it changes in Vault.\nAdditionally, it updates /var/lib/rabbitmq/.rabbitmqadmin.conf (used by rabbitmqadmin CLI).\nSet to empty string to disable the sidecar container.",
                                  "type": "string"
                                },
                                "role": {
                                  "description": "Role in Vault.\nIf vault.defaultUserPath is set, this role must have capability to read the pre-created default user credential in Vault.\nIf vault.tls is set, this role must have capability to create and update certificates in the Vault PKI engine for the domains\n\"<namespace>\" and \"<namespace>.svc\".",
                                  "type": "string"
                                },
                                "tls": {
                                  "type": "object",
                                  "properties": {
                                    "altNames": {
                                      "description": "Specifies the requested Subject Alternative Names (SANs), in a comma-delimited list.\nThese will be appended to the SANs added by the cluster-operator.\nThe cluster-operator will add SANs:\n\"<RabbitmqCluster name>-server-<index>.<RabbitmqCluster name>-nodes.<namespace>\" for each pod,\ne.g. \"myrabbit-server-0.myrabbit-nodes.default\".",
                                      "type": "string"
                                    },
                                    "commonName": {
                                      "description": "Specifies the requested certificate Common Name (CN).\nDefaults to <serviceName>.<namespace>.svc if not provided.",
                                      "type": "string"
                                    },
                                    "ipSans": {
                                      "description": "Specifies the requested IP Subject Alternative Names, in a comma-delimited list.",
                                      "type": "string"
                                    },
                                    "pkiIssuerPath": {
                                      "description": "Path in Vault PKI engine.\nFor example \"pki/issue/hashicorp-com\".\nrequired",
                                      "type": "string"
                                    },
                                    "pkiRootPath": {
                                      "description": "Specifies an optional path to retrieve the root CA from vault.  Useful if certificates are issued by an intermediate CA",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "service": {
                          "description": "The desired state of the Kubernetes Service to create for the cluster.",
                          "type": "object",
                          "default": {
                            "type": "ClusterIP"
                          },
                          "properties": {
                            "annotations": {
                              "description": "Annotations to add to the Service.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "ipFamilyPolicy": {
                              "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by a Service\nSee also: https://pkg.go.dev/k8s.io/api/core/v1#IPFamilyPolicy",
                              "type": "string",
                              "enum": [
                                "SingleStack",
                                "PreferDualStack",
                                "RequireDualStack"
                              ]
                            },
                            "type": {
                              "description": "Type of Service to create for the cluster. Must be one of: ClusterIP, LoadBalancer, NodePort.\nFor more info see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType",
                              "type": "string",
                              "default": "ClusterIP",
                              "enum": [
                                "ClusterIP",
                                "LoadBalancer",
                                "NodePort"
                              ]
                            }
                          }
                        },
                        "skipPostDeploySteps": {
                          "description": "If unset, or set to false, the cluster will run `rabbitmq-queues rebalance all` whenever the cluster is updated.\nSet to true to prevent the operator rebalancing queue leaders after a cluster update.\nHas no effect if the cluster only consists of one node.\nFor more information, see https://www.rabbitmq.com/rabbitmq-queues.8.html#rebalance",
                          "type": "boolean"
                        },
                        "terminationGracePeriodSeconds": {
                          "description": "TerminationGracePeriodSeconds is the timeout that each rabbitmqcluster pod will have to terminate gracefully.\nIt defaults to 604800 seconds ( a week long) to ensure that the container preStop lifecycle hook can finish running.\nFor more information, see: https://github.com/rabbitmq/cluster-operator/blob/main/docs/design/20200520-graceful-pod-termination.md",
                          "type": "integer",
                          "format": "int64",
                          "default": 604800,
                          "minimum": 0
                        },
                        "tls": {
                          "description": "TLS-related configuration for the RabbitMQ cluster.",
                          "type": "object",
                          "properties": {
                            "caSecretName": {
                              "description": "Name of a Secret in the same Namespace as the RabbitmqCluster, containing the Certificate Authority's public certificate for TLS.\nThe Secret must store this as ca.crt.\nThis Secret can be created by running `kubectl create secret generic ca-secret --from-file=ca.crt=path/to/ca.cert`\nUsed for mTLS, and TLS for rabbitmq_web_stomp and rabbitmq_web_mqtt.",
                              "type": "string"
                            },
                            "disableNonTLSListeners": {
                              "description": "When set to true, the RabbitmqCluster disables non-TLS listeners for RabbitMQ, management plugin and for any enabled plugins in the following list: stomp, mqtt, web_stomp, web_mqtt.\nOnly TLS-enabled clients will be able to connect.",
                              "type": "boolean"
                            },
                            "secretName": {
                              "description": "Name of a Secret in the same Namespace as the RabbitmqCluster, containing the server's private key & public certificate for TLS.\nThe Secret must store these as tls.key and tls.crt, respectively.\nThis Secret can be created by running `kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key`",
                              "type": "string"
                            }
                          }
                        },
                        "tolerations": {
                          "description": "Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.",
                          "type": "array",
                          "items": {
                            "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.",
                            "type": "object",
                            "properties": {
                              "effect": {
                                "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                                "type": "string"
                              },
                              "key": {
                                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                                "type": "string"
                              },
                              "tolerationSeconds": {
                                "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                                "type": "integer",
                                "format": "int64"
                              },
                              "value": {
                                "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status presents the observed state of RabbitmqCluster",
                      "type": "object",
                      "required": [
                        "conditions"
                      ],
                      "properties": {
                        "binding": {
                          "description": "Binding exposes a secret containing the binding information for this\nRabbitmqCluster. It implements the service binding Provisioned Service\nduck type. See: https://github.com/servicebinding/spec#provisioned-service",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "conditions": {
                          "description": "Set of Conditions describing the current state of the RabbitmqCluster",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition type changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of RabbitmqCluster status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "defaultUser": {
                          "description": "Identifying information on internal resources",
                          "type": "object",
                          "properties": {
                            "secretReference": {
                              "description": "Reference to the Kubernetes Secret containing the credentials of the default\nuser.",
                              "type": "object",
                              "required": [
                                "keys",
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "keys": {
                                  "description": "Key-value pairs in the Secret corresponding to `username`, `password`, `host`, and `port`",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "name": {
                                  "description": "Name of the Secret containing the default user credentials",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the Secret containing the default user credentials",
                                  "type": "string"
                                }
                              }
                            },
                            "serviceReference": {
                              "description": "Reference to the Kubernetes Service serving the cluster.",
                              "type": "object",
                              "required": [
                                "name",
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the Service serving the cluster",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace of the Service serving the cluster",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this RabbitmqCluster. It corresponds to the\nRabbitmqCluster's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "AllReplicasReady",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type == 'AllReplicasReady')].status"
                },
                {
                  "name": "ReconcileSuccess",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type == 'ReconcileSuccess')].status"
                },
                {
                  "name": "Age",
                  "type": "date",
                  "jsonPath": ".metadata.creationTimestamp"
                }
              ]
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "rabbitmqclusters",
            "singular": "rabbitmqcluster",
            "shortNames": [
              "rmq"
            ],
            "kind": "RabbitmqCluster",
            "listKind": "RabbitmqClusterList",
            "categories": [
              "all",
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "AllReplicasReady",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type == 'AllReplicasReady')].status"
        },
        {
          "name": "ReconcileSuccess",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type == 'ReconcileSuccess')].status"
        },
        {
          "name": "Age",
          "type": "date",
          "jsonPath": ".metadata.creationTimestamp"
        }
      ],
      "short": "RabbitmqCluster",
      "apiGroup": "rabbitmq.com",
      "apiKind": "RabbitmqCluster",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.SchemaReplication",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "SchemaReplicationSpec defines the desired state of SchemaReplication",
            "type": "object",
            "required": [
              "rabbitmqClusterReference"
            ],
            "properties": {
              "endpoints": {
                "description": "endpoints should be one or multiple endpoints separated by ','.\nMust provide either spec.endpoints or endpoints in spec.upstreamSecret.\nWhen endpoints are provided in both spec.endpoints and spec.upstreamSecret, spec.endpoints takes\nprecedence.",
                "type": "string"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that schema replication would be set for. Must be an existing cluster.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "secretBackend": {
                "description": "Set to fetch user credentials from K8s external secret stores to be used for schema replication.",
                "type": "object",
                "properties": {
                  "vault": {
                    "type": "object",
                    "properties": {
                      "secretPath": {
                        "description": "Path in Vault to access a KV (Key-Value) secret with the fields username and password to be used for replication.\nFor example \"secret/data/rabbitmq/config\".\nOptional; if not provided, username and password will come from upstreamSecret instead.\nHave to set either secretBackend.vault.secretPath or upstreamSecret, but not both.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "upstreamSecret": {
                "description": "Defines a Secret which contains credentials to be used for schema replication.\nThe Secret must contain the keys `username` and `password` in its Data field, or operator will error.\nHave to set either secretBackend.vault.secretPath or spec.upstreamSecret, but not both.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              }
            }
          },
          "status": {
            "description": "SchemaReplicationStatus defines the observed state of SchemaReplication",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Queue. It corresponds to the\nQueue's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "SchemaReplication is the Schema for the schemareplications API\nThis feature requires Tanzu RabbitMQ with schema replication plugin.\nFor more information, see: https://tanzu.vmware.com/rabbitmq and https://www.rabbitmq.com/definitions-standby.html.",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "SchemaReplication",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "schemareplications.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "schemareplications",
            "singular": "schemareplication",
            "kind": "SchemaReplication",
            "listKind": "SchemaReplicationList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "SchemaReplication is the Schema for the schemareplications API\nThis feature requires Tanzu RabbitMQ with schema replication plugin.\nFor more information, see: https://tanzu.vmware.com/rabbitmq and https://www.rabbitmq.com/definitions-standby.html.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "SchemaReplicationSpec defines the desired state of SchemaReplication",
                      "type": "object",
                      "required": [
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "endpoints": {
                          "description": "endpoints should be one or multiple endpoints separated by ','.\nMust provide either spec.endpoints or endpoints in spec.upstreamSecret.\nWhen endpoints are provided in both spec.endpoints and spec.upstreamSecret, spec.endpoints takes\nprecedence.",
                          "type": "string"
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that schema replication would be set for. Must be an existing cluster.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "secretBackend": {
                          "description": "Set to fetch user credentials from K8s external secret stores to be used for schema replication.",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "description": "Path in Vault to access a KV (Key-Value) secret with the fields username and password to be used for replication.\nFor example \"secret/data/rabbitmq/config\".\nOptional; if not provided, username and password will come from upstreamSecret instead.\nHave to set either secretBackend.vault.secretPath or upstreamSecret, but not both.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "upstreamSecret": {
                          "description": "Defines a Secret which contains credentials to be used for schema replication.\nThe Secret must contain the keys `username` and `password` in its Data field, or operator will error.\nHave to set either secretBackend.vault.secretPath or spec.upstreamSecret, but not both.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        }
                      }
                    },
                    "status": {
                      "description": "SchemaReplicationStatus defines the observed state of SchemaReplication",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Queue. It corresponds to the\nQueue's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "schemareplications",
            "singular": "schemareplication",
            "kind": "SchemaReplication",
            "listKind": "SchemaReplicationList"
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "SchemaReplication",
      "apiGroup": "rabbitmq.com",
      "apiKind": "SchemaReplication",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.Shovel",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "ShovelSpec defines the desired state of Shovel\nFor how to configure Shovel, see: https://www.rabbitmq.com/shovel.html.",
            "type": "object",
            "required": [
              "name",
              "rabbitmqClusterReference",
              "uriSecret"
            ],
            "properties": {
              "ackMode": {
                "type": "string",
                "enum": [
                  "on-confirm",
                  "on-publish",
                  "no-ack"
                ]
              },
              "addForwardHeaders": {
                "type": "boolean"
              },
              "deleteAfter": {
                "type": "string"
              },
              "destAddForwardHeaders": {
                "type": "boolean"
              },
              "destAddTimestampHeader": {
                "type": "boolean"
              },
              "destAddress": {
                "description": "amqp10 configuration; required if destProtocol is amqp10",
                "type": "string"
              },
              "destApplicationProperties": {
                "description": "amqp10 configuration",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "destExchange": {
                "description": "amqp091 configuration",
                "type": "string"
              },
              "destExchangeKey": {
                "description": "amqp091 configuration",
                "type": "string"
              },
              "destMessageAnnotations": {
                "description": "amqp10 configuration",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "destProperties": {
                "description": "amqp10 configuration",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "destProtocol": {
                "type": "string",
                "enum": [
                  "amqp091",
                  "amqp10"
                ]
              },
              "destPublishProperties": {
                "description": "amqp091 configuration",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "destQueue": {
                "description": "amqp091 configuration",
                "type": "string"
              },
              "name": {
                "description": "Required property; cannot be updated",
                "type": "string"
              },
              "prefetchCount": {
                "type": "integer"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that this Shovel will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "reconnectDelay": {
                "type": "integer"
              },
              "srcAddress": {
                "description": "amqp10 configuration; required if srcProtocol is amqp10",
                "type": "string"
              },
              "srcConsumerArgs": {
                "description": "amqp091 configuration",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "srcDeleteAfter": {
                "type": "string"
              },
              "srcExchange": {
                "description": "amqp091 configuration",
                "type": "string"
              },
              "srcExchangeKey": {
                "description": "amqp091 configuration",
                "type": "string"
              },
              "srcPrefetchCount": {
                "type": "integer"
              },
              "srcProtocol": {
                "type": "string",
                "enum": [
                  "amqp091",
                  "amqp10"
                ]
              },
              "srcQueue": {
                "description": "amqp091 configuration",
                "type": "string"
              },
              "uriSecret": {
                "description": "Secret contains the AMQP URI(s) to configure Shovel destination and source.\nThe Secret must contain the key `destUri` and `srcUri` or operator will error.\nBoth fields should be one or multiple uris separated by ','.\nRequired property.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "vhost": {
                "description": "Default to vhost '/'; cannot be updated",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "ShovelStatus defines the observed state of Shovel",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Shovel. It corresponds to the\nShovel's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "Shovel is the Schema for the shovels API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "Shovel",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "shovels.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "shovels",
            "singular": "shovel",
            "kind": "Shovel",
            "listKind": "ShovelList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Shovel is the Schema for the shovels API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "ShovelSpec defines the desired state of Shovel\nFor how to configure Shovel, see: https://www.rabbitmq.com/shovel.html.",
                      "type": "object",
                      "required": [
                        "name",
                        "rabbitmqClusterReference",
                        "uriSecret"
                      ],
                      "properties": {
                        "ackMode": {
                          "type": "string",
                          "enum": [
                            "on-confirm",
                            "on-publish",
                            "no-ack"
                          ]
                        },
                        "addForwardHeaders": {
                          "type": "boolean"
                        },
                        "deleteAfter": {
                          "type": "string"
                        },
                        "destAddForwardHeaders": {
                          "type": "boolean"
                        },
                        "destAddTimestampHeader": {
                          "type": "boolean"
                        },
                        "destAddress": {
                          "description": "amqp10 configuration; required if destProtocol is amqp10",
                          "type": "string"
                        },
                        "destApplicationProperties": {
                          "description": "amqp10 configuration",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "destExchange": {
                          "description": "amqp091 configuration",
                          "type": "string"
                        },
                        "destExchangeKey": {
                          "description": "amqp091 configuration",
                          "type": "string"
                        },
                        "destMessageAnnotations": {
                          "description": "amqp10 configuration",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "destProperties": {
                          "description": "amqp10 configuration",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "destProtocol": {
                          "type": "string",
                          "enum": [
                            "amqp091",
                            "amqp10"
                          ]
                        },
                        "destPublishProperties": {
                          "description": "amqp091 configuration",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "destQueue": {
                          "description": "amqp091 configuration",
                          "type": "string"
                        },
                        "name": {
                          "description": "Required property; cannot be updated",
                          "type": "string"
                        },
                        "prefetchCount": {
                          "type": "integer"
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that this Shovel will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "reconnectDelay": {
                          "type": "integer"
                        },
                        "srcAddress": {
                          "description": "amqp10 configuration; required if srcProtocol is amqp10",
                          "type": "string"
                        },
                        "srcConsumerArgs": {
                          "description": "amqp091 configuration",
                          "type": "object",
                          "x-kubernetes-preserve-unknown-fields": true
                        },
                        "srcDeleteAfter": {
                          "type": "string"
                        },
                        "srcExchange": {
                          "description": "amqp091 configuration",
                          "type": "string"
                        },
                        "srcExchangeKey": {
                          "description": "amqp091 configuration",
                          "type": "string"
                        },
                        "srcPrefetchCount": {
                          "type": "integer"
                        },
                        "srcProtocol": {
                          "type": "string",
                          "enum": [
                            "amqp091",
                            "amqp10"
                          ]
                        },
                        "srcQueue": {
                          "description": "amqp091 configuration",
                          "type": "string"
                        },
                        "uriSecret": {
                          "description": "Secret contains the AMQP URI(s) to configure Shovel destination and source.\nThe Secret must contain the key `destUri` and `srcUri` or operator will error.\nBoth fields should be one or multiple uris separated by ','.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "vhost": {
                          "description": "Default to vhost '/'; cannot be updated",
                          "type": "string",
                          "default": "/"
                        }
                      }
                    },
                    "status": {
                      "description": "ShovelStatus defines the observed state of Shovel",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Shovel. It corresponds to the\nShovel's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "shovels",
            "singular": "shovel",
            "kind": "Shovel",
            "listKind": "ShovelList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Shovel",
      "apiGroup": "rabbitmq.com",
      "apiKind": "Shovel",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.TopicPermission",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "TopicPermissionSpec defines the desired state of TopicPermission",
            "type": "object",
            "required": [
              "permissions",
              "rabbitmqClusterReference",
              "vhost"
            ],
            "properties": {
              "permissions": {
                "description": "Permissions to grant to the user to a topic exchange; required property.",
                "type": "object",
                "properties": {
                  "exchange": {
                    "description": "Name of a topic exchange; required property; cannot be updated.",
                    "type": "string"
                  },
                  "read": {
                    "type": "string"
                  },
                  "write": {
                    "type": "string"
                  }
                }
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that both the provided user and vhost are.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "user": {
                "description": "Name of an existing user; must provide user or userReference, else create/update will fail; cannot be updated.",
                "type": "string"
              },
              "userReference": {
                "description": "Reference to an existing user.rabbitmq.com object; must provide user or userReference, else create/update will fail; cannot be updated.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "vhost": {
                "description": "Name of an existing vhost; required property; cannot be updated.",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "TopicPermissionStatus defines the observed state of TopicPermission",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this TopicPermission. It corresponds to the\nTopicPermission's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "TopicPermission is the Schema for the topicpermissions API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "TopicPermission",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "topicpermissions.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "topicpermissions",
            "singular": "topicpermission",
            "kind": "TopicPermission",
            "listKind": "TopicPermissionList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "TopicPermission is the Schema for the topicpermissions API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "TopicPermissionSpec defines the desired state of TopicPermission",
                      "type": "object",
                      "required": [
                        "permissions",
                        "rabbitmqClusterReference",
                        "vhost"
                      ],
                      "properties": {
                        "permissions": {
                          "description": "Permissions to grant to the user to a topic exchange; required property.",
                          "type": "object",
                          "properties": {
                            "exchange": {
                              "description": "Name of a topic exchange; required property; cannot be updated.",
                              "type": "string"
                            },
                            "read": {
                              "type": "string"
                            },
                            "write": {
                              "type": "string"
                            }
                          }
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that both the provided user and vhost are.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "user": {
                          "description": "Name of an existing user; must provide user or userReference, else create/update will fail; cannot be updated.",
                          "type": "string"
                        },
                        "userReference": {
                          "description": "Reference to an existing user.rabbitmq.com object; must provide user or userReference, else create/update will fail; cannot be updated.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "vhost": {
                          "description": "Name of an existing vhost; required property; cannot be updated.",
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "description": "TopicPermissionStatus defines the observed state of TopicPermission",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this TopicPermission. It corresponds to the\nTopicPermission's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "topicpermissions",
            "singular": "topicpermission",
            "kind": "TopicPermission",
            "listKind": "TopicPermissionList"
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "TopicPermission",
      "apiGroup": "rabbitmq.com",
      "apiKind": "TopicPermission",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.User",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "Spec configures the desired state of the User object.",
            "type": "object",
            "required": [
              "rabbitmqClusterReference"
            ],
            "properties": {
              "importCredentialsSecret": {
                "description": "Defines a Secret used to pre-define the username and password set for this User. User objects created\nwith this field set will not have randomly-generated credentials, and will instead import\nthe username/password values from this Secret.\nThe Secret must contain the keys `username` and `password` in its Data field, or the import will fail.\nNote that this import only occurs at creation time, and is ignored once a password has been set\non a User.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that the user will be created for. This cluster must\nexist for the User object to be created.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "tags": {
                "description": "List of permissions tags to associate with the user. This determines the level of\naccess to the RabbitMQ management UI granted to the user. Omitting this field will\nlead to a user than can still connect to the cluster through messaging protocols,\nbut cannot perform any management actions.\nFor more information, see https://www.rabbitmq.com/management.html#permissions.",
                "type": "array",
                "items": {
                  "description": "UserTag defines the level of access to the management UI allocated to the user.\nFor more information, see https://www.rabbitmq.com/management.html#permissions.",
                  "type": "string",
                  "enum": [
                    "management",
                    "policymaker",
                    "monitoring",
                    "administrator"
                  ]
                }
              }
            }
          },
          "status": {
            "description": "Status exposes the observed state of the User object.",
            "type": "object",
            "required": [
              "username"
            ],
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "credentials": {
                "description": "Provides a reference to a Secret object containing the user credentials.",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this User. It corresponds to the\nUser's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              },
              "username": {
                "description": "Provide rabbitmq Username",
                "type": "string"
              }
            }
          }
        },
        "description": "User is the Schema for the users API.",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "User",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "users.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "users",
            "singular": "user",
            "kind": "User",
            "listKind": "UserList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "User is the Schema for the users API.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "Spec configures the desired state of the User object.",
                      "type": "object",
                      "required": [
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "importCredentialsSecret": {
                          "description": "Defines a Secret used to pre-define the username and password set for this User. User objects created\nwith this field set will not have randomly-generated credentials, and will instead import\nthe username/password values from this Secret.\nThe Secret must contain the keys `username` and `password` in its Data field, or the import will fail.\nNote that this import only occurs at creation time, and is ignored once a password has been set\non a User.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that the user will be created for. This cluster must\nexist for the User object to be created.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "tags": {
                          "description": "List of permissions tags to associate with the user. This determines the level of\naccess to the RabbitMQ management UI granted to the user. Omitting this field will\nlead to a user than can still connect to the cluster through messaging protocols,\nbut cannot perform any management actions.\nFor more information, see https://www.rabbitmq.com/management.html#permissions.",
                          "type": "array",
                          "items": {
                            "description": "UserTag defines the level of access to the management UI allocated to the user.\nFor more information, see https://www.rabbitmq.com/management.html#permissions.",
                            "type": "string",
                            "enum": [
                              "management",
                              "policymaker",
                              "monitoring",
                              "administrator"
                            ]
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status exposes the observed state of the User object.",
                      "type": "object",
                      "required": [
                        "username"
                      ],
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "credentials": {
                          "description": "Provides a reference to a Secret object containing the user credentials.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                              "type": "string"
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this User. It corresponds to the\nUser's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "username": {
                          "description": "Provide rabbitmq Username",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "users",
            "singular": "user",
            "kind": "User",
            "listKind": "UserList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "User",
      "apiGroup": "rabbitmq.com",
      "apiKind": "User",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "com.rabbitmq.v1beta1.Vhost",
      "definition": {
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "spec": {
            "description": "VhostSpec defines the desired state of Vhost",
            "type": "object",
            "required": [
              "name",
              "rabbitmqClusterReference"
            ],
            "properties": {
              "defaultQueueType": {
                "description": "Default queue type for this vhost; can be set to quorum, classic or stream.\nSupported in RabbitMQ 3.11.12 or above.",
                "type": "string",
                "enum": [
                  "quorum",
                  "classic",
                  "stream"
                ]
              },
              "name": {
                "description": "Name of the vhost; see https://www.rabbitmq.com/vhosts.html.",
                "type": "string"
              },
              "rabbitmqClusterReference": {
                "description": "Reference to the RabbitmqCluster that the vhost will be created in.\nRequired property.",
                "type": "object",
                "properties": {
                  "connectionSecret": {
                    "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                        "type": "string"
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  },
                  "name": {
                    "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                    "type": "string"
                  }
                }
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tracing": {
                "type": "boolean"
              }
            }
          },
          "status": {
            "description": "VhostStatus defines the observed state of Vhost",
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "The last time this Condition status changed.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Full text reason for current status of the condition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "One word, camel-case reason for current status of the condition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "True, False, or Unknown",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "observedGeneration is the most recent successful generation observed for this Vhost. It corresponds to the\nVhost's generation, which is updated on mutation by the API Server.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "description": "Vhost is the Schema for the vhosts API",
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "rabbitmq.com",
            "kind": "Vhost",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "vhosts.rabbitmq.com"
        },
        "spec": {
          "group": "rabbitmq.com",
          "names": {
            "plural": "vhosts",
            "singular": "vhost",
            "kind": "Vhost",
            "listKind": "VhostList",
            "categories": [
              "rabbitmq"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Vhost is the Schema for the vhosts API",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "VhostSpec defines the desired state of Vhost",
                      "type": "object",
                      "required": [
                        "name",
                        "rabbitmqClusterReference"
                      ],
                      "properties": {
                        "defaultQueueType": {
                          "description": "Default queue type for this vhost; can be set to quorum, classic or stream.\nSupported in RabbitMQ 3.11.12 or above.",
                          "type": "string",
                          "enum": [
                            "quorum",
                            "classic",
                            "stream"
                          ]
                        },
                        "name": {
                          "description": "Name of the vhost; see https://www.rabbitmq.com/vhosts.html.",
                          "type": "string"
                        },
                        "rabbitmqClusterReference": {
                          "description": "Reference to the RabbitmqCluster that the vhost will be created in.\nRequired property.",
                          "type": "object",
                          "properties": {
                            "connectionSecret": {
                              "description": "Secret contains the http management uri for the RabbitMQ cluster.\nThe Secret must contain the key `uri`, `username` and `password` or operator will error.\nHave to set either name or connectionSecret, but not both.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                                  "type": "string"
                                }
                              },
                              "x-kubernetes-map-type": "atomic"
                            },
                            "name": {
                              "description": "The name of the RabbitMQ cluster to reference.\nHave to set either name or connectionSecret, but not both.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "The namespace of the RabbitMQ cluster to reference.\nDefaults to the namespace of the requested resource if omitted.",
                              "type": "string"
                            }
                          }
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "tracing": {
                          "type": "boolean"
                        }
                      }
                    },
                    "status": {
                      "description": "VhostStatus defines the observed state of Vhost",
                      "type": "object",
                      "properties": {
                        "conditions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "The last time this Condition status changed.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "Full text reason for current status of the condition.",
                                "type": "string"
                              },
                              "reason": {
                                "description": "One word, camel-case reason for current status of the condition.",
                                "type": "string"
                              },
                              "status": {
                                "description": "True, False, or Unknown",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type indicates the scope of the custom resource status addressed by the condition.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "observedGeneration": {
                          "description": "observedGeneration is the most recent successful generation observed for this Vhost. It corresponds to the\nVhost's generation, which is updated on mutation by the API Server.",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "vhosts",
            "singular": "vhost",
            "kind": "Vhost",
            "listKind": "VhostList",
            "categories": [
              "rabbitmq"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Vhost",
      "apiGroup": "rabbitmq.com",
      "apiKind": "Vhost",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "rabbitmq",
      "sub": "rabbitmq",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    }
  ]
}