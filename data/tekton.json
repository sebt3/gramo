{
  "name": "tekton",
  "objects": [
    {
      "alternatives": [],
      "name": "dev.tekton.v1.Pipeline",
      "definition": {
        "properties": {
          "spec": {
            "description": "PipelineSpec defines the desired state of Pipeline.",
            "type": "object",
            "properties": {
              "description": {
                "description": "Description is a user-facing description of the pipeline that may be used to populate a UI.",
                "type": "string"
              },
              "displayName": {
                "description": "DisplayName is a user-facing name of the pipeline that may be used to populate a UI.",
                "type": "string"
              },
              "finally": {
                "description": "Finally declares the list of Tasks that execute just before leaving the Pipeline i.e. either after all Tasks are finished executing successfully or after a failure which would result in ending the Pipeline",
                "type": "array",
                "items": {
                  "description": "PipelineTask defines a task in a Pipeline, passing inputs from both Params and from the output of previous tasks.",
                  "type": "object",
                  "properties": {
                    "description": {
                      "description": "Description is the description of this task within the context of a Pipeline. This description may be used to populate a UI.",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "DisplayName is the display name of this task within the context of a Pipeline. This display name may be used to populate a UI.",
                      "type": "string"
                    },
                    "matrix": {
                      "description": "Matrix is used to fan out Tasks in a Pipeline",
                      "type": "object",
                      "properties": {
                        "include": {
                          "description": "Include is a list of IncludeParams which allows passing in specific combinations of Parameters into the Matrix.",
                          "type": "array",
                          "items": {
                            "description": "IncludeParams allows passing in a specific combinations of Parameters into the Matrix.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name the specified combination",
                                "type": "string"
                              },
                              "params": {
                                "description": "Params takes only `Parameters` of type `\"string\"` The names of the `params` must match the names of the `params` in the underlying `Task`",
                                "type": "array",
                                "items": {
                                  "description": "Param declares an ParamValues to use for the parameter called name.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "value": {
                                      "description": "ResultValue is a type alias of ParamValue",
                                      "type": "object",
                                      "required": [
                                        "Type",
                                        "StringVal",
                                        "ArrayVal",
                                        "ObjectVal"
                                      ],
                                      "properties": {
                                        "ArrayVal": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "default": ""
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "ObjectVal": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string",
                                            "default": ""
                                          }
                                        },
                                        "StringVal": {
                                          "description": "Represents the stored type of ParamValues.",
                                          "type": "string",
                                          "default": ""
                                        },
                                        "Type": {
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "params": {
                          "description": "Params is a list of parameters used to fan out the pipelineTask Params takes only `Parameters` of type `\"array\"` Each array element is supplied to the `PipelineTask` by substituting `params` of type `\"string\"` in the underlying `Task`. The names of the `params` in the `Matrix` must match the names of the `params` in the underlying `Task` that they will be substituting.",
                          "type": "array",
                          "items": {
                            "description": "Param declares an ParamValues to use for the parameter called name.",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "value": {
                                "description": "ResultValue is a type alias of ParamValue",
                                "type": "object",
                                "required": [
                                  "Type",
                                  "StringVal",
                                  "ArrayVal",
                                  "ObjectVal"
                                ],
                                "properties": {
                                  "ArrayVal": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "ObjectVal": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string",
                                      "default": ""
                                    }
                                  },
                                  "StringVal": {
                                    "description": "Represents the stored type of ParamValues.",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "Type": {
                                    "type": "string",
                                    "default": ""
                                  }
                                }
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "name": {
                      "description": "Name is the name of this task within the context of a Pipeline. Name is used as a coordinate with the `from` and `runAfter` fields to establish the execution order of tasks relative to one another.",
                      "type": "string"
                    },
                    "onError": {
                      "description": "OnError defines the exiting behavior of a PipelineRun on error can be set to [ continue | stopAndFail ]",
                      "type": "string"
                    },
                    "params": {
                      "description": "Parameters declares parameters passed to this task.",
                      "type": "array",
                      "items": {
                        "description": "Param declares an ParamValues to use for the parameter called name.",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "default": ""
                          },
                          "value": {
                            "description": "ResultValue is a type alias of ParamValue",
                            "type": "object",
                            "required": [
                              "Type",
                              "StringVal",
                              "ArrayVal",
                              "ObjectVal"
                            ],
                            "properties": {
                              "ArrayVal": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "ObjectVal": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string",
                                  "default": ""
                                }
                              },
                              "StringVal": {
                                "description": "Represents the stored type of ParamValues.",
                                "type": "string",
                                "default": ""
                              },
                              "Type": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "pipelineRef": {
                      "description": "PipelineRef can be used to refer to a specific instance of a Pipeline.",
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "description": "API version of the referent",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        }
                      }
                    },
                    "pipelineSpec": {
                      "description": "PipelineSpec is a specification of a pipeline Note: PipelineSpec is in preview mode and not yet supported",
                      "$ref": "#/definitions/v1.PipelineSpec"
                    },
                    "retries": {
                      "description": "Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False",
                      "type": "integer",
                      "format": "int32"
                    },
                    "runAfter": {
                      "description": "RunAfter is the list of PipelineTask names that should be executed before this Task executes. (Used to force a specific ordering in graph execution.)",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "taskRef": {
                      "description": "TaskRef can be used to refer to a specific instance of a task.",
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "description": "API version of the referent Note: A Task with non-empty APIVersion and Kind is considered a Custom Task",
                          "type": "string"
                        },
                        "kind": {
                          "description": "TaskKind indicates the Kind of the Task: 1. Namespaced Task when Kind is set to \"Task\". If Kind is \"\", it defaults to \"Task\". 2. Custom Task when Kind is non-empty and APIVersion is non-empty",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        }
                      }
                    },
                    "taskSpec": {
                      "description": "EmbeddedTask is used to define a Task inline within a Pipeline's PipelineTasks.",
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "description": {
                          "description": "Description is a user-facing description of the task that may be used to populate a UI.",
                          "type": "string"
                        },
                        "displayName": {
                          "description": "DisplayName is a user-facing name of the task that may be used to populate a UI.",
                          "type": "string"
                        },
                        "kind": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "PipelineTaskMetadata contains the labels or annotations for an EmbeddedTask",
                          "type": "object",
                          "properties": {
                            "annotations": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "labels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "params": {
                          "description": "Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.",
                          "type": "array",
                          "items": {
                            "description": "ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "default": {
                                "description": "ResultValue is a type alias of ParamValue",
                                "type": "object",
                                "required": [
                                  "Type",
                                  "StringVal",
                                  "ArrayVal",
                                  "ObjectVal"
                                ],
                                "properties": {
                                  "ArrayVal": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "ObjectVal": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string",
                                      "default": ""
                                    }
                                  },
                                  "StringVal": {
                                    "description": "Represents the stored type of ParamValues.",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "Type": {
                                    "type": "string",
                                    "default": ""
                                  }
                                }
                              },
                              "description": {
                                "description": "Description is a user-facing description of the parameter that may be used to populate a UI.",
                                "type": "string"
                              },
                              "enum": {
                                "description": "Enum declares a set of allowed param input values for tasks/pipelines that can be validated. If Enum is not set, no input validation is performed for the param.",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                }
                              },
                              "name": {
                                "description": "Name declares the name by which a parameter is referenced.",
                                "type": "string",
                                "default": ""
                              },
                              "properties": {
                                "description": "Properties is the JSON Schema properties to support key-value pairs parameter.",
                                "type": "object",
                                "additionalProperties": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.PropertySpec"
                                }
                              },
                              "type": {
                                "description": "Type is the user-specified type of the parameter. The possible types are currently \"string\", \"array\" and \"object\", and \"string\" is the default.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "results": {
                          "description": "Results are values that this Task can output",
                          "type": "array",
                          "items": {
                            "description": "TaskResult used to describe the results of a task",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "description": {
                                "description": "Description is a human-readable description of the result",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name the given name",
                                "type": "string",
                                "default": ""
                              },
                              "properties": {
                                "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                                "type": "object",
                                "additionalProperties": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.PropertySpec"
                                }
                              },
                              "type": {
                                "description": "Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.",
                                "type": "string"
                              },
                              "value": {
                                "description": "ResultValue is a type alias of ParamValue",
                                "type": "object",
                                "required": [
                                  "Type",
                                  "StringVal",
                                  "ArrayVal",
                                  "ObjectVal"
                                ],
                                "properties": {
                                  "ArrayVal": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "ObjectVal": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string",
                                      "default": ""
                                    }
                                  },
                                  "StringVal": {
                                    "description": "Represents the stored type of ParamValues.",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "Type": {
                                    "type": "string",
                                    "default": ""
                                  }
                                }
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "sidecars": {
                          "description": "Sidecars are run alongside the Task's step containers. They begin before the steps start and end after the steps complete.",
                          "type": "array",
                          "items": {
                            "description": "Sidecar has nearly the same data structure as Step but does not have the ability to timeout.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "args": {
                                "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "command": {
                                "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "computeResources": {
                                "description": "ComputeResources required by this Sidecar. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "default": {},
                                "$ref": "#/definitions/v1.ResourceRequirements"
                              },
                              "env": {
                                "description": "List of environment variables to set in the Sidecar. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.EnvVar"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "name",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "envFrom": {
                                "description": "List of sources to populate environment variables in the Sidecar. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.EnvFromSource"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "image": {
                                "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                                "type": "string"
                              },
                              "imagePullPolicy": {
                                "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                "type": "string"
                              },
                              "lifecycle": {
                                "description": "Actions that the management system should take in response to Sidecar lifecycle events. Cannot be updated.",
                                "$ref": "#/definitions/v1.Lifecycle"
                              },
                              "livenessProbe": {
                                "description": "Periodic probe of Sidecar liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "$ref": "#/definitions/v1.Probe"
                              },
                              "name": {
                                "description": "Name of the Sidecar specified as a DNS_LABEL. Each Sidecar in a Task must have a unique name (DNS_LABEL). Cannot be updated.",
                                "type": "string",
                                "default": ""
                              },
                              "ports": {
                                "description": "List of ports to expose from the Sidecar. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.ContainerPort"
                                },
                                "x-kubernetes-list-map-keys": [
                                  "containerPort",
                                  "protocol"
                                ],
                                "x-kubernetes-list-type": "map",
                                "x-kubernetes-patch-merge-key": "containerPort",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "readinessProbe": {
                                "description": "Periodic probe of Sidecar service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "$ref": "#/definitions/v1.Probe"
                              },
                              "script": {
                                "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command or Args.",
                                "type": "string"
                              },
                              "securityContext": {
                                "description": "SecurityContext defines the security options the Sidecar should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                                "$ref": "#/definitions/v1.SecurityContext"
                              },
                              "startupProbe": {
                                "description": "StartupProbe indicates that the Pod the Sidecar is running in has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "$ref": "#/definitions/v1.Probe"
                              },
                              "stdin": {
                                "description": "Whether this Sidecar should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the Sidecar will always result in EOF. Default is false.",
                                "type": "boolean"
                              },
                              "stdinOnce": {
                                "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the Sidecar is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                                "type": "boolean"
                              },
                              "terminationMessagePath": {
                                "description": "Optional: Path at which the file to which the Sidecar's termination message will be written is mounted into the Sidecar's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                                "type": "string"
                              },
                              "terminationMessagePolicy": {
                                "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the Sidecar status message on both success and failure. FallbackToLogsOnError will use the last chunk of Sidecar log output if the termination message file is empty and the Sidecar exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                                "type": "string"
                              },
                              "tty": {
                                "description": "Whether this Sidecar should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                                "type": "boolean"
                              },
                              "volumeDevices": {
                                "description": "volumeDevices is the list of block devices to be used by the Sidecar.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.VolumeDevice"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "devicePath",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "volumeMounts": {
                                "description": "Volumes to mount into the Sidecar's filesystem. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.VolumeMount"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "mountPath",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "workingDir": {
                                "description": "Sidecar's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                "type": "string"
                              },
                              "workspaces": {
                                "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Sidecar wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                                "type": "array",
                                "items": {
                                  "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "mountPath"
                                  ],
                                  "properties": {
                                    "mountPath": {
                                      "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "name": {
                                      "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                                      "type": "string",
                                      "default": ""
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "spec": {
                          "description": "Spec is a specification of a custom task",
                          "default": {},
                          "$ref": "#/definitions/k8s.io.apimachinery.pkg.runtime.RawExtension"
                        },
                        "stepTemplate": {
                          "description": "StepTemplate is a template for a Step",
                          "type": "object",
                          "properties": {
                            "args": {
                              "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "default": ""
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "command": {
                              "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "default": ""
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "computeResources": {
                              "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "default": {},
                              "$ref": "#/definitions/v1.ResourceRequirements"
                            },
                            "env": {
                              "description": "List of environment variables to set in the Step. Cannot be updated.",
                              "type": "array",
                              "items": {
                                "default": {},
                                "$ref": "#/definitions/v1.EnvVar"
                              },
                              "x-kubernetes-list-type": "atomic",
                              "x-kubernetes-patch-merge-key": "name",
                              "x-kubernetes-patch-strategy": "merge"
                            },
                            "envFrom": {
                              "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                              "type": "array",
                              "items": {
                                "default": {},
                                "$ref": "#/definitions/v1.EnvFromSource"
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "image": {
                              "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                              "type": "string"
                            },
                            "imagePullPolicy": {
                              "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                              "type": "string"
                            },
                            "securityContext": {
                              "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                              "$ref": "#/definitions/v1.SecurityContext"
                            },
                            "volumeDevices": {
                              "description": "volumeDevices is the list of block devices to be used by the Step.",
                              "type": "array",
                              "items": {
                                "default": {},
                                "$ref": "#/definitions/v1.VolumeDevice"
                              },
                              "x-kubernetes-list-type": "atomic",
                              "x-kubernetes-patch-merge-key": "devicePath",
                              "x-kubernetes-patch-strategy": "merge"
                            },
                            "volumeMounts": {
                              "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                              "type": "array",
                              "items": {
                                "default": {},
                                "$ref": "#/definitions/v1.VolumeMount"
                              },
                              "x-kubernetes-list-type": "atomic",
                              "x-kubernetes-patch-merge-key": "mountPath",
                              "x-kubernetes-patch-strategy": "merge"
                            },
                            "workingDir": {
                              "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                              "type": "string"
                            }
                          }
                        },
                        "steps": {
                          "description": "Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.",
                          "type": "array",
                          "items": {
                            "description": "Step runs a subcomponent of a Task",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "args": {
                                "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "command": {
                                "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "computeResources": {
                                "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "default": {},
                                "$ref": "#/definitions/v1.ResourceRequirements"
                              },
                              "env": {
                                "description": "List of environment variables to set in the Step. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.EnvVar"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "name",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "envFrom": {
                                "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.EnvFromSource"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "image": {
                                "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
                                "type": "string"
                              },
                              "imagePullPolicy": {
                                "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the Step specified as a DNS_LABEL. Each Step in a Task must have a unique name.",
                                "type": "string",
                                "default": ""
                              },
                              "onError": {
                                "description": "OnError defines the exiting behavior of a container on error can be set to [ continue | stopAndFail ]",
                                "type": "string"
                              },
                              "params": {
                                "description": "Params declares parameters passed to this step action.",
                                "type": "array",
                                "items": {
                                  "description": "Param declares an ParamValues to use for the parameter called name.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "value": {
                                      "description": "ResultValue is a type alias of ParamValue",
                                      "type": "object",
                                      "required": [
                                        "Type",
                                        "StringVal",
                                        "ArrayVal",
                                        "ObjectVal"
                                      ],
                                      "properties": {
                                        "ArrayVal": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "default": ""
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "ObjectVal": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string",
                                            "default": ""
                                          }
                                        },
                                        "StringVal": {
                                          "description": "Represents the stored type of ParamValues.",
                                          "type": "string",
                                          "default": ""
                                        },
                                        "Type": {
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "ref": {
                                "description": "Ref can be used to refer to a specific instance of a StepAction.",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referenced step",
                                    "type": "string"
                                  }
                                }
                              },
                              "results": {
                                "description": "Results declares StepResults produced by the Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.\n\nIt can be used in an inlined Step when used to store Results to $(step.results.resultName.path). It cannot be used when referencing StepActions using [v1.Step.Ref]. The Results declared by the StepActions will be stored here instead.",
                                "type": "array",
                                "items": {
                                  "description": "StepResult used to describe the Results of a Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "description": {
                                      "description": "Description is a human-readable description of the result",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name the given name",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "properties": {
                                      "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "default": {},
                                        "$ref": "#/definitions/v1.PropertySpec"
                                      }
                                    },
                                    "type": {
                                      "description": "The possible types are 'string', 'array', and 'object', with 'string' as the default.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "script": {
                                "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.",
                                "type": "string"
                              },
                              "securityContext": {
                                "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                                "$ref": "#/definitions/v1.SecurityContext"
                              },
                              "stderrConfig": {
                                "description": "StepOutputConfig stores configuration for a step output stream.",
                                "type": "object",
                                "properties": {
                                  "path": {
                                    "description": "Path to duplicate stdout stream to on container's local filesystem.",
                                    "type": "string"
                                  }
                                }
                              },
                              "stdoutConfig": {
                                "description": "StepOutputConfig stores configuration for a step output stream.",
                                "type": "object",
                                "properties": {
                                  "path": {
                                    "description": "Path to duplicate stdout stream to on container's local filesystem.",
                                    "type": "string"
                                  }
                                }
                              },
                              "timeout": {
                                "description": "Timeout is the time after which the step times out. Defaults to never. Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                                "$ref": "#/definitions/v1.Duration"
                              },
                              "volumeDevices": {
                                "description": "volumeDevices is the list of block devices to be used by the Step.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.VolumeDevice"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "devicePath",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "volumeMounts": {
                                "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.VolumeMount"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "mountPath",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "workingDir": {
                                "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                "type": "string"
                              },
                              "workspaces": {
                                "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Step wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                                "type": "array",
                                "items": {
                                  "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "mountPath"
                                  ],
                                  "properties": {
                                    "mountPath": {
                                      "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "name": {
                                      "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                                      "type": "string",
                                      "default": ""
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "volumes": {
                          "description": "Volumes is a collection of volumes that are available to mount into the steps of the build.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.Volume"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "workspaces": {
                          "description": "Workspaces are the volumes that this Task requires.",
                          "type": "array",
                          "items": {
                            "description": "WorkspaceDeclaration is a declaration of a volume that a Task requires.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "description": {
                                "description": "Description is an optional human readable description of this volume.",
                                "type": "string"
                              },
                              "mountPath": {
                                "description": "MountPath overrides the directory that the volume will be made available at.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name by which you can bind the volume at runtime.",
                                "type": "string",
                                "default": ""
                              },
                              "optional": {
                                "description": "Optional marks a Workspace as not being required in TaskRuns. By default this field is false and so declared workspaces are required.",
                                "type": "boolean"
                              },
                              "readOnly": {
                                "description": "ReadOnly dictates whether a mounted volume is writable. By default this field is false and so mounted volumes are writable.",
                                "type": "boolean"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "timeout": {
                      "description": "Time after which the TaskRun times out. Defaults to 1 hour. Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                      "$ref": "#/definitions/v1.Duration"
                    },
                    "when": {
                      "description": "When is a list of when expressions that need to be true for the task to run",
                      "type": "array",
                      "items": {
                        "description": "WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run to determine whether the Task should be executed or skipped",
                        "type": "object",
                        "properties": {
                          "cel": {
                            "description": "CEL is a string of Common Language Expression, which can be used to conditionally execute the task based on the result of the expression evaluation More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md",
                            "type": "string"
                          },
                          "input": {
                            "description": "Input is the string for guard checking which can be a static input or an output from a parent Task",
                            "type": "string"
                          },
                          "operator": {
                            "description": "Operator that represents an Input's relationship to the values",
                            "type": "string"
                          },
                          "values": {
                            "description": "Values is an array of strings, which is compared against the input, for guard checking It must be non-empty",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "default": ""
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        }
                      }
                    },
                    "workspaces": {
                      "description": "Workspaces maps workspaces from the pipeline spec to the workspaces declared in the Task.",
                      "type": "array",
                      "items": {
                        "description": "WorkspacePipelineTaskBinding describes how a workspace passed into the pipeline should be mapped to a task's declared workspace.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name is the name of the workspace as declared by the task",
                            "type": "string",
                            "default": ""
                          },
                          "subPath": {
                            "description": "SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory).",
                            "type": "string"
                          },
                          "workspace": {
                            "description": "Workspace is the name of the workspace declared by the pipeline",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "params": {
                "description": "Params declares a list of input parameters that must be supplied when this Pipeline is run.",
                "type": "array",
                "items": {
                  "description": "ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "default": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "description": {
                      "description": "Description is a user-facing description of the parameter that may be used to populate a UI.",
                      "type": "string"
                    },
                    "enum": {
                      "description": "Enum declares a set of allowed param input values for tasks/pipelines that can be validated. If Enum is not set, no input validation is performed for the param.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      }
                    },
                    "name": {
                      "description": "Name declares the name by which a parameter is referenced.",
                      "type": "string",
                      "default": ""
                    },
                    "properties": {
                      "description": "Properties is the JSON Schema properties to support key-value pairs parameter.",
                      "type": "object",
                      "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/v1.PropertySpec"
                      }
                    },
                    "type": {
                      "description": "Type is the user-specified type of the parameter. The possible types are currently \"string\", \"array\" and \"object\", and \"string\" is the default.",
                      "type": "string"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "results": {
                "description": "Results are values that this pipeline can output once run",
                "type": "array",
                "items": {
                  "description": "PipelineResult used to describe the results of a pipeline",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "description": {
                      "description": "Description is a human-readable description of the result",
                      "type": "string",
                      "default": ""
                    },
                    "name": {
                      "description": "Name the given name",
                      "type": "string",
                      "default": ""
                    },
                    "type": {
                      "description": "Type is the user-specified type of the result. The possible types are 'string', 'array', and 'object', with 'string' as the default. 'array' and 'object' types are alpha features.",
                      "type": "string"
                    },
                    "value": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "tasks": {
                "description": "Tasks declares the graph of Tasks that execute when this Pipeline is run.",
                "type": "array",
                "items": {
                  "description": "PipelineTask defines a task in a Pipeline, passing inputs from both Params and from the output of previous tasks.",
                  "type": "object",
                  "properties": {
                    "description": {
                      "description": "Description is the description of this task within the context of a Pipeline. This description may be used to populate a UI.",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "DisplayName is the display name of this task within the context of a Pipeline. This display name may be used to populate a UI.",
                      "type": "string"
                    },
                    "matrix": {
                      "description": "Matrix is used to fan out Tasks in a Pipeline",
                      "type": "object",
                      "properties": {
                        "include": {
                          "description": "Include is a list of IncludeParams which allows passing in specific combinations of Parameters into the Matrix.",
                          "type": "array",
                          "items": {
                            "description": "IncludeParams allows passing in a specific combinations of Parameters into the Matrix.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "description": "Name the specified combination",
                                "type": "string"
                              },
                              "params": {
                                "description": "Params takes only `Parameters` of type `\"string\"` The names of the `params` must match the names of the `params` in the underlying `Task`",
                                "type": "array",
                                "items": {
                                  "description": "Param declares an ParamValues to use for the parameter called name.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "value": {
                                      "description": "ResultValue is a type alias of ParamValue",
                                      "type": "object",
                                      "required": [
                                        "Type",
                                        "StringVal",
                                        "ArrayVal",
                                        "ObjectVal"
                                      ],
                                      "properties": {
                                        "ArrayVal": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "default": ""
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "ObjectVal": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string",
                                            "default": ""
                                          }
                                        },
                                        "StringVal": {
                                          "description": "Represents the stored type of ParamValues.",
                                          "type": "string",
                                          "default": ""
                                        },
                                        "Type": {
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "params": {
                          "description": "Params is a list of parameters used to fan out the pipelineTask Params takes only `Parameters` of type `\"array\"` Each array element is supplied to the `PipelineTask` by substituting `params` of type `\"string\"` in the underlying `Task`. The names of the `params` in the `Matrix` must match the names of the `params` in the underlying `Task` that they will be substituting.",
                          "type": "array",
                          "items": {
                            "description": "Param declares an ParamValues to use for the parameter called name.",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "value": {
                                "description": "ResultValue is a type alias of ParamValue",
                                "type": "object",
                                "required": [
                                  "Type",
                                  "StringVal",
                                  "ArrayVal",
                                  "ObjectVal"
                                ],
                                "properties": {
                                  "ArrayVal": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "ObjectVal": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string",
                                      "default": ""
                                    }
                                  },
                                  "StringVal": {
                                    "description": "Represents the stored type of ParamValues.",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "Type": {
                                    "type": "string",
                                    "default": ""
                                  }
                                }
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "name": {
                      "description": "Name is the name of this task within the context of a Pipeline. Name is used as a coordinate with the `from` and `runAfter` fields to establish the execution order of tasks relative to one another.",
                      "type": "string"
                    },
                    "onError": {
                      "description": "OnError defines the exiting behavior of a PipelineRun on error can be set to [ continue | stopAndFail ]",
                      "type": "string"
                    },
                    "params": {
                      "description": "Parameters declares parameters passed to this task.",
                      "type": "array",
                      "items": {
                        "description": "Param declares an ParamValues to use for the parameter called name.",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "default": ""
                          },
                          "value": {
                            "description": "ResultValue is a type alias of ParamValue",
                            "type": "object",
                            "required": [
                              "Type",
                              "StringVal",
                              "ArrayVal",
                              "ObjectVal"
                            ],
                            "properties": {
                              "ArrayVal": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "ObjectVal": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string",
                                  "default": ""
                                }
                              },
                              "StringVal": {
                                "description": "Represents the stored type of ParamValues.",
                                "type": "string",
                                "default": ""
                              },
                              "Type": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "pipelineRef": {
                      "description": "PipelineRef can be used to refer to a specific instance of a Pipeline.",
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "description": "API version of the referent",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        }
                      }
                    },
                    "pipelineSpec": {
                      "description": "PipelineSpec is a specification of a pipeline Note: PipelineSpec is in preview mode and not yet supported",
                      "$ref": "#/definitions/v1.PipelineSpec"
                    },
                    "retries": {
                      "description": "Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False",
                      "type": "integer",
                      "format": "int32"
                    },
                    "runAfter": {
                      "description": "RunAfter is the list of PipelineTask names that should be executed before this Task executes. (Used to force a specific ordering in graph execution.)",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "taskRef": {
                      "description": "TaskRef can be used to refer to a specific instance of a task.",
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "description": "API version of the referent Note: A Task with non-empty APIVersion and Kind is considered a Custom Task",
                          "type": "string"
                        },
                        "kind": {
                          "description": "TaskKind indicates the Kind of the Task: 1. Namespaced Task when Kind is set to \"Task\". If Kind is \"\", it defaults to \"Task\". 2. Custom Task when Kind is non-empty and APIVersion is non-empty",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                          "type": "string"
                        }
                      }
                    },
                    "taskSpec": {
                      "description": "EmbeddedTask is used to define a Task inline within a Pipeline's PipelineTasks.",
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "description": {
                          "description": "Description is a user-facing description of the task that may be used to populate a UI.",
                          "type": "string"
                        },
                        "displayName": {
                          "description": "DisplayName is a user-facing name of the task that may be used to populate a UI.",
                          "type": "string"
                        },
                        "kind": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "PipelineTaskMetadata contains the labels or annotations for an EmbeddedTask",
                          "type": "object",
                          "properties": {
                            "annotations": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "labels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "params": {
                          "description": "Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.",
                          "type": "array",
                          "items": {
                            "description": "ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "default": {
                                "description": "ResultValue is a type alias of ParamValue",
                                "type": "object",
                                "required": [
                                  "Type",
                                  "StringVal",
                                  "ArrayVal",
                                  "ObjectVal"
                                ],
                                "properties": {
                                  "ArrayVal": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "ObjectVal": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string",
                                      "default": ""
                                    }
                                  },
                                  "StringVal": {
                                    "description": "Represents the stored type of ParamValues.",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "Type": {
                                    "type": "string",
                                    "default": ""
                                  }
                                }
                              },
                              "description": {
                                "description": "Description is a user-facing description of the parameter that may be used to populate a UI.",
                                "type": "string"
                              },
                              "enum": {
                                "description": "Enum declares a set of allowed param input values for tasks/pipelines that can be validated. If Enum is not set, no input validation is performed for the param.",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                }
                              },
                              "name": {
                                "description": "Name declares the name by which a parameter is referenced.",
                                "type": "string",
                                "default": ""
                              },
                              "properties": {
                                "description": "Properties is the JSON Schema properties to support key-value pairs parameter.",
                                "type": "object",
                                "additionalProperties": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.PropertySpec"
                                }
                              },
                              "type": {
                                "description": "Type is the user-specified type of the parameter. The possible types are currently \"string\", \"array\" and \"object\", and \"string\" is the default.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "results": {
                          "description": "Results are values that this Task can output",
                          "type": "array",
                          "items": {
                            "description": "TaskResult used to describe the results of a task",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "description": {
                                "description": "Description is a human-readable description of the result",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name the given name",
                                "type": "string",
                                "default": ""
                              },
                              "properties": {
                                "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                                "type": "object",
                                "additionalProperties": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.PropertySpec"
                                }
                              },
                              "type": {
                                "description": "Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.",
                                "type": "string"
                              },
                              "value": {
                                "description": "ResultValue is a type alias of ParamValue",
                                "type": "object",
                                "required": [
                                  "Type",
                                  "StringVal",
                                  "ArrayVal",
                                  "ObjectVal"
                                ],
                                "properties": {
                                  "ArrayVal": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "ObjectVal": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string",
                                      "default": ""
                                    }
                                  },
                                  "StringVal": {
                                    "description": "Represents the stored type of ParamValues.",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "Type": {
                                    "type": "string",
                                    "default": ""
                                  }
                                }
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "sidecars": {
                          "description": "Sidecars are run alongside the Task's step containers. They begin before the steps start and end after the steps complete.",
                          "type": "array",
                          "items": {
                            "description": "Sidecar has nearly the same data structure as Step but does not have the ability to timeout.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "args": {
                                "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "command": {
                                "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "computeResources": {
                                "description": "ComputeResources required by this Sidecar. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "default": {},
                                "$ref": "#/definitions/v1.ResourceRequirements"
                              },
                              "env": {
                                "description": "List of environment variables to set in the Sidecar. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.EnvVar"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "name",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "envFrom": {
                                "description": "List of sources to populate environment variables in the Sidecar. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.EnvFromSource"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "image": {
                                "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                                "type": "string"
                              },
                              "imagePullPolicy": {
                                "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                "type": "string"
                              },
                              "lifecycle": {
                                "description": "Actions that the management system should take in response to Sidecar lifecycle events. Cannot be updated.",
                                "$ref": "#/definitions/v1.Lifecycle"
                              },
                              "livenessProbe": {
                                "description": "Periodic probe of Sidecar liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "$ref": "#/definitions/v1.Probe"
                              },
                              "name": {
                                "description": "Name of the Sidecar specified as a DNS_LABEL. Each Sidecar in a Task must have a unique name (DNS_LABEL). Cannot be updated.",
                                "type": "string",
                                "default": ""
                              },
                              "ports": {
                                "description": "List of ports to expose from the Sidecar. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.ContainerPort"
                                },
                                "x-kubernetes-list-map-keys": [
                                  "containerPort",
                                  "protocol"
                                ],
                                "x-kubernetes-list-type": "map",
                                "x-kubernetes-patch-merge-key": "containerPort",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "readinessProbe": {
                                "description": "Periodic probe of Sidecar service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "$ref": "#/definitions/v1.Probe"
                              },
                              "script": {
                                "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command or Args.",
                                "type": "string"
                              },
                              "securityContext": {
                                "description": "SecurityContext defines the security options the Sidecar should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                                "$ref": "#/definitions/v1.SecurityContext"
                              },
                              "startupProbe": {
                                "description": "StartupProbe indicates that the Pod the Sidecar is running in has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "$ref": "#/definitions/v1.Probe"
                              },
                              "stdin": {
                                "description": "Whether this Sidecar should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the Sidecar will always result in EOF. Default is false.",
                                "type": "boolean"
                              },
                              "stdinOnce": {
                                "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the Sidecar is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                                "type": "boolean"
                              },
                              "terminationMessagePath": {
                                "description": "Optional: Path at which the file to which the Sidecar's termination message will be written is mounted into the Sidecar's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                                "type": "string"
                              },
                              "terminationMessagePolicy": {
                                "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the Sidecar status message on both success and failure. FallbackToLogsOnError will use the last chunk of Sidecar log output if the termination message file is empty and the Sidecar exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                                "type": "string"
                              },
                              "tty": {
                                "description": "Whether this Sidecar should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                                "type": "boolean"
                              },
                              "volumeDevices": {
                                "description": "volumeDevices is the list of block devices to be used by the Sidecar.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.VolumeDevice"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "devicePath",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "volumeMounts": {
                                "description": "Volumes to mount into the Sidecar's filesystem. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.VolumeMount"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "mountPath",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "workingDir": {
                                "description": "Sidecar's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                "type": "string"
                              },
                              "workspaces": {
                                "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Sidecar wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                                "type": "array",
                                "items": {
                                  "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "mountPath"
                                  ],
                                  "properties": {
                                    "mountPath": {
                                      "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "name": {
                                      "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                                      "type": "string",
                                      "default": ""
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "spec": {
                          "description": "Spec is a specification of a custom task",
                          "default": {},
                          "$ref": "#/definitions/k8s.io.apimachinery.pkg.runtime.RawExtension"
                        },
                        "stepTemplate": {
                          "description": "StepTemplate is a template for a Step",
                          "type": "object",
                          "properties": {
                            "args": {
                              "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "default": ""
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "command": {
                              "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "default": ""
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "computeResources": {
                              "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                              "default": {},
                              "$ref": "#/definitions/v1.ResourceRequirements"
                            },
                            "env": {
                              "description": "List of environment variables to set in the Step. Cannot be updated.",
                              "type": "array",
                              "items": {
                                "default": {},
                                "$ref": "#/definitions/v1.EnvVar"
                              },
                              "x-kubernetes-list-type": "atomic",
                              "x-kubernetes-patch-merge-key": "name",
                              "x-kubernetes-patch-strategy": "merge"
                            },
                            "envFrom": {
                              "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                              "type": "array",
                              "items": {
                                "default": {},
                                "$ref": "#/definitions/v1.EnvFromSource"
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "image": {
                              "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                              "type": "string"
                            },
                            "imagePullPolicy": {
                              "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                              "type": "string"
                            },
                            "securityContext": {
                              "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                              "$ref": "#/definitions/v1.SecurityContext"
                            },
                            "volumeDevices": {
                              "description": "volumeDevices is the list of block devices to be used by the Step.",
                              "type": "array",
                              "items": {
                                "default": {},
                                "$ref": "#/definitions/v1.VolumeDevice"
                              },
                              "x-kubernetes-list-type": "atomic",
                              "x-kubernetes-patch-merge-key": "devicePath",
                              "x-kubernetes-patch-strategy": "merge"
                            },
                            "volumeMounts": {
                              "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                              "type": "array",
                              "items": {
                                "default": {},
                                "$ref": "#/definitions/v1.VolumeMount"
                              },
                              "x-kubernetes-list-type": "atomic",
                              "x-kubernetes-patch-merge-key": "mountPath",
                              "x-kubernetes-patch-strategy": "merge"
                            },
                            "workingDir": {
                              "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                              "type": "string"
                            }
                          }
                        },
                        "steps": {
                          "description": "Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.",
                          "type": "array",
                          "items": {
                            "description": "Step runs a subcomponent of a Task",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "args": {
                                "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "command": {
                                "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "computeResources": {
                                "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "default": {},
                                "$ref": "#/definitions/v1.ResourceRequirements"
                              },
                              "env": {
                                "description": "List of environment variables to set in the Step. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.EnvVar"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "name",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "envFrom": {
                                "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.EnvFromSource"
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "image": {
                                "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
                                "type": "string"
                              },
                              "imagePullPolicy": {
                                "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the Step specified as a DNS_LABEL. Each Step in a Task must have a unique name.",
                                "type": "string",
                                "default": ""
                              },
                              "onError": {
                                "description": "OnError defines the exiting behavior of a container on error can be set to [ continue | stopAndFail ]",
                                "type": "string"
                              },
                              "params": {
                                "description": "Params declares parameters passed to this step action.",
                                "type": "array",
                                "items": {
                                  "description": "Param declares an ParamValues to use for the parameter called name.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "value"
                                  ],
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "value": {
                                      "description": "ResultValue is a type alias of ParamValue",
                                      "type": "object",
                                      "required": [
                                        "Type",
                                        "StringVal",
                                        "ArrayVal",
                                        "ObjectVal"
                                      ],
                                      "properties": {
                                        "ArrayVal": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "default": ""
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        },
                                        "ObjectVal": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string",
                                            "default": ""
                                          }
                                        },
                                        "StringVal": {
                                          "description": "Represents the stored type of ParamValues.",
                                          "type": "string",
                                          "default": ""
                                        },
                                        "Type": {
                                          "type": "string",
                                          "default": ""
                                        }
                                      }
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "ref": {
                                "description": "Ref can be used to refer to a specific instance of a StepAction.",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "description": "Name of the referenced step",
                                    "type": "string"
                                  }
                                }
                              },
                              "results": {
                                "description": "Results declares StepResults produced by the Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.\n\nIt can be used in an inlined Step when used to store Results to $(step.results.resultName.path). It cannot be used when referencing StepActions using [v1.Step.Ref]. The Results declared by the StepActions will be stored here instead.",
                                "type": "array",
                                "items": {
                                  "description": "StepResult used to describe the Results of a Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "description": {
                                      "description": "Description is a human-readable description of the result",
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name the given name",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "properties": {
                                      "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                                      "type": "object",
                                      "additionalProperties": {
                                        "default": {},
                                        "$ref": "#/definitions/v1.PropertySpec"
                                      }
                                    },
                                    "type": {
                                      "description": "The possible types are 'string', 'array', and 'object', with 'string' as the default.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "script": {
                                "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.",
                                "type": "string"
                              },
                              "securityContext": {
                                "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                                "$ref": "#/definitions/v1.SecurityContext"
                              },
                              "stderrConfig": {
                                "description": "StepOutputConfig stores configuration for a step output stream.",
                                "type": "object",
                                "properties": {
                                  "path": {
                                    "description": "Path to duplicate stdout stream to on container's local filesystem.",
                                    "type": "string"
                                  }
                                }
                              },
                              "stdoutConfig": {
                                "description": "StepOutputConfig stores configuration for a step output stream.",
                                "type": "object",
                                "properties": {
                                  "path": {
                                    "description": "Path to duplicate stdout stream to on container's local filesystem.",
                                    "type": "string"
                                  }
                                }
                              },
                              "timeout": {
                                "description": "Timeout is the time after which the step times out. Defaults to never. Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                                "$ref": "#/definitions/v1.Duration"
                              },
                              "volumeDevices": {
                                "description": "volumeDevices is the list of block devices to be used by the Step.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.VolumeDevice"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "devicePath",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "volumeMounts": {
                                "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                                "type": "array",
                                "items": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.VolumeMount"
                                },
                                "x-kubernetes-list-type": "atomic",
                                "x-kubernetes-patch-merge-key": "mountPath",
                                "x-kubernetes-patch-strategy": "merge"
                              },
                              "workingDir": {
                                "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                                "type": "string"
                              },
                              "workspaces": {
                                "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Step wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                                "type": "array",
                                "items": {
                                  "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "mountPath"
                                  ],
                                  "properties": {
                                    "mountPath": {
                                      "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "name": {
                                      "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                                      "type": "string",
                                      "default": ""
                                    }
                                  }
                                },
                                "x-kubernetes-list-type": "atomic"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "volumes": {
                          "description": "Volumes is a collection of volumes that are available to mount into the steps of the build.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.Volume"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "workspaces": {
                          "description": "Workspaces are the volumes that this Task requires.",
                          "type": "array",
                          "items": {
                            "description": "WorkspaceDeclaration is a declaration of a volume that a Task requires.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "description": {
                                "description": "Description is an optional human readable description of this volume.",
                                "type": "string"
                              },
                              "mountPath": {
                                "description": "MountPath overrides the directory that the volume will be made available at.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name by which you can bind the volume at runtime.",
                                "type": "string",
                                "default": ""
                              },
                              "optional": {
                                "description": "Optional marks a Workspace as not being required in TaskRuns. By default this field is false and so declared workspaces are required.",
                                "type": "boolean"
                              },
                              "readOnly": {
                                "description": "ReadOnly dictates whether a mounted volume is writable. By default this field is false and so mounted volumes are writable.",
                                "type": "boolean"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "timeout": {
                      "description": "Time after which the TaskRun times out. Defaults to 1 hour. Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                      "$ref": "#/definitions/v1.Duration"
                    },
                    "when": {
                      "description": "When is a list of when expressions that need to be true for the task to run",
                      "type": "array",
                      "items": {
                        "description": "WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run to determine whether the Task should be executed or skipped",
                        "type": "object",
                        "properties": {
                          "cel": {
                            "description": "CEL is a string of Common Language Expression, which can be used to conditionally execute the task based on the result of the expression evaluation More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md",
                            "type": "string"
                          },
                          "input": {
                            "description": "Input is the string for guard checking which can be a static input or an output from a parent Task",
                            "type": "string"
                          },
                          "operator": {
                            "description": "Operator that represents an Input's relationship to the values",
                            "type": "string"
                          },
                          "values": {
                            "description": "Values is an array of strings, which is compared against the input, for guard checking It must be non-empty",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "default": ""
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        }
                      }
                    },
                    "workspaces": {
                      "description": "Workspaces maps workspaces from the pipeline spec to the workspaces declared in the Task.",
                      "type": "array",
                      "items": {
                        "description": "WorkspacePipelineTaskBinding describes how a workspace passed into the pipeline should be mapped to a task's declared workspace.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name is the name of the workspace as declared by the task",
                            "type": "string",
                            "default": ""
                          },
                          "subPath": {
                            "description": "SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory).",
                            "type": "string"
                          },
                          "workspace": {
                            "description": "Workspace is the name of the workspace declared by the pipeline",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "workspaces": {
                "description": "Workspaces declares a set of named workspaces that are expected to be provided by a PipelineRun.",
                "type": "array",
                "items": {
                  "description": "WorkspacePipelineDeclaration creates a named slot in a Pipeline that a PipelineRun is expected to populate with a workspace binding.\n\nDeprecated: use PipelineWorkspaceDeclaration type instead",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "description": {
                      "description": "Description is a human readable string describing how the workspace will be used in the Pipeline. It can be useful to include a bit of detail about which tasks are intended to have access to the data on the workspace.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of a workspace to be provided by a PipelineRun.",
                      "type": "string",
                      "default": ""
                    },
                    "optional": {
                      "description": "Optional marks a Workspace as not being required in PipelineRuns. By default this field is false and so declared workspaces are required.",
                      "type": "boolean"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              }
            }
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "tekton.dev",
            "kind": "Pipeline",
            "version": "v1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "pipelines.tekton.dev",
          "uid": "db4013e9-1ad0-4b2b-ac67-8200157c3784",
          "resourceVersion": "149693905",
          "generation": 3,
          "creationTimestamp": "2024-03-20T05:58:12Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-pipelines",
            "pipeline.tekton.dev/release": "v0.57.0",
            "version": "v0.57.0"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:12Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:12Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:pipeline.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {},
                    "f:webhook": {
                      ".": {},
                      "f:clientConfig": {
                        ".": {},
                        "f:service": {
                          ".": {},
                          "f:name": {},
                          "f:namespace": {},
                          "f:port": {}
                        }
                      },
                      "f:conversionReviewVersions": {}
                    }
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            },
            {
              "manager": "webhook",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-25T16:45:14Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:spec": {
                  "f:conversion": {
                    "f:webhook": {
                      "f:clientConfig": {
                        "f:caBundle": {},
                        "f:service": {
                          "f:path": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "spec": {
          "group": "tekton.dev",
          "names": {
            "plural": "pipelines",
            "singular": "pipeline",
            "kind": "Pipeline",
            "listKind": "PipelineList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            },
            {
              "name": "v1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "Webhook",
            "webhook": {
              "clientConfig": {
                "service": {
                  "namespace": "tekton",
                  "name": "tekton-pipelines-webhook",
                  "path": "/resource-conversion",
                  "port": 443
                },
                "caBundle": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqRENDQWpPZ0F3SUJBZ0lSQU5xcG9yOEhmWWZPajJUV2VNUXROejh3Q2dZSUtvWkl6ajBFQXdJd1JERVUKTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmxiR2x1WlhNdApkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNQjRYRFRJME1ETXlOVEUyTkRVd09Gb1hEVEkwTURRd01URTJORFV3Ck9Gb3dSREVVTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmwKYkdsdVpYTXRkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRApRZ0FFeHAvMURsZE9PanA0Ynh5dHpGd0Mxb3N0eCtFUXZCaFo5ellIcGpNWDRQSHFwSFFkUzF2VHAzS3pCZTNuCkdTbTVoNDltQnhiajh3V3dBUWg2ZlgxbXJhT0NBUVF3Z2dFQU1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVWZyWllIRlRGWDkvemNiejZqTzBrc0pQN0VGTXdnWjRHQTFVZEVRU0JsakNCazRJWWRHVnJkRzl1CkxYQnBjR1ZzYVc1bGN5MTNaV0pvYjI5cmdoOTBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnIKZEc5dWdpTjBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnJkRzl1TG5OMlk0SXhkR1ZyZEc5dQpMWEJwY0dWc2FXNWxjeTEzWldKb2IyOXJMblJsYTNSdmJpNXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQUtCZ2dxCmhrak9QUVFEQWdOSEFEQkVBaUJOTlkydUk2Wmp1YVl6aGl5Ly9VNXYxejBLSUU0N1RHSEplRVhVZGttTGRBSWcKUzI0ZEhPejlDWXg5eGJnRFpmNXZxUW04TUwyU2wxMDg3SXBwcFQ3dmV4TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
              },
              "conversionReviewVersions": [
                "v1beta1",
                "v1"
              ]
            }
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:12Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:12Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "pipelines",
            "singular": "pipeline",
            "kind": "Pipeline",
            "listKind": "PipelineList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1"
          ]
        }
      },
      "short": "Pipeline",
      "apiGroup": "tekton.dev",
      "apiKind": "Pipeline",
      "apiVersion": "v1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.v1.PipelineRun",
      "definition": {
        "properties": {
          "spec": {
            "description": "PipelineRunSpec defines the desired state of PipelineRun",
            "type": "object",
            "properties": {
              "params": {
                "description": "Params is a list of parameter names and values.",
                "type": "array",
                "items": {
                  "description": "Param declares an ParamValues to use for the parameter called name.",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "default": ""
                    },
                    "value": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "pipelineRef": {
                "description": "PipelineRef can be used to refer to a specific instance of a Pipeline.",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                  }
                }
              },
              "pipelineSpec": {
                "$ref": "#/definitions/v1.PipelineSpec"
              },
              "status": {
                "description": "Used for cancelling a pipelinerun (and maybe more later on)",
                "type": "string"
              },
              "taskRunSpecs": {
                "description": "TaskRunSpecs holds a set of runtime specs",
                "type": "array",
                "items": {
                  "description": "PipelineTaskRunSpec  can be used to configure specific specs for a concrete Task",
                  "type": "object",
                  "properties": {
                    "computeResources": {
                      "description": "Compute resources to use for this TaskRun",
                      "$ref": "#/definitions/v1.ResourceRequirements"
                    },
                    "metadata": {
                      "description": "PipelineTaskMetadata contains the labels or annotations for an EmbeddedTask",
                      "type": "object",
                      "properties": {
                        "annotations": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        }
                      }
                    },
                    "pipelineTaskName": {
                      "type": "string"
                    },
                    "podTemplate": {
                      "description": "Template holds pod specific configuration",
                      "type": "object",
                      "properties": {
                        "affinity": {
                          "description": "If specified, the pod's scheduling constraints",
                          "$ref": "#/definitions/v1.Affinity"
                        },
                        "automountServiceAccountToken": {
                          "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted.",
                          "type": "boolean"
                        },
                        "dnsConfig": {
                          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
                          "$ref": "#/definitions/v1.PodDNSConfig"
                        },
                        "dnsPolicy": {
                          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.",
                          "type": "string"
                        },
                        "enableServiceLinks": {
                          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
                          "type": "boolean"
                        },
                        "env": {
                          "description": "List of environment variables that can be provided to the containers belonging to the pod.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvVar"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "name",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "hostAliases": {
                          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.HostAlias"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "hostNetwork": {
                          "description": "HostNetwork specifies whether the pod may use the node network namespace",
                          "type": "boolean"
                        },
                        "imagePullSecrets": {
                          "description": "ImagePullSecrets gives the name of the secret used by the pod to pull the image if specified",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.LocalObjectReference"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "nodeSelector": {
                          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "priorityClassName": {
                          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
                          "type": "string"
                        },
                        "runtimeClassName": {
                          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.",
                          "type": "string"
                        },
                        "schedulerName": {
                          "description": "SchedulerName specifies the scheduler to be used to dispatch the Pod",
                          "type": "string"
                        },
                        "securityContext": {
                          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                          "$ref": "#/definitions/v1.PodSecurityContext"
                        },
                        "tolerations": {
                          "description": "If specified, the pod's tolerations.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.Toleration"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "topologySpreadConstraints": {
                          "description": "TopologySpreadConstraints controls how Pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.TopologySpreadConstraint"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "volumes": {
                          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.Volume"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "name",
                          "x-kubernetes-patch-strategy": "merge,retainKeys"
                        }
                      }
                    },
                    "serviceAccountName": {
                      "type": "string"
                    },
                    "sidecarSpecs": {
                      "type": "array",
                      "items": {
                        "description": "TaskRunSidecarSpec is used to override the values of a Sidecar in the corresponding Task.",
                        "type": "object",
                        "required": [
                          "name",
                          "computeResources"
                        ],
                        "properties": {
                          "computeResources": {
                            "description": "The resource requirements to apply to the Sidecar.",
                            "default": {},
                            "$ref": "#/definitions/v1.ResourceRequirements"
                          },
                          "name": {
                            "description": "The name of the Sidecar to override.",
                            "type": "string",
                            "default": ""
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "stepSpecs": {
                      "type": "array",
                      "items": {
                        "description": "TaskRunStepSpec is used to override the values of a Step in the corresponding Task.",
                        "type": "object",
                        "required": [
                          "name",
                          "computeResources"
                        ],
                        "properties": {
                          "computeResources": {
                            "description": "The resource requirements to apply to the Step.",
                            "default": {},
                            "$ref": "#/definitions/v1.ResourceRequirements"
                          },
                          "name": {
                            "description": "The name of the Step to override.",
                            "type": "string",
                            "default": ""
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "taskRunTemplate": {
                "description": "PipelineTaskRunTemplate is used to specify run specifications for all Task in pipelinerun.",
                "type": "object",
                "properties": {
                  "podTemplate": {
                    "description": "Template holds pod specific configuration",
                    "type": "object",
                    "properties": {
                      "affinity": {
                        "description": "If specified, the pod's scheduling constraints",
                        "$ref": "#/definitions/v1.Affinity"
                      },
                      "automountServiceAccountToken": {
                        "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted.",
                        "type": "boolean"
                      },
                      "dnsConfig": {
                        "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
                        "$ref": "#/definitions/v1.PodDNSConfig"
                      },
                      "dnsPolicy": {
                        "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.",
                        "type": "string"
                      },
                      "enableServiceLinks": {
                        "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
                        "type": "boolean"
                      },
                      "env": {
                        "description": "List of environment variables that can be provided to the containers belonging to the pod.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.EnvVar"
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-patch-merge-key": "name",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "hostAliases": {
                        "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.HostAlias"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "hostNetwork": {
                        "description": "HostNetwork specifies whether the pod may use the node network namespace",
                        "type": "boolean"
                      },
                      "imagePullSecrets": {
                        "description": "ImagePullSecrets gives the name of the secret used by the pod to pull the image if specified",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.LocalObjectReference"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "nodeSelector": {
                        "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string",
                          "default": ""
                        }
                      },
                      "priorityClassName": {
                        "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
                        "type": "string"
                      },
                      "runtimeClassName": {
                        "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.",
                        "type": "string"
                      },
                      "schedulerName": {
                        "description": "SchedulerName specifies the scheduler to be used to dispatch the Pod",
                        "type": "string"
                      },
                      "securityContext": {
                        "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                        "$ref": "#/definitions/v1.PodSecurityContext"
                      },
                      "tolerations": {
                        "description": "If specified, the pod's tolerations.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.Toleration"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "topologySpreadConstraints": {
                        "description": "TopologySpreadConstraints controls how Pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.TopologySpreadConstraint"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "volumes": {
                        "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.Volume"
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-patch-merge-key": "name",
                        "x-kubernetes-patch-strategy": "merge,retainKeys"
                      }
                    }
                  },
                  "serviceAccountName": {
                    "type": "string"
                  }
                }
              },
              "timeouts": {
                "description": "TimeoutFields allows granular specification of pipeline, task, and finally timeouts",
                "type": "object",
                "properties": {
                  "finally": {
                    "description": "Finally sets the maximum allowed duration of this pipeline's finally",
                    "$ref": "#/definitions/v1.Duration"
                  },
                  "pipeline": {
                    "description": "Pipeline sets the maximum allowed duration for execution of the entire pipeline. The sum of individual timeouts for tasks and finally must not exceed this value.",
                    "$ref": "#/definitions/v1.Duration"
                  },
                  "tasks": {
                    "description": "Tasks sets the maximum allowed duration of this pipeline's tasks",
                    "$ref": "#/definitions/v1.Duration"
                  }
                }
              },
              "workspaces": {
                "description": "Workspaces holds a set of workspace bindings that must match names with those declared in the pipeline.",
                "type": "array",
                "items": {
                  "description": "WorkspaceBinding maps a Task's declared workspace to a Volume.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "configMap": {
                      "description": "ConfigMap represents a configMap that should populate this workspace.",
                      "$ref": "#/definitions/v1.ConfigMapVolumeSource"
                    },
                    "csi": {
                      "description": "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.",
                      "$ref": "#/definitions/v1.CSIVolumeSource"
                    },
                    "emptyDir": {
                      "description": "EmptyDir represents a temporary directory that shares a Task's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Either this OR PersistentVolumeClaim can be used.",
                      "$ref": "#/definitions/v1.EmptyDirVolumeSource"
                    },
                    "name": {
                      "description": "Name is the name of the workspace populated by the volume.",
                      "type": "string",
                      "default": ""
                    },
                    "persistentVolumeClaim": {
                      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Either this OR EmptyDir can be used.",
                      "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
                    },
                    "projected": {
                      "description": "Projected represents a projected volume that should populate this workspace.",
                      "$ref": "#/definitions/v1.ProjectedVolumeSource"
                    },
                    "secret": {
                      "description": "Secret represents a secret that should populate this workspace.",
                      "$ref": "#/definitions/v1.SecretVolumeSource"
                    },
                    "subPath": {
                      "description": "SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory).",
                      "type": "string"
                    },
                    "volumeClaimTemplate": {
                      "description": "VolumeClaimTemplate is a template for a claim that will be created in the same namespace. The PipelineRun controller is responsible for creating a unique claim for each instance of PipelineRun.",
                      "$ref": "#/definitions/v1.PersistentVolumeClaim"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              }
            }
          },
          "status": {
            "description": "PipelineRunStatus defines the observed state of PipelineRun",
            "type": "object",
            "properties": {
              "annotations": {
                "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "default": ""
                }
              },
              "childReferences": {
                "description": "list of TaskRun and Run names, PipelineTask names, and API versions/kinds for children of this PipelineRun.",
                "type": "array",
                "items": {
                  "description": "ChildStatusReference is used to point to the statuses of individual TaskRuns and Runs within this PipelineRun.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the TaskRun or Run this is referencing.",
                      "type": "string"
                    },
                    "pipelineTaskName": {
                      "description": "PipelineTaskName is the name of the PipelineTask this is referencing.",
                      "type": "string"
                    },
                    "whenExpressions": {
                      "description": "WhenExpressions is the list of checks guarding the execution of the PipelineTask",
                      "type": "array",
                      "items": {
                        "description": "WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run to determine whether the Task should be executed or skipped",
                        "type": "object",
                        "properties": {
                          "cel": {
                            "description": "CEL is a string of Common Language Expression, which can be used to conditionally execute the task based on the result of the expression evaluation More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md",
                            "type": "string"
                          },
                          "input": {
                            "description": "Input is the string for guard checking which can be a static input or an output from a parent Task",
                            "type": "string"
                          },
                          "operator": {
                            "description": "Operator that represents an Input's relationship to the values",
                            "type": "string"
                          },
                          "values": {
                            "description": "Values is an array of strings, which is compared against the input, for guard checking It must be non-empty",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "default": ""
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "completionTime": {
                "description": "CompletionTime is the time the PipelineRun completed.",
                "$ref": "#/definitions/v1.Time"
              },
              "conditions": {
                "description": "Conditions the latest available observations of a resource's current state.",
                "type": "array",
                "items": {
                  "default": {},
                  "$ref": "#/definitions/knative.Condition"
                },
                "x-kubernetes-patch-merge-key": "type",
                "x-kubernetes-patch-strategy": "merge"
              },
              "finallyStartTime": {
                "description": "FinallyStartTime is when all non-finally tasks have been completed and only finally tasks are being executed.",
                "$ref": "#/definitions/v1.Time"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
                "type": "integer",
                "format": "int64"
              },
              "pipelineSpec": {
                "description": "PipelineRunSpec contains the exact spec used to instantiate the run",
                "$ref": "#/definitions/v1.PipelineSpec"
              },
              "provenance": {
                "description": "Provenance contains metadata about resources used in the TaskRun/PipelineRun such as the source from where a remote build definition was fetched. This field aims to carry minimum amoumt of metadata in *Run status so that Tekton Chains can capture them in the provenance.",
                "type": "object",
                "properties": {
                  "featureFlags": {
                    "description": "FeatureFlags identifies the feature flags that were used during the task/pipeline run",
                    "$ref": "#/definitions/github.com.tektoncd.pipeline.pkg.apis.config.FeatureFlags"
                  },
                  "refSource": {
                    "description": "RefSource contains the information that can uniquely identify where a remote built definition came from i.e. Git repositories, Tekton Bundles in OCI registry and hub.",
                    "type": "object",
                    "properties": {
                      "digest": {
                        "description": "Digest is a collection of cryptographic digests for the contents of the artifact specified by URI. Example: {\"sha1\": \"f99d13e554ffcb696dee719fa85b695cb5b0f428\"}",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string",
                          "default": ""
                        }
                      },
                      "entryPoint": {
                        "description": "EntryPoint identifies the entry point into the build. This is often a path to a build definition file and/or a target label within that file. Example: \"task/git-clone/0.8/git-clone.yaml\"",
                        "type": "string"
                      },
                      "uri": {
                        "description": "URI indicates the identity of the source of the build definition. Example: \"https://github.com/tektoncd/catalog\"",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "results": {
                "description": "Results are the list of results written out by the pipeline task's containers",
                "type": "array",
                "items": {
                  "description": "PipelineRunResult used to describe the results of a pipeline",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the result's name as declared by the Pipeline",
                      "type": "string",
                      "default": ""
                    },
                    "value": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "skippedTasks": {
                "description": "list of tasks that were skipped due to when expressions evaluating to false",
                "type": "array",
                "items": {
                  "description": "SkippedTask is used to describe the Tasks that were skipped due to their When Expressions evaluating to False. This is a struct because we are looking into including more details about the When Expressions that caused this Task to be skipped.",
                  "type": "object",
                  "required": [
                    "name",
                    "reason"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name is the Pipeline Task name",
                      "type": "string",
                      "default": ""
                    },
                    "reason": {
                      "description": "Reason is the cause of the PipelineTask being skipped.",
                      "type": "string",
                      "default": ""
                    },
                    "whenExpressions": {
                      "description": "WhenExpressions is the list of checks guarding the execution of the PipelineTask",
                      "type": "array",
                      "items": {
                        "description": "WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run to determine whether the Task should be executed or skipped",
                        "type": "object",
                        "properties": {
                          "cel": {
                            "description": "CEL is a string of Common Language Expression, which can be used to conditionally execute the task based on the result of the expression evaluation More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md",
                            "type": "string"
                          },
                          "input": {
                            "description": "Input is the string for guard checking which can be a static input or an output from a parent Task",
                            "type": "string"
                          },
                          "operator": {
                            "description": "Operator that represents an Input's relationship to the values",
                            "type": "string"
                          },
                          "values": {
                            "description": "Values is an array of strings, which is compared against the input, for guard checking It must be non-empty",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "default": ""
                            },
                            "x-kubernetes-list-type": "atomic"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "spanContext": {
                "description": "SpanContext contains tracing span context fields",
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "default": ""
                }
              },
              "startTime": {
                "description": "StartTime is the time the PipelineRun is actually started.",
                "$ref": "#/definitions/v1.Time"
              }
            }
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "tekton.dev",
            "kind": "PipelineRun",
            "version": "v1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "pipelineruns.tekton.dev",
          "uid": "dff42737-6373-4f2c-8479-318d28a7a2d3",
          "resourceVersion": "149693902",
          "generation": 3,
          "creationTimestamp": "2024-03-20T05:58:11Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-pipelines",
            "pipeline.tekton.dev/release": "v0.57.0",
            "version": "v0.57.0"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:11Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:11Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:pipeline.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {},
                    "f:webhook": {
                      ".": {},
                      "f:clientConfig": {
                        ".": {},
                        "f:service": {
                          ".": {},
                          "f:name": {},
                          "f:namespace": {},
                          "f:port": {}
                        }
                      },
                      "f:conversionReviewVersions": {}
                    }
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            },
            {
              "manager": "webhook",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-25T16:45:14Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:spec": {
                  "f:conversion": {
                    "f:webhook": {
                      "f:clientConfig": {
                        "f:caBundle": {},
                        "f:service": {
                          "f:path": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "spec": {
          "group": "tekton.dev",
          "names": {
            "plural": "pipelineruns",
            "singular": "pipelinerun",
            "shortNames": [
              "pr",
              "prs"
            ],
            "kind": "PipelineRun",
            "listKind": "PipelineRunList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Succeeded",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason"
                },
                {
                  "name": "StartTime",
                  "type": "date",
                  "jsonPath": ".status.startTime"
                },
                {
                  "name": "CompletionTime",
                  "type": "date",
                  "jsonPath": ".status.completionTime"
                }
              ]
            },
            {
              "name": "v1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Succeeded",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason"
                },
                {
                  "name": "StartTime",
                  "type": "date",
                  "jsonPath": ".status.startTime"
                },
                {
                  "name": "CompletionTime",
                  "type": "date",
                  "jsonPath": ".status.completionTime"
                }
              ]
            }
          ],
          "conversion": {
            "strategy": "Webhook",
            "webhook": {
              "clientConfig": {
                "service": {
                  "namespace": "tekton",
                  "name": "tekton-pipelines-webhook",
                  "path": "/resource-conversion",
                  "port": 443
                },
                "caBundle": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqRENDQWpPZ0F3SUJBZ0lSQU5xcG9yOEhmWWZPajJUV2VNUXROejh3Q2dZSUtvWkl6ajBFQXdJd1JERVUKTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmxiR2x1WlhNdApkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNQjRYRFRJME1ETXlOVEUyTkRVd09Gb1hEVEkwTURRd01URTJORFV3Ck9Gb3dSREVVTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmwKYkdsdVpYTXRkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRApRZ0FFeHAvMURsZE9PanA0Ynh5dHpGd0Mxb3N0eCtFUXZCaFo5ellIcGpNWDRQSHFwSFFkUzF2VHAzS3pCZTNuCkdTbTVoNDltQnhiajh3V3dBUWg2ZlgxbXJhT0NBUVF3Z2dFQU1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVWZyWllIRlRGWDkvemNiejZqTzBrc0pQN0VGTXdnWjRHQTFVZEVRU0JsakNCazRJWWRHVnJkRzl1CkxYQnBjR1ZzYVc1bGN5MTNaV0pvYjI5cmdoOTBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnIKZEc5dWdpTjBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnJkRzl1TG5OMlk0SXhkR1ZyZEc5dQpMWEJwY0dWc2FXNWxjeTEzWldKb2IyOXJMblJsYTNSdmJpNXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQUtCZ2dxCmhrak9QUVFEQWdOSEFEQkVBaUJOTlkydUk2Wmp1YVl6aGl5Ly9VNXYxejBLSUU0N1RHSEplRVhVZGttTGRBSWcKUzI0ZEhPejlDWXg5eGJnRFpmNXZxUW04TUwyU2wxMDg3SXBwcFQ3dmV4TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
              },
              "conversionReviewVersions": [
                "v1beta1",
                "v1"
              ]
            }
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:11Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:11Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "pipelineruns",
            "singular": "pipelinerun",
            "shortNames": [
              "pr",
              "prs"
            ],
            "kind": "PipelineRun",
            "listKind": "PipelineRunList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "Succeeded",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status"
        },
        {
          "name": "Reason",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason"
        },
        {
          "name": "StartTime",
          "type": "date",
          "jsonPath": ".status.startTime"
        },
        {
          "name": "CompletionTime",
          "type": "date",
          "jsonPath": ".status.completionTime"
        }
      ],
      "short": "PipelineRun",
      "apiGroup": "tekton.dev",
      "apiKind": "PipelineRun",
      "apiVersion": "v1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.v1.Task",
      "definition": {
        "properties": {
          "spec": {
            "description": "TaskSpec defines the desired state of Task.",
            "type": "object",
            "properties": {
              "description": {
                "description": "Description is a user-facing description of the task that may be used to populate a UI.",
                "type": "string"
              },
              "displayName": {
                "description": "DisplayName is a user-facing name of the task that may be used to populate a UI.",
                "type": "string"
              },
              "params": {
                "description": "Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.",
                "type": "array",
                "items": {
                  "description": "ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "default": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "description": {
                      "description": "Description is a user-facing description of the parameter that may be used to populate a UI.",
                      "type": "string"
                    },
                    "enum": {
                      "description": "Enum declares a set of allowed param input values for tasks/pipelines that can be validated. If Enum is not set, no input validation is performed for the param.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      }
                    },
                    "name": {
                      "description": "Name declares the name by which a parameter is referenced.",
                      "type": "string",
                      "default": ""
                    },
                    "properties": {
                      "description": "Properties is the JSON Schema properties to support key-value pairs parameter.",
                      "type": "object",
                      "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/v1.PropertySpec"
                      }
                    },
                    "type": {
                      "description": "Type is the user-specified type of the parameter. The possible types are currently \"string\", \"array\" and \"object\", and \"string\" is the default.",
                      "type": "string"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "results": {
                "description": "Results are values that this Task can output",
                "type": "array",
                "items": {
                  "description": "TaskResult used to describe the results of a task",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "description": {
                      "description": "Description is a human-readable description of the result",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name the given name",
                      "type": "string",
                      "default": ""
                    },
                    "properties": {
                      "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                      "type": "object",
                      "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/v1.PropertySpec"
                      }
                    },
                    "type": {
                      "description": "Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.",
                      "type": "string"
                    },
                    "value": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "sidecars": {
                "description": "Sidecars are run alongside the Task's step containers. They begin before the steps start and end after the steps complete.",
                "type": "array",
                "items": {
                  "description": "Sidecar has nearly the same data structure as Step but does not have the ability to timeout.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "args": {
                      "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "command": {
                      "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "computeResources": {
                      "description": "ComputeResources required by this Sidecar. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "default": {},
                      "$ref": "#/definitions/v1.ResourceRequirements"
                    },
                    "env": {
                      "description": "List of environment variables to set in the Sidecar. Cannot be updated.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.EnvVar"
                      },
                      "x-kubernetes-list-type": "atomic",
                      "x-kubernetes-patch-merge-key": "name",
                      "x-kubernetes-patch-strategy": "merge"
                    },
                    "envFrom": {
                      "description": "List of sources to populate environment variables in the Sidecar. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.EnvFromSource"
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "image": {
                      "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                      "type": "string"
                    },
                    "imagePullPolicy": {
                      "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                      "type": "string"
                    },
                    "lifecycle": {
                      "description": "Actions that the management system should take in response to Sidecar lifecycle events. Cannot be updated.",
                      "$ref": "#/definitions/v1.Lifecycle"
                    },
                    "livenessProbe": {
                      "description": "Periodic probe of Sidecar liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "$ref": "#/definitions/v1.Probe"
                    },
                    "name": {
                      "description": "Name of the Sidecar specified as a DNS_LABEL. Each Sidecar in a Task must have a unique name (DNS_LABEL). Cannot be updated.",
                      "type": "string",
                      "default": ""
                    },
                    "ports": {
                      "description": "List of ports to expose from the Sidecar. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.ContainerPort"
                      },
                      "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                      ],
                      "x-kubernetes-list-type": "map",
                      "x-kubernetes-patch-merge-key": "containerPort",
                      "x-kubernetes-patch-strategy": "merge"
                    },
                    "readinessProbe": {
                      "description": "Periodic probe of Sidecar service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "$ref": "#/definitions/v1.Probe"
                    },
                    "script": {
                      "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command or Args.",
                      "type": "string"
                    },
                    "securityContext": {
                      "description": "SecurityContext defines the security options the Sidecar should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                      "$ref": "#/definitions/v1.SecurityContext"
                    },
                    "startupProbe": {
                      "description": "StartupProbe indicates that the Pod the Sidecar is running in has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                      "$ref": "#/definitions/v1.Probe"
                    },
                    "stdin": {
                      "description": "Whether this Sidecar should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the Sidecar will always result in EOF. Default is false.",
                      "type": "boolean"
                    },
                    "stdinOnce": {
                      "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the Sidecar is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                      "type": "boolean"
                    },
                    "terminationMessagePath": {
                      "description": "Optional: Path at which the file to which the Sidecar's termination message will be written is mounted into the Sidecar's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                      "type": "string"
                    },
                    "terminationMessagePolicy": {
                      "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the Sidecar status message on both success and failure. FallbackToLogsOnError will use the last chunk of Sidecar log output if the termination message file is empty and the Sidecar exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                      "type": "string"
                    },
                    "tty": {
                      "description": "Whether this Sidecar should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                      "type": "boolean"
                    },
                    "volumeDevices": {
                      "description": "volumeDevices is the list of block devices to be used by the Sidecar.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.VolumeDevice"
                      },
                      "x-kubernetes-list-type": "atomic",
                      "x-kubernetes-patch-merge-key": "devicePath",
                      "x-kubernetes-patch-strategy": "merge"
                    },
                    "volumeMounts": {
                      "description": "Volumes to mount into the Sidecar's filesystem. Cannot be updated.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.VolumeMount"
                      },
                      "x-kubernetes-list-type": "atomic",
                      "x-kubernetes-patch-merge-key": "mountPath",
                      "x-kubernetes-patch-strategy": "merge"
                    },
                    "workingDir": {
                      "description": "Sidecar's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                      "type": "string"
                    },
                    "workspaces": {
                      "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Sidecar wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                      "type": "array",
                      "items": {
                        "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                        "type": "object",
                        "required": [
                          "name",
                          "mountPath"
                        ],
                        "properties": {
                          "mountPath": {
                            "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                            "type": "string",
                            "default": ""
                          },
                          "name": {
                            "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                            "type": "string",
                            "default": ""
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "stepTemplate": {
                "description": "StepTemplate is a template for a Step",
                "type": "object",
                "properties": {
                  "args": {
                    "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "command": {
                    "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "computeResources": {
                    "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/v1.ResourceRequirements"
                  },
                  "env": {
                    "description": "List of environment variables to set in the Step. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.EnvVar"
                    },
                    "x-kubernetes-list-type": "atomic",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "envFrom": {
                    "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.EnvFromSource"
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "image": {
                    "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                  },
                  "securityContext": {
                    "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/v1.SecurityContext"
                  },
                  "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the Step.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.VolumeDevice"
                    },
                    "x-kubernetes-list-type": "atomic",
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "volumeMounts": {
                    "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.VolumeMount"
                    },
                    "x-kubernetes-list-type": "atomic",
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "workingDir": {
                    "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                  }
                }
              },
              "steps": {
                "description": "Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.",
                "type": "array",
                "items": {
                  "description": "Step runs a subcomponent of a Task",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "args": {
                      "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "command": {
                      "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "computeResources": {
                      "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "default": {},
                      "$ref": "#/definitions/v1.ResourceRequirements"
                    },
                    "env": {
                      "description": "List of environment variables to set in the Step. Cannot be updated.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.EnvVar"
                      },
                      "x-kubernetes-list-type": "atomic",
                      "x-kubernetes-patch-merge-key": "name",
                      "x-kubernetes-patch-strategy": "merge"
                    },
                    "envFrom": {
                      "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.EnvFromSource"
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "image": {
                      "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
                      "type": "string"
                    },
                    "imagePullPolicy": {
                      "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the Step specified as a DNS_LABEL. Each Step in a Task must have a unique name.",
                      "type": "string",
                      "default": ""
                    },
                    "onError": {
                      "description": "OnError defines the exiting behavior of a container on error can be set to [ continue | stopAndFail ]",
                      "type": "string"
                    },
                    "params": {
                      "description": "Params declares parameters passed to this step action.",
                      "type": "array",
                      "items": {
                        "description": "Param declares an ParamValues to use for the parameter called name.",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "default": ""
                          },
                          "value": {
                            "description": "ResultValue is a type alias of ParamValue",
                            "type": "object",
                            "required": [
                              "Type",
                              "StringVal",
                              "ArrayVal",
                              "ObjectVal"
                            ],
                            "properties": {
                              "ArrayVal": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "ObjectVal": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string",
                                  "default": ""
                                }
                              },
                              "StringVal": {
                                "description": "Represents the stored type of ParamValues.",
                                "type": "string",
                                "default": ""
                              },
                              "Type": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "ref": {
                      "description": "Ref can be used to refer to a specific instance of a StepAction.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the referenced step",
                          "type": "string"
                        }
                      }
                    },
                    "results": {
                      "description": "Results declares StepResults produced by the Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.\n\nIt can be used in an inlined Step when used to store Results to $(step.results.resultName.path). It cannot be used when referencing StepActions using [v1.Step.Ref]. The Results declared by the StepActions will be stored here instead.",
                      "type": "array",
                      "items": {
                        "description": "StepResult used to describe the Results of a Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "description": {
                            "description": "Description is a human-readable description of the result",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name the given name",
                            "type": "string",
                            "default": ""
                          },
                          "properties": {
                            "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                            "type": "object",
                            "additionalProperties": {
                              "default": {},
                              "$ref": "#/definitions/v1.PropertySpec"
                            }
                          },
                          "type": {
                            "description": "The possible types are 'string', 'array', and 'object', with 'string' as the default.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "script": {
                      "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.",
                      "type": "string"
                    },
                    "securityContext": {
                      "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                      "$ref": "#/definitions/v1.SecurityContext"
                    },
                    "stderrConfig": {
                      "description": "StepOutputConfig stores configuration for a step output stream.",
                      "type": "object",
                      "properties": {
                        "path": {
                          "description": "Path to duplicate stdout stream to on container's local filesystem.",
                          "type": "string"
                        }
                      }
                    },
                    "stdoutConfig": {
                      "description": "StepOutputConfig stores configuration for a step output stream.",
                      "type": "object",
                      "properties": {
                        "path": {
                          "description": "Path to duplicate stdout stream to on container's local filesystem.",
                          "type": "string"
                        }
                      }
                    },
                    "timeout": {
                      "description": "Timeout is the time after which the step times out. Defaults to never. Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                      "$ref": "#/definitions/v1.Duration"
                    },
                    "volumeDevices": {
                      "description": "volumeDevices is the list of block devices to be used by the Step.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.VolumeDevice"
                      },
                      "x-kubernetes-list-type": "atomic",
                      "x-kubernetes-patch-merge-key": "devicePath",
                      "x-kubernetes-patch-strategy": "merge"
                    },
                    "volumeMounts": {
                      "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                      "type": "array",
                      "items": {
                        "default": {},
                        "$ref": "#/definitions/v1.VolumeMount"
                      },
                      "x-kubernetes-list-type": "atomic",
                      "x-kubernetes-patch-merge-key": "mountPath",
                      "x-kubernetes-patch-strategy": "merge"
                    },
                    "workingDir": {
                      "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                      "type": "string"
                    },
                    "workspaces": {
                      "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Step wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                      "type": "array",
                      "items": {
                        "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                        "type": "object",
                        "required": [
                          "name",
                          "mountPath"
                        ],
                        "properties": {
                          "mountPath": {
                            "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                            "type": "string",
                            "default": ""
                          },
                          "name": {
                            "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                            "type": "string",
                            "default": ""
                          }
                        }
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "volumes": {
                "description": "Volumes is a collection of volumes that are available to mount into the steps of the build.",
                "type": "array",
                "items": {
                  "default": {},
                  "$ref": "#/definitions/v1.Volume"
                },
                "x-kubernetes-list-type": "atomic"
              },
              "workspaces": {
                "description": "Workspaces are the volumes that this Task requires.",
                "type": "array",
                "items": {
                  "description": "WorkspaceDeclaration is a declaration of a volume that a Task requires.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "description": {
                      "description": "Description is an optional human readable description of this volume.",
                      "type": "string"
                    },
                    "mountPath": {
                      "description": "MountPath overrides the directory that the volume will be made available at.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name by which you can bind the volume at runtime.",
                      "type": "string",
                      "default": ""
                    },
                    "optional": {
                      "description": "Optional marks a Workspace as not being required in TaskRuns. By default this field is false and so declared workspaces are required.",
                      "type": "boolean"
                    },
                    "readOnly": {
                      "description": "ReadOnly dictates whether a mounted volume is writable. By default this field is false and so mounted volumes are writable.",
                      "type": "boolean"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              }
            }
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "tekton.dev",
            "kind": "Task",
            "version": "v1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "tasks.tekton.dev",
          "uid": "b492d57f-f22b-4f13-b45c-b8b9915237a9",
          "resourceVersion": "149693903",
          "generation": 3,
          "creationTimestamp": "2024-03-20T05:58:21Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-pipelines",
            "pipeline.tekton.dev/release": "v0.57.0",
            "version": "v0.57.0"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:21Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:21Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:pipeline.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {},
                    "f:webhook": {
                      ".": {},
                      "f:clientConfig": {
                        ".": {},
                        "f:service": {
                          ".": {},
                          "f:name": {},
                          "f:namespace": {},
                          "f:port": {}
                        }
                      },
                      "f:conversionReviewVersions": {}
                    }
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            },
            {
              "manager": "webhook",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-25T16:45:14Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:spec": {
                  "f:conversion": {
                    "f:webhook": {
                      "f:clientConfig": {
                        "f:caBundle": {},
                        "f:service": {
                          "f:path": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "spec": {
          "group": "tekton.dev",
          "names": {
            "plural": "tasks",
            "singular": "task",
            "kind": "Task",
            "listKind": "TaskList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            },
            {
              "name": "v1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "Webhook",
            "webhook": {
              "clientConfig": {
                "service": {
                  "namespace": "tekton",
                  "name": "tekton-pipelines-webhook",
                  "path": "/resource-conversion",
                  "port": 443
                },
                "caBundle": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqRENDQWpPZ0F3SUJBZ0lSQU5xcG9yOEhmWWZPajJUV2VNUXROejh3Q2dZSUtvWkl6ajBFQXdJd1JERVUKTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmxiR2x1WlhNdApkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNQjRYRFRJME1ETXlOVEUyTkRVd09Gb1hEVEkwTURRd01URTJORFV3Ck9Gb3dSREVVTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmwKYkdsdVpYTXRkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRApRZ0FFeHAvMURsZE9PanA0Ynh5dHpGd0Mxb3N0eCtFUXZCaFo5ellIcGpNWDRQSHFwSFFkUzF2VHAzS3pCZTNuCkdTbTVoNDltQnhiajh3V3dBUWg2ZlgxbXJhT0NBUVF3Z2dFQU1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVWZyWllIRlRGWDkvemNiejZqTzBrc0pQN0VGTXdnWjRHQTFVZEVRU0JsakNCazRJWWRHVnJkRzl1CkxYQnBjR1ZzYVc1bGN5MTNaV0pvYjI5cmdoOTBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnIKZEc5dWdpTjBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnJkRzl1TG5OMlk0SXhkR1ZyZEc5dQpMWEJwY0dWc2FXNWxjeTEzWldKb2IyOXJMblJsYTNSdmJpNXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQUtCZ2dxCmhrak9QUVFEQWdOSEFEQkVBaUJOTlkydUk2Wmp1YVl6aGl5Ly9VNXYxejBLSUU0N1RHSEplRVhVZGttTGRBSWcKUzI0ZEhPejlDWXg5eGJnRFpmNXZxUW04TUwyU2wxMDg3SXBwcFQ3dmV4TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
              },
              "conversionReviewVersions": [
                "v1beta1",
                "v1"
              ]
            }
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:21Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:21Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "tasks",
            "singular": "task",
            "kind": "Task",
            "listKind": "TaskList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1"
          ]
        }
      },
      "short": "Task",
      "apiGroup": "tekton.dev",
      "apiKind": "Task",
      "apiVersion": "v1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.v1.TaskRun",
      "definition": {
        "properties": {
          "spec": {
            "description": "TaskRunSpec defines the desired state of TaskRun",
            "type": "object",
            "properties": {
              "computeResources": {
                "description": "Compute resources to use for this TaskRun",
                "$ref": "#/definitions/v1.ResourceRequirements"
              },
              "debug": {
                "description": "TaskRunDebug defines the breakpoint config for a particular TaskRun",
                "type": "object",
                "properties": {
                  "breakpoints": {
                    "description": "TaskBreakpoints defines the breakpoint config for a particular Task",
                    "type": "object",
                    "properties": {
                      "onFailure": {
                        "description": "if enabled, pause TaskRun on failure of a step failed step will not exit",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "params": {
                "type": "array",
                "items": {
                  "description": "Param declares an ParamValues to use for the parameter called name.",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "default": ""
                    },
                    "value": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "podTemplate": {
                "description": "Template holds pod specific configuration",
                "type": "object",
                "properties": {
                  "affinity": {
                    "description": "If specified, the pod's scheduling constraints",
                    "$ref": "#/definitions/v1.Affinity"
                  },
                  "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted.",
                    "type": "boolean"
                  },
                  "dnsConfig": {
                    "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
                    "$ref": "#/definitions/v1.PodDNSConfig"
                  },
                  "dnsPolicy": {
                    "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.",
                    "type": "string"
                  },
                  "enableServiceLinks": {
                    "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
                    "type": "boolean"
                  },
                  "env": {
                    "description": "List of environment variables that can be provided to the containers belonging to the pod.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.EnvVar"
                    },
                    "x-kubernetes-list-type": "atomic",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                  },
                  "hostAliases": {
                    "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.HostAlias"
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "hostNetwork": {
                    "description": "HostNetwork specifies whether the pod may use the node network namespace",
                    "type": "boolean"
                  },
                  "imagePullSecrets": {
                    "description": "ImagePullSecrets gives the name of the secret used by the pod to pull the image if specified",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.LocalObjectReference"
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "priorityClassName": {
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
                    "type": "string"
                  },
                  "runtimeClassName": {
                    "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.",
                    "type": "string"
                  },
                  "schedulerName": {
                    "description": "SchedulerName specifies the scheduler to be used to dispatch the Pod",
                    "type": "string"
                  },
                  "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
                    "$ref": "#/definitions/v1.PodSecurityContext"
                  },
                  "tolerations": {
                    "description": "If specified, the pod's tolerations.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.Toleration"
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "topologySpreadConstraints": {
                    "description": "TopologySpreadConstraints controls how Pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.TopologySpreadConstraint"
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "volumes": {
                    "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.Volume"
                    },
                    "x-kubernetes-list-type": "atomic",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge,retainKeys"
                  }
                }
              },
              "retries": {
                "description": "Retries represents how many times this TaskRun should be retried in the event of task failure.",
                "type": "integer",
                "format": "int32"
              },
              "serviceAccountName": {
                "type": "string",
                "default": ""
              },
              "sidecarSpecs": {
                "description": "Specs to apply to Sidecars in this TaskRun. If a field is specified in both a Sidecar and a SidecarSpec, the value from the SidecarSpec will be used. This field is only supported when the alpha feature gate is enabled.",
                "type": "array",
                "items": {
                  "description": "TaskRunSidecarSpec is used to override the values of a Sidecar in the corresponding Task.",
                  "type": "object",
                  "required": [
                    "name",
                    "computeResources"
                  ],
                  "properties": {
                    "computeResources": {
                      "description": "The resource requirements to apply to the Sidecar.",
                      "default": {},
                      "$ref": "#/definitions/v1.ResourceRequirements"
                    },
                    "name": {
                      "description": "The name of the Sidecar to override.",
                      "type": "string",
                      "default": ""
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "status": {
                "description": "Used for cancelling a TaskRun (and maybe more later on)",
                "type": "string"
              },
              "statusMessage": {
                "description": "Status message for cancellation.",
                "type": "string"
              },
              "stepSpecs": {
                "description": "Specs to apply to Steps in this TaskRun. If a field is specified in both a Step and a StepSpec, the value from the StepSpec will be used. This field is only supported when the alpha feature gate is enabled.",
                "type": "array",
                "items": {
                  "description": "TaskRunStepSpec is used to override the values of a Step in the corresponding Task.",
                  "type": "object",
                  "required": [
                    "name",
                    "computeResources"
                  ],
                  "properties": {
                    "computeResources": {
                      "description": "The resource requirements to apply to the Step.",
                      "default": {},
                      "$ref": "#/definitions/v1.ResourceRequirements"
                    },
                    "name": {
                      "description": "The name of the Step to override.",
                      "type": "string",
                      "default": ""
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "taskRef": {
                "description": "TaskRef can be used to refer to a specific instance of a task.",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent Note: A Task with non-empty APIVersion and Kind is considered a Custom Task",
                    "type": "string"
                  },
                  "kind": {
                    "description": "TaskKind indicates the Kind of the Task: 1. Namespaced Task when Kind is set to \"Task\". If Kind is \"\", it defaults to \"Task\". 2. Custom Task when Kind is non-empty and APIVersion is non-empty",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                  }
                }
              },
              "taskSpec": {
                "description": "TaskSpec defines the desired state of Task.",
                "type": "object",
                "properties": {
                  "description": {
                    "description": "Description is a user-facing description of the task that may be used to populate a UI.",
                    "type": "string"
                  },
                  "displayName": {
                    "description": "DisplayName is a user-facing name of the task that may be used to populate a UI.",
                    "type": "string"
                  },
                  "params": {
                    "description": "Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.",
                    "type": "array",
                    "items": {
                      "description": "ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "default": {
                          "description": "ResultValue is a type alias of ParamValue",
                          "type": "object",
                          "required": [
                            "Type",
                            "StringVal",
                            "ArrayVal",
                            "ObjectVal"
                          ],
                          "properties": {
                            "ArrayVal": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "default": ""
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "ObjectVal": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "StringVal": {
                              "description": "Represents the stored type of ParamValues.",
                              "type": "string",
                              "default": ""
                            },
                            "Type": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        },
                        "description": {
                          "description": "Description is a user-facing description of the parameter that may be used to populate a UI.",
                          "type": "string"
                        },
                        "enum": {
                          "description": "Enum declares a set of allowed param input values for tasks/pipelines that can be validated. If Enum is not set, no input validation is performed for the param.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "name": {
                          "description": "Name declares the name by which a parameter is referenced.",
                          "type": "string",
                          "default": ""
                        },
                        "properties": {
                          "description": "Properties is the JSON Schema properties to support key-value pairs parameter.",
                          "type": "object",
                          "additionalProperties": {
                            "default": {},
                            "$ref": "#/definitions/v1.PropertySpec"
                          }
                        },
                        "type": {
                          "description": "Type is the user-specified type of the parameter. The possible types are currently \"string\", \"array\" and \"object\", and \"string\" is the default.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "results": {
                    "description": "Results are values that this Task can output",
                    "type": "array",
                    "items": {
                      "description": "TaskResult used to describe the results of a task",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "description": {
                          "description": "Description is a human-readable description of the result",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name the given name",
                          "type": "string",
                          "default": ""
                        },
                        "properties": {
                          "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                          "type": "object",
                          "additionalProperties": {
                            "default": {},
                            "$ref": "#/definitions/v1.PropertySpec"
                          }
                        },
                        "type": {
                          "description": "Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.",
                          "type": "string"
                        },
                        "value": {
                          "description": "ResultValue is a type alias of ParamValue",
                          "type": "object",
                          "required": [
                            "Type",
                            "StringVal",
                            "ArrayVal",
                            "ObjectVal"
                          ],
                          "properties": {
                            "ArrayVal": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "default": ""
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "ObjectVal": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "StringVal": {
                              "description": "Represents the stored type of ParamValues.",
                              "type": "string",
                              "default": ""
                            },
                            "Type": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "sidecars": {
                    "description": "Sidecars are run alongside the Task's step containers. They begin before the steps start and end after the steps complete.",
                    "type": "array",
                    "items": {
                      "description": "Sidecar has nearly the same data structure as Step but does not have the ability to timeout.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "args": {
                          "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "command": {
                          "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "computeResources": {
                          "description": "ComputeResources required by this Sidecar. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "default": {},
                          "$ref": "#/definitions/v1.ResourceRequirements"
                        },
                        "env": {
                          "description": "List of environment variables to set in the Sidecar. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvVar"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "name",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "envFrom": {
                          "description": "List of sources to populate environment variables in the Sidecar. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvFromSource"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "image": {
                          "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                          "type": "string"
                        },
                        "lifecycle": {
                          "description": "Actions that the management system should take in response to Sidecar lifecycle events. Cannot be updated.",
                          "$ref": "#/definitions/v1.Lifecycle"
                        },
                        "livenessProbe": {
                          "description": "Periodic probe of Sidecar liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "$ref": "#/definitions/v1.Probe"
                        },
                        "name": {
                          "description": "Name of the Sidecar specified as a DNS_LABEL. Each Sidecar in a Task must have a unique name (DNS_LABEL). Cannot be updated.",
                          "type": "string",
                          "default": ""
                        },
                        "ports": {
                          "description": "List of ports to expose from the Sidecar. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.ContainerPort"
                          },
                          "x-kubernetes-list-map-keys": [
                            "containerPort",
                            "protocol"
                          ],
                          "x-kubernetes-list-type": "map",
                          "x-kubernetes-patch-merge-key": "containerPort",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "readinessProbe": {
                          "description": "Periodic probe of Sidecar service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "$ref": "#/definitions/v1.Probe"
                        },
                        "script": {
                          "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command or Args.",
                          "type": "string"
                        },
                        "securityContext": {
                          "description": "SecurityContext defines the security options the Sidecar should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                          "$ref": "#/definitions/v1.SecurityContext"
                        },
                        "startupProbe": {
                          "description": "StartupProbe indicates that the Pod the Sidecar is running in has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "$ref": "#/definitions/v1.Probe"
                        },
                        "stdin": {
                          "description": "Whether this Sidecar should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the Sidecar will always result in EOF. Default is false.",
                          "type": "boolean"
                        },
                        "stdinOnce": {
                          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the Sidecar is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                          "type": "boolean"
                        },
                        "terminationMessagePath": {
                          "description": "Optional: Path at which the file to which the Sidecar's termination message will be written is mounted into the Sidecar's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          "type": "string"
                        },
                        "terminationMessagePolicy": {
                          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the Sidecar status message on both success and failure. FallbackToLogsOnError will use the last chunk of Sidecar log output if the termination message file is empty and the Sidecar exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                          "type": "string"
                        },
                        "tty": {
                          "description": "Whether this Sidecar should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          "type": "boolean"
                        },
                        "volumeDevices": {
                          "description": "volumeDevices is the list of block devices to be used by the Sidecar.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.VolumeDevice"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "devicePath",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "volumeMounts": {
                          "description": "Volumes to mount into the Sidecar's filesystem. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.VolumeMount"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "mountPath",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "workingDir": {
                          "description": "Sidecar's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          "type": "string"
                        },
                        "workspaces": {
                          "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Sidecar wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                          "type": "array",
                          "items": {
                            "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                            "type": "object",
                            "required": [
                              "name",
                              "mountPath"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                                "type": "string",
                                "default": ""
                              },
                              "name": {
                                "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                                "type": "string",
                                "default": ""
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "stepTemplate": {
                    "description": "StepTemplate is a template for a Step",
                    "type": "object",
                    "properties": {
                      "args": {
                        "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "default": ""
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "command": {
                        "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "default": ""
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "computeResources": {
                        "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "default": {},
                        "$ref": "#/definitions/v1.ResourceRequirements"
                      },
                      "env": {
                        "description": "List of environment variables to set in the Step. Cannot be updated.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.EnvVar"
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-patch-merge-key": "name",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "envFrom": {
                        "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.EnvFromSource"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "image": {
                        "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                        "type": "string"
                      },
                      "imagePullPolicy": {
                        "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                        "type": "string"
                      },
                      "securityContext": {
                        "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                        "$ref": "#/definitions/v1.SecurityContext"
                      },
                      "volumeDevices": {
                        "description": "volumeDevices is the list of block devices to be used by the Step.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.VolumeDevice"
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-patch-merge-key": "devicePath",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "volumeMounts": {
                        "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.VolumeMount"
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-patch-merge-key": "mountPath",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "workingDir": {
                        "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                        "type": "string"
                      }
                    }
                  },
                  "steps": {
                    "description": "Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.",
                    "type": "array",
                    "items": {
                      "description": "Step runs a subcomponent of a Task",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "args": {
                          "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "command": {
                          "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "computeResources": {
                          "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "default": {},
                          "$ref": "#/definitions/v1.ResourceRequirements"
                        },
                        "env": {
                          "description": "List of environment variables to set in the Step. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvVar"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "name",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "envFrom": {
                          "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvFromSource"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "image": {
                          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Step specified as a DNS_LABEL. Each Step in a Task must have a unique name.",
                          "type": "string",
                          "default": ""
                        },
                        "onError": {
                          "description": "OnError defines the exiting behavior of a container on error can be set to [ continue | stopAndFail ]",
                          "type": "string"
                        },
                        "params": {
                          "description": "Params declares parameters passed to this step action.",
                          "type": "array",
                          "items": {
                            "description": "Param declares an ParamValues to use for the parameter called name.",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "value": {
                                "description": "ResultValue is a type alias of ParamValue",
                                "type": "object",
                                "required": [
                                  "Type",
                                  "StringVal",
                                  "ArrayVal",
                                  "ObjectVal"
                                ],
                                "properties": {
                                  "ArrayVal": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "ObjectVal": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string",
                                      "default": ""
                                    }
                                  },
                                  "StringVal": {
                                    "description": "Represents the stored type of ParamValues.",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "Type": {
                                    "type": "string",
                                    "default": ""
                                  }
                                }
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ref": {
                          "description": "Ref can be used to refer to a specific instance of a StepAction.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referenced step",
                              "type": "string"
                            }
                          }
                        },
                        "results": {
                          "description": "Results declares StepResults produced by the Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.\n\nIt can be used in an inlined Step when used to store Results to $(step.results.resultName.path). It cannot be used when referencing StepActions using [v1.Step.Ref]. The Results declared by the StepActions will be stored here instead.",
                          "type": "array",
                          "items": {
                            "description": "StepResult used to describe the Results of a Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "description": {
                                "description": "Description is a human-readable description of the result",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name the given name",
                                "type": "string",
                                "default": ""
                              },
                              "properties": {
                                "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                                "type": "object",
                                "additionalProperties": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.PropertySpec"
                                }
                              },
                              "type": {
                                "description": "The possible types are 'string', 'array', and 'object', with 'string' as the default.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "script": {
                          "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.",
                          "type": "string"
                        },
                        "securityContext": {
                          "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                          "$ref": "#/definitions/v1.SecurityContext"
                        },
                        "stderrConfig": {
                          "description": "StepOutputConfig stores configuration for a step output stream.",
                          "type": "object",
                          "properties": {
                            "path": {
                              "description": "Path to duplicate stdout stream to on container's local filesystem.",
                              "type": "string"
                            }
                          }
                        },
                        "stdoutConfig": {
                          "description": "StepOutputConfig stores configuration for a step output stream.",
                          "type": "object",
                          "properties": {
                            "path": {
                              "description": "Path to duplicate stdout stream to on container's local filesystem.",
                              "type": "string"
                            }
                          }
                        },
                        "timeout": {
                          "description": "Timeout is the time after which the step times out. Defaults to never. Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                          "$ref": "#/definitions/v1.Duration"
                        },
                        "volumeDevices": {
                          "description": "volumeDevices is the list of block devices to be used by the Step.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.VolumeDevice"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "devicePath",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "volumeMounts": {
                          "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.VolumeMount"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "mountPath",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "workingDir": {
                          "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          "type": "string"
                        },
                        "workspaces": {
                          "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Step wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                          "type": "array",
                          "items": {
                            "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                            "type": "object",
                            "required": [
                              "name",
                              "mountPath"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                                "type": "string",
                                "default": ""
                              },
                              "name": {
                                "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                                "type": "string",
                                "default": ""
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "volumes": {
                    "description": "Volumes is a collection of volumes that are available to mount into the steps of the build.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.Volume"
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "workspaces": {
                    "description": "Workspaces are the volumes that this Task requires.",
                    "type": "array",
                    "items": {
                      "description": "WorkspaceDeclaration is a declaration of a volume that a Task requires.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "description": {
                          "description": "Description is an optional human readable description of this volume.",
                          "type": "string"
                        },
                        "mountPath": {
                          "description": "MountPath overrides the directory that the volume will be made available at.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name by which you can bind the volume at runtime.",
                          "type": "string",
                          "default": ""
                        },
                        "optional": {
                          "description": "Optional marks a Workspace as not being required in TaskRuns. By default this field is false and so declared workspaces are required.",
                          "type": "boolean"
                        },
                        "readOnly": {
                          "description": "ReadOnly dictates whether a mounted volume is writable. By default this field is false and so mounted volumes are writable.",
                          "type": "boolean"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                }
              },
              "timeout": {
                "description": "Time after which one retry attempt times out. Defaults to 1 hour. Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                "$ref": "#/definitions/v1.Duration"
              },
              "workspaces": {
                "description": "Workspaces is a list of WorkspaceBindings from volumes to workspaces.",
                "type": "array",
                "items": {
                  "description": "WorkspaceBinding maps a Task's declared workspace to a Volume.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "configMap": {
                      "description": "ConfigMap represents a configMap that should populate this workspace.",
                      "$ref": "#/definitions/v1.ConfigMapVolumeSource"
                    },
                    "csi": {
                      "description": "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.",
                      "$ref": "#/definitions/v1.CSIVolumeSource"
                    },
                    "emptyDir": {
                      "description": "EmptyDir represents a temporary directory that shares a Task's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Either this OR PersistentVolumeClaim can be used.",
                      "$ref": "#/definitions/v1.EmptyDirVolumeSource"
                    },
                    "name": {
                      "description": "Name is the name of the workspace populated by the volume.",
                      "type": "string",
                      "default": ""
                    },
                    "persistentVolumeClaim": {
                      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Either this OR EmptyDir can be used.",
                      "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
                    },
                    "projected": {
                      "description": "Projected represents a projected volume that should populate this workspace.",
                      "$ref": "#/definitions/v1.ProjectedVolumeSource"
                    },
                    "secret": {
                      "description": "Secret represents a secret that should populate this workspace.",
                      "$ref": "#/definitions/v1.SecretVolumeSource"
                    },
                    "subPath": {
                      "description": "SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory).",
                      "type": "string"
                    },
                    "volumeClaimTemplate": {
                      "description": "VolumeClaimTemplate is a template for a claim that will be created in the same namespace. The PipelineRun controller is responsible for creating a unique claim for each instance of PipelineRun.",
                      "$ref": "#/definitions/v1.PersistentVolumeClaim"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              }
            }
          },
          "status": {
            "description": "TaskRunStatus defines the observed state of TaskRun",
            "type": "object",
            "required": [
              "podName"
            ],
            "properties": {
              "annotations": {
                "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "default": ""
                }
              },
              "completionTime": {
                "description": "CompletionTime is the time the build completed.",
                "$ref": "#/definitions/v1.Time"
              },
              "conditions": {
                "description": "Conditions the latest available observations of a resource's current state.",
                "type": "array",
                "items": {
                  "default": {},
                  "$ref": "#/definitions/knative.Condition"
                },
                "x-kubernetes-patch-merge-key": "type",
                "x-kubernetes-patch-strategy": "merge"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
                "type": "integer",
                "format": "int64"
              },
              "podName": {
                "description": "PodName is the name of the pod responsible for executing this task's steps.",
                "type": "string",
                "default": ""
              },
              "provenance": {
                "description": "Provenance contains metadata about resources used in the TaskRun/PipelineRun such as the source from where a remote build definition was fetched. This field aims to carry minimum amoumt of metadata in *Run status so that Tekton Chains can capture them in the provenance.",
                "type": "object",
                "properties": {
                  "featureFlags": {
                    "description": "FeatureFlags identifies the feature flags that were used during the task/pipeline run",
                    "$ref": "#/definitions/github.com.tektoncd.pipeline.pkg.apis.config.FeatureFlags"
                  },
                  "refSource": {
                    "description": "RefSource contains the information that can uniquely identify where a remote built definition came from i.e. Git repositories, Tekton Bundles in OCI registry and hub.",
                    "type": "object",
                    "properties": {
                      "digest": {
                        "description": "Digest is a collection of cryptographic digests for the contents of the artifact specified by URI. Example: {\"sha1\": \"f99d13e554ffcb696dee719fa85b695cb5b0f428\"}",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string",
                          "default": ""
                        }
                      },
                      "entryPoint": {
                        "description": "EntryPoint identifies the entry point into the build. This is often a path to a build definition file and/or a target label within that file. Example: \"task/git-clone/0.8/git-clone.yaml\"",
                        "type": "string"
                      },
                      "uri": {
                        "description": "URI indicates the identity of the source of the build definition. Example: \"https://github.com/tektoncd/catalog\"",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "results": {
                "description": "Results are the list of results written out by the task's containers",
                "type": "array",
                "items": {
                  "description": "TaskRunStepResult is a type alias of TaskRunResult",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "name": {
                      "description": "Name the given name",
                      "type": "string",
                      "default": ""
                    },
                    "type": {
                      "description": "Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.",
                      "type": "string"
                    },
                    "value": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "retriesStatus": {
                "description": "RetriesStatus contains the history of TaskRunStatus in case of a retry in order to keep record of failures. All TaskRunStatus stored in RetriesStatus will have no date within the RetriesStatus as is redundant.",
                "type": "array",
                "items": {
                  "default": {},
                  "$ref": "#/definitions/v1.TaskRunStatus"
                },
                "x-kubernetes-list-type": "atomic"
              },
              "sidecars": {
                "description": "The list has one entry per sidecar in the manifest. Each entry is represents the imageid of the corresponding sidecar.",
                "type": "array",
                "items": {
                  "description": "SidecarState reports the results of running a sidecar in a Task.",
                  "type": "object",
                  "properties": {
                    "container": {
                      "type": "string"
                    },
                    "imageID": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "running": {
                      "description": "Details about a running container",
                      "$ref": "#/definitions/v1.ContainerStateRunning"
                    },
                    "terminated": {
                      "description": "Details about a terminated container",
                      "$ref": "#/definitions/v1.ContainerStateTerminated"
                    },
                    "waiting": {
                      "description": "Details about a waiting container",
                      "$ref": "#/definitions/v1.ContainerStateWaiting"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "spanContext": {
                "description": "SpanContext contains tracing span context fields",
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "default": ""
                }
              },
              "startTime": {
                "description": "StartTime is the time the build is actually started.",
                "$ref": "#/definitions/v1.Time"
              },
              "steps": {
                "description": "Steps describes the state of each build step container.",
                "type": "array",
                "items": {
                  "description": "StepState reports the results of running a step in a Task.",
                  "type": "object",
                  "properties": {
                    "container": {
                      "type": "string"
                    },
                    "imageID": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "description": "TaskRunStepResult is a type alias of TaskRunResult",
                        "type": "object",
                        "required": [
                          "name",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name the given name",
                            "type": "string",
                            "default": ""
                          },
                          "type": {
                            "description": "Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.",
                            "type": "string"
                          },
                          "value": {
                            "description": "ResultValue is a type alias of ParamValue",
                            "type": "object",
                            "required": [
                              "Type",
                              "StringVal",
                              "ArrayVal",
                              "ObjectVal"
                            ],
                            "properties": {
                              "ArrayVal": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "default": ""
                                },
                                "x-kubernetes-list-type": "atomic"
                              },
                              "ObjectVal": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string",
                                  "default": ""
                                }
                              },
                              "StringVal": {
                                "description": "Represents the stored type of ParamValues.",
                                "type": "string",
                                "default": ""
                              },
                              "Type": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        }
                      }
                    },
                    "running": {
                      "description": "Details about a running container",
                      "$ref": "#/definitions/v1.ContainerStateRunning"
                    },
                    "terminated": {
                      "description": "Details about a terminated container",
                      "$ref": "#/definitions/v1.ContainerStateTerminated"
                    },
                    "terminationReason": {
                      "type": "string"
                    },
                    "waiting": {
                      "description": "Details about a waiting container",
                      "$ref": "#/definitions/v1.ContainerStateWaiting"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "taskSpec": {
                "description": "TaskSpec defines the desired state of Task.",
                "type": "object",
                "properties": {
                  "description": {
                    "description": "Description is a user-facing description of the task that may be used to populate a UI.",
                    "type": "string"
                  },
                  "displayName": {
                    "description": "DisplayName is a user-facing name of the task that may be used to populate a UI.",
                    "type": "string"
                  },
                  "params": {
                    "description": "Params is a list of input parameters required to run the task. Params must be supplied as inputs in TaskRuns unless they declare a default value.",
                    "type": "array",
                    "items": {
                      "description": "ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "default": {
                          "description": "ResultValue is a type alias of ParamValue",
                          "type": "object",
                          "required": [
                            "Type",
                            "StringVal",
                            "ArrayVal",
                            "ObjectVal"
                          ],
                          "properties": {
                            "ArrayVal": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "default": ""
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "ObjectVal": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "StringVal": {
                              "description": "Represents the stored type of ParamValues.",
                              "type": "string",
                              "default": ""
                            },
                            "Type": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        },
                        "description": {
                          "description": "Description is a user-facing description of the parameter that may be used to populate a UI.",
                          "type": "string"
                        },
                        "enum": {
                          "description": "Enum declares a set of allowed param input values for tasks/pipelines that can be validated. If Enum is not set, no input validation is performed for the param.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "name": {
                          "description": "Name declares the name by which a parameter is referenced.",
                          "type": "string",
                          "default": ""
                        },
                        "properties": {
                          "description": "Properties is the JSON Schema properties to support key-value pairs parameter.",
                          "type": "object",
                          "additionalProperties": {
                            "default": {},
                            "$ref": "#/definitions/v1.PropertySpec"
                          }
                        },
                        "type": {
                          "description": "Type is the user-specified type of the parameter. The possible types are currently \"string\", \"array\" and \"object\", and \"string\" is the default.",
                          "type": "string"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "results": {
                    "description": "Results are values that this Task can output",
                    "type": "array",
                    "items": {
                      "description": "TaskResult used to describe the results of a task",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "description": {
                          "description": "Description is a human-readable description of the result",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name the given name",
                          "type": "string",
                          "default": ""
                        },
                        "properties": {
                          "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                          "type": "object",
                          "additionalProperties": {
                            "default": {},
                            "$ref": "#/definitions/v1.PropertySpec"
                          }
                        },
                        "type": {
                          "description": "Type is the user-specified type of the result. The possible type is currently \"string\" and will support \"array\" in following work.",
                          "type": "string"
                        },
                        "value": {
                          "description": "ResultValue is a type alias of ParamValue",
                          "type": "object",
                          "required": [
                            "Type",
                            "StringVal",
                            "ArrayVal",
                            "ObjectVal"
                          ],
                          "properties": {
                            "ArrayVal": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "default": ""
                              },
                              "x-kubernetes-list-type": "atomic"
                            },
                            "ObjectVal": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "StringVal": {
                              "description": "Represents the stored type of ParamValues.",
                              "type": "string",
                              "default": ""
                            },
                            "Type": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "sidecars": {
                    "description": "Sidecars are run alongside the Task's step containers. They begin before the steps start and end after the steps complete.",
                    "type": "array",
                    "items": {
                      "description": "Sidecar has nearly the same data structure as Step but does not have the ability to timeout.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "args": {
                          "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "command": {
                          "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "computeResources": {
                          "description": "ComputeResources required by this Sidecar. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "default": {},
                          "$ref": "#/definitions/v1.ResourceRequirements"
                        },
                        "env": {
                          "description": "List of environment variables to set in the Sidecar. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvVar"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "name",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "envFrom": {
                          "description": "List of sources to populate environment variables in the Sidecar. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvFromSource"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "image": {
                          "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                          "type": "string"
                        },
                        "lifecycle": {
                          "description": "Actions that the management system should take in response to Sidecar lifecycle events. Cannot be updated.",
                          "$ref": "#/definitions/v1.Lifecycle"
                        },
                        "livenessProbe": {
                          "description": "Periodic probe of Sidecar liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "$ref": "#/definitions/v1.Probe"
                        },
                        "name": {
                          "description": "Name of the Sidecar specified as a DNS_LABEL. Each Sidecar in a Task must have a unique name (DNS_LABEL). Cannot be updated.",
                          "type": "string",
                          "default": ""
                        },
                        "ports": {
                          "description": "List of ports to expose from the Sidecar. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.ContainerPort"
                          },
                          "x-kubernetes-list-map-keys": [
                            "containerPort",
                            "protocol"
                          ],
                          "x-kubernetes-list-type": "map",
                          "x-kubernetes-patch-merge-key": "containerPort",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "readinessProbe": {
                          "description": "Periodic probe of Sidecar service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "$ref": "#/definitions/v1.Probe"
                        },
                        "script": {
                          "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command or Args.",
                          "type": "string"
                        },
                        "securityContext": {
                          "description": "SecurityContext defines the security options the Sidecar should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                          "$ref": "#/definitions/v1.SecurityContext"
                        },
                        "startupProbe": {
                          "description": "StartupProbe indicates that the Pod the Sidecar is running in has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                          "$ref": "#/definitions/v1.Probe"
                        },
                        "stdin": {
                          "description": "Whether this Sidecar should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the Sidecar will always result in EOF. Default is false.",
                          "type": "boolean"
                        },
                        "stdinOnce": {
                          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the Sidecar is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                          "type": "boolean"
                        },
                        "terminationMessagePath": {
                          "description": "Optional: Path at which the file to which the Sidecar's termination message will be written is mounted into the Sidecar's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                          "type": "string"
                        },
                        "terminationMessagePolicy": {
                          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the Sidecar status message on both success and failure. FallbackToLogsOnError will use the last chunk of Sidecar log output if the termination message file is empty and the Sidecar exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                          "type": "string"
                        },
                        "tty": {
                          "description": "Whether this Sidecar should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                          "type": "boolean"
                        },
                        "volumeDevices": {
                          "description": "volumeDevices is the list of block devices to be used by the Sidecar.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.VolumeDevice"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "devicePath",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "volumeMounts": {
                          "description": "Volumes to mount into the Sidecar's filesystem. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.VolumeMount"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "mountPath",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "workingDir": {
                          "description": "Sidecar's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          "type": "string"
                        },
                        "workspaces": {
                          "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Sidecar wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                          "type": "array",
                          "items": {
                            "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                            "type": "object",
                            "required": [
                              "name",
                              "mountPath"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                                "type": "string",
                                "default": ""
                              },
                              "name": {
                                "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                                "type": "string",
                                "default": ""
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "stepTemplate": {
                    "description": "StepTemplate is a template for a Step",
                    "type": "object",
                    "properties": {
                      "args": {
                        "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "default": ""
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "command": {
                        "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "default": ""
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "computeResources": {
                        "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "default": {},
                        "$ref": "#/definitions/v1.ResourceRequirements"
                      },
                      "env": {
                        "description": "List of environment variables to set in the Step. Cannot be updated.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.EnvVar"
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-patch-merge-key": "name",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "envFrom": {
                        "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.EnvFromSource"
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "image": {
                        "description": "Image reference name. More info: https://kubernetes.io/docs/concepts/containers/images",
                        "type": "string"
                      },
                      "imagePullPolicy": {
                        "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                        "type": "string"
                      },
                      "securityContext": {
                        "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                        "$ref": "#/definitions/v1.SecurityContext"
                      },
                      "volumeDevices": {
                        "description": "volumeDevices is the list of block devices to be used by the Step.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.VolumeDevice"
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-patch-merge-key": "devicePath",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "volumeMounts": {
                        "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                        "type": "array",
                        "items": {
                          "default": {},
                          "$ref": "#/definitions/v1.VolumeMount"
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-patch-merge-key": "mountPath",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "workingDir": {
                        "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                        "type": "string"
                      }
                    }
                  },
                  "steps": {
                    "description": "Steps are the steps of the build; each step is run sequentially with the source mounted into /workspace.",
                    "type": "array",
                    "items": {
                      "description": "Step runs a subcomponent of a Task",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "args": {
                          "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "command": {
                          "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "computeResources": {
                          "description": "ComputeResources required by this Step. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "default": {},
                          "$ref": "#/definitions/v1.ResourceRequirements"
                        },
                        "env": {
                          "description": "List of environment variables to set in the Step. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvVar"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "name",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "envFrom": {
                          "description": "List of sources to populate environment variables in the Step. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the Step is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.EnvFromSource"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "image": {
                          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
                          "type": "string"
                        },
                        "imagePullPolicy": {
                          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the Step specified as a DNS_LABEL. Each Step in a Task must have a unique name.",
                          "type": "string",
                          "default": ""
                        },
                        "onError": {
                          "description": "OnError defines the exiting behavior of a container on error can be set to [ continue | stopAndFail ]",
                          "type": "string"
                        },
                        "params": {
                          "description": "Params declares parameters passed to this step action.",
                          "type": "array",
                          "items": {
                            "description": "Param declares an ParamValues to use for the parameter called name.",
                            "type": "object",
                            "required": [
                              "name",
                              "value"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "value": {
                                "description": "ResultValue is a type alias of ParamValue",
                                "type": "object",
                                "required": [
                                  "Type",
                                  "StringVal",
                                  "ArrayVal",
                                  "ObjectVal"
                                ],
                                "properties": {
                                  "ArrayVal": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "ObjectVal": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string",
                                      "default": ""
                                    }
                                  },
                                  "StringVal": {
                                    "description": "Represents the stored type of ParamValues.",
                                    "type": "string",
                                    "default": ""
                                  },
                                  "Type": {
                                    "type": "string",
                                    "default": ""
                                  }
                                }
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ref": {
                          "description": "Ref can be used to refer to a specific instance of a StepAction.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the referenced step",
                              "type": "string"
                            }
                          }
                        },
                        "results": {
                          "description": "Results declares StepResults produced by the Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.\n\nIt can be used in an inlined Step when used to store Results to $(step.results.resultName.path). It cannot be used when referencing StepActions using [v1.Step.Ref]. The Results declared by the StepActions will be stored here instead.",
                          "type": "array",
                          "items": {
                            "description": "StepResult used to describe the Results of a Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "description": {
                                "description": "Description is a human-readable description of the result",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name the given name",
                                "type": "string",
                                "default": ""
                              },
                              "properties": {
                                "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                                "type": "object",
                                "additionalProperties": {
                                  "default": {},
                                  "$ref": "#/definitions/v1.PropertySpec"
                                }
                              },
                              "type": {
                                "description": "The possible types are 'string', 'array', and 'object', with 'string' as the default.",
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "script": {
                          "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.",
                          "type": "string"
                        },
                        "securityContext": {
                          "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                          "$ref": "#/definitions/v1.SecurityContext"
                        },
                        "stderrConfig": {
                          "description": "StepOutputConfig stores configuration for a step output stream.",
                          "type": "object",
                          "properties": {
                            "path": {
                              "description": "Path to duplicate stdout stream to on container's local filesystem.",
                              "type": "string"
                            }
                          }
                        },
                        "stdoutConfig": {
                          "description": "StepOutputConfig stores configuration for a step output stream.",
                          "type": "object",
                          "properties": {
                            "path": {
                              "description": "Path to duplicate stdout stream to on container's local filesystem.",
                              "type": "string"
                            }
                          }
                        },
                        "timeout": {
                          "description": "Timeout is the time after which the step times out. Defaults to never. Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                          "$ref": "#/definitions/v1.Duration"
                        },
                        "volumeDevices": {
                          "description": "volumeDevices is the list of block devices to be used by the Step.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.VolumeDevice"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "devicePath",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "volumeMounts": {
                          "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                          "type": "array",
                          "items": {
                            "default": {},
                            "$ref": "#/definitions/v1.VolumeMount"
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-patch-merge-key": "mountPath",
                          "x-kubernetes-patch-strategy": "merge"
                        },
                        "workingDir": {
                          "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                          "type": "string"
                        },
                        "workspaces": {
                          "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\" for this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Step wants exclusive access to. Adding a workspace to this list means that any other Step or Sidecar that does not also request this Workspace will not have access to it.",
                          "type": "array",
                          "items": {
                            "description": "WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access to a Workspace defined in a Task.",
                            "type": "object",
                            "required": [
                              "name",
                              "mountPath"
                            ],
                            "properties": {
                              "mountPath": {
                                "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar, overriding any MountPath specified in the Task's WorkspaceDeclaration.",
                                "type": "string",
                                "default": ""
                              },
                              "name": {
                                "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                                "type": "string",
                                "default": ""
                              }
                            }
                          },
                          "x-kubernetes-list-type": "atomic"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "volumes": {
                    "description": "Volumes is a collection of volumes that are available to mount into the steps of the build.",
                    "type": "array",
                    "items": {
                      "default": {},
                      "$ref": "#/definitions/v1.Volume"
                    },
                    "x-kubernetes-list-type": "atomic"
                  },
                  "workspaces": {
                    "description": "Workspaces are the volumes that this Task requires.",
                    "type": "array",
                    "items": {
                      "description": "WorkspaceDeclaration is a declaration of a volume that a Task requires.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "description": {
                          "description": "Description is an optional human readable description of this volume.",
                          "type": "string"
                        },
                        "mountPath": {
                          "description": "MountPath overrides the directory that the volume will be made available at.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name by which you can bind the volume at runtime.",
                          "type": "string",
                          "default": ""
                        },
                        "optional": {
                          "description": "Optional marks a Workspace as not being required in TaskRuns. By default this field is false and so declared workspaces are required.",
                          "type": "boolean"
                        },
                        "readOnly": {
                          "description": "ReadOnly dictates whether a mounted volume is writable. By default this field is false and so mounted volumes are writable.",
                          "type": "boolean"
                        }
                      }
                    },
                    "x-kubernetes-list-type": "atomic"
                  }
                }
              }
            }
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "tekton.dev",
            "kind": "TaskRun",
            "version": "v1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "taskruns.tekton.dev",
          "uid": "2b0cef6e-0668-443f-9cf9-eebfa8dd8a7e",
          "resourceVersion": "149693906",
          "generation": 3,
          "creationTimestamp": "2024-03-20T05:58:18Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-pipelines",
            "pipeline.tekton.dev/release": "v0.57.0",
            "version": "v0.57.0"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:18Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:18Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:pipeline.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {},
                    "f:webhook": {
                      ".": {},
                      "f:clientConfig": {
                        ".": {},
                        "f:service": {
                          ".": {},
                          "f:name": {},
                          "f:namespace": {},
                          "f:port": {}
                        }
                      },
                      "f:conversionReviewVersions": {}
                    }
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            },
            {
              "manager": "webhook",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-25T16:45:14Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:spec": {
                  "f:conversion": {
                    "f:webhook": {
                      "f:clientConfig": {
                        "f:caBundle": {},
                        "f:service": {
                          "f:path": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "spec": {
          "group": "tekton.dev",
          "names": {
            "plural": "taskruns",
            "singular": "taskrun",
            "shortNames": [
              "tr",
              "trs"
            ],
            "kind": "TaskRun",
            "listKind": "TaskRunList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Succeeded",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason"
                },
                {
                  "name": "StartTime",
                  "type": "date",
                  "jsonPath": ".status.startTime"
                },
                {
                  "name": "CompletionTime",
                  "type": "date",
                  "jsonPath": ".status.completionTime"
                }
              ]
            },
            {
              "name": "v1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Succeeded",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason"
                },
                {
                  "name": "StartTime",
                  "type": "date",
                  "jsonPath": ".status.startTime"
                },
                {
                  "name": "CompletionTime",
                  "type": "date",
                  "jsonPath": ".status.completionTime"
                }
              ]
            }
          ],
          "conversion": {
            "strategy": "Webhook",
            "webhook": {
              "clientConfig": {
                "service": {
                  "namespace": "tekton",
                  "name": "tekton-pipelines-webhook",
                  "path": "/resource-conversion",
                  "port": 443
                },
                "caBundle": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqRENDQWpPZ0F3SUJBZ0lSQU5xcG9yOEhmWWZPajJUV2VNUXROejh3Q2dZSUtvWkl6ajBFQXdJd1JERVUKTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmxiR2x1WlhNdApkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNQjRYRFRJME1ETXlOVEUyTkRVd09Gb1hEVEkwTURRd01URTJORFV3Ck9Gb3dSREVVTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmwKYkdsdVpYTXRkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRApRZ0FFeHAvMURsZE9PanA0Ynh5dHpGd0Mxb3N0eCtFUXZCaFo5ellIcGpNWDRQSHFwSFFkUzF2VHAzS3pCZTNuCkdTbTVoNDltQnhiajh3V3dBUWg2ZlgxbXJhT0NBUVF3Z2dFQU1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVWZyWllIRlRGWDkvemNiejZqTzBrc0pQN0VGTXdnWjRHQTFVZEVRU0JsakNCazRJWWRHVnJkRzl1CkxYQnBjR1ZzYVc1bGN5MTNaV0pvYjI5cmdoOTBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnIKZEc5dWdpTjBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnJkRzl1TG5OMlk0SXhkR1ZyZEc5dQpMWEJwY0dWc2FXNWxjeTEzWldKb2IyOXJMblJsYTNSdmJpNXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQUtCZ2dxCmhrak9QUVFEQWdOSEFEQkVBaUJOTlkydUk2Wmp1YVl6aGl5Ly9VNXYxejBLSUU0N1RHSEplRVhVZGttTGRBSWcKUzI0ZEhPejlDWXg5eGJnRFpmNXZxUW04TUwyU2wxMDg3SXBwcFQ3dmV4TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
              },
              "conversionReviewVersions": [
                "v1beta1",
                "v1"
              ]
            }
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:18Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:18Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "taskruns",
            "singular": "taskrun",
            "shortNames": [
              "tr",
              "trs"
            ],
            "kind": "TaskRun",
            "listKind": "TaskRunList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "Succeeded",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status"
        },
        {
          "name": "Reason",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason"
        },
        {
          "name": "StartTime",
          "type": "date",
          "jsonPath": ".status.startTime"
        },
        {
          "name": "CompletionTime",
          "type": "date",
          "jsonPath": ".status.completionTime"
        }
      ],
      "short": "TaskRun",
      "apiGroup": "tekton.dev",
      "apiKind": "TaskRun",
      "apiVersion": "v1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.v1alpha1.StepAction",
      "definition": {
        "properties": {
          "spec": {
            "description": "StepActionSpec contains the actionable components of a step.",
            "type": "object",
            "properties": {
              "args": {
                "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                "type": "array",
                "items": {
                  "type": "string",
                  "default": ""
                },
                "x-kubernetes-list-type": "atomic"
              },
              "command": {
                "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                "type": "array",
                "items": {
                  "type": "string",
                  "default": ""
                },
                "x-kubernetes-list-type": "atomic"
              },
              "env": {
                "description": "List of environment variables to set in the container. Cannot be updated.",
                "type": "array",
                "items": {
                  "default": {},
                  "$ref": "#/definitions/v1.EnvVar"
                },
                "x-kubernetes-list-type": "atomic",
                "x-kubernetes-patch-merge-key": "name",
                "x-kubernetes-patch-strategy": "merge"
              },
              "image": {
                "description": "Image reference name to run for this StepAction. More info: https://kubernetes.io/docs/concepts/containers/images",
                "type": "string"
              },
              "params": {
                "description": "Params is a list of input parameters required to run the stepAction. Params must be supplied as inputs in Steps unless they declare a defaultvalue.",
                "type": "array",
                "items": {
                  "description": "ParamSpec defines arbitrary parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "default": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    },
                    "description": {
                      "description": "Description is a user-facing description of the parameter that may be used to populate a UI.",
                      "type": "string"
                    },
                    "enum": {
                      "description": "Enum declares a set of allowed param input values for tasks/pipelines that can be validated. If Enum is not set, no input validation is performed for the param.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "default": ""
                      }
                    },
                    "name": {
                      "description": "Name declares the name by which a parameter is referenced.",
                      "type": "string",
                      "default": ""
                    },
                    "properties": {
                      "description": "Properties is the JSON Schema properties to support key-value pairs parameter.",
                      "type": "object",
                      "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/v1.PropertySpec"
                      }
                    },
                    "type": {
                      "description": "Type is the user-specified type of the parameter. The possible types are currently \"string\", \"array\" and \"object\", and \"string\" is the default.",
                      "type": "string"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "results": {
                "description": "Results are values that this StepAction can output",
                "type": "array",
                "items": {
                  "description": "StepResult used to describe the Results of a Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "description": {
                      "description": "Description is a human-readable description of the result",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name the given name",
                      "type": "string",
                      "default": ""
                    },
                    "properties": {
                      "description": "Properties is the JSON Schema properties to support key-value pairs results.",
                      "type": "object",
                      "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/v1.PropertySpec"
                      }
                    },
                    "type": {
                      "description": "The possible types are 'string', 'array', and 'object', with 'string' as the default.",
                      "type": "string"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "script": {
                "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.",
                "type": "string"
              },
              "securityContext": {
                "description": "SecurityContext defines the security options the Step should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/ The value set in StepAction will take precedence over the value from Task.",
                "$ref": "#/definitions/v1.SecurityContext"
              },
              "volumeMounts": {
                "description": "Volumes to mount into the Step's filesystem. Cannot be updated.",
                "type": "array",
                "items": {
                  "default": {},
                  "$ref": "#/definitions/v1.VolumeMount"
                },
                "x-kubernetes-list-type": "atomic",
                "x-kubernetes-patch-merge-key": "mountPath",
                "x-kubernetes-patch-strategy": "merge"
              },
              "workingDir": {
                "description": "Step's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                "type": "string"
              }
            }
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "tekton.dev",
            "kind": "StepAction",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "stepactions.tekton.dev",
          "uid": "f0848bb2-32bf-49d1-91f9-9369098d8120",
          "resourceVersion": "145322355",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:17Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-pipelines",
            "pipeline.tekton.dev/release": "v0.57.0",
            "version": "v0.57.0"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:17Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:17Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:pipeline.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "tekton.dev",
          "names": {
            "plural": "stepactions",
            "singular": "stepaction",
            "kind": "StepAction",
            "listKind": "StepActionList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:17Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:17Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "stepactions",
            "singular": "stepaction",
            "kind": "StepAction",
            "listKind": "StepActionList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "StepAction",
      "apiGroup": "tekton.dev",
      "apiKind": "StepAction",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.v1alpha1.VerificationPolicy",
      "definition": {
        "properties": {
          "spec": {
            "description": "VerificationPolicySpec defines the patterns and authorities.",
            "type": "object",
            "required": [
              "resources",
              "authorities"
            ],
            "properties": {
              "authorities": {
                "description": "Authorities defines the rules for validating signatures.",
                "type": "array",
                "items": {
                  "description": "The Authority block defines the keys for validating signatures.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "key": {
                      "description": "KeyRef defines the reference to a public key",
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "Data contains the inline public key.",
                          "type": "string"
                        },
                        "hashAlgorithm": {
                          "description": "HashAlgorithm always defaults to sha256 if the algorithm hasn't been explicitly set",
                          "type": "string"
                        },
                        "kms": {
                          "description": "KMS contains the KMS url of the public key Supported formats differ based on the KMS system used. One example of a KMS url could be: gcpkms://projects/[PROJECT]/locations/[LOCATION]>/keyRings/[KEYRING]/cryptoKeys/[KEY]/cryptoKeyVersions/[KEY_VERSION] For more examples please refer https://docs.sigstore.dev/cosign/kms_support. Note that the KMS is not supported yet.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef sets a reference to a secret with the key.",
                          "$ref": "#/definitions/v1.SecretReference"
                        }
                      }
                    },
                    "name": {
                      "description": "Name is the name for this authority.",
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              },
              "mode": {
                "description": "Mode controls whether a failing policy will fail the taskrun/pipelinerun, or only log the warnings enforce - fail the taskrun/pipelinerun if verification fails (default) warn - don't fail the taskrun/pipelinerun if verification fails but log warnings",
                "type": "string"
              },
              "resources": {
                "description": "Resources defines the patterns of resources sources that should be subject to this policy. For example, we may want to apply this Policy from a certain GitHub repo. Then the ResourcesPattern should be valid regex. E.g. If using gitresolver, and we want to config keys from a certain git repo. `ResourcesPattern` can be `https://github.com/tektoncd/catalog.git`, we will use regex to filter out those resources.",
                "type": "array",
                "items": {
                  "description": "ResourcePattern defines the pattern of the resource source",
                  "type": "object",
                  "required": [
                    "pattern"
                  ],
                  "properties": {
                    "pattern": {
                      "description": "Pattern defines a resource pattern. Regex is created to filter resources based on `Pattern` Example patterns: GitHub resource: https://github.com/tektoncd/catalog.git, https://github.com/tektoncd/* Bundle resource: gcr.io/tekton-releases/catalog/upstream/git-clone, gcr.io/tekton-releases/catalog/upstream/* Hub resource: https://artifacthub.io/*,",
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              }
            }
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "tekton.dev",
            "kind": "VerificationPolicy",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "verificationpolicies.tekton.dev",
          "uid": "0a0631f4-031f-4f4d-8281-95f647eff502",
          "resourceVersion": "145322463",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:22Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-pipelines",
            "pipeline.tekton.dev/release": "v0.57.0",
            "version": "v0.57.0"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:22Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:22Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:pipeline.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "tekton.dev",
          "names": {
            "plural": "verificationpolicies",
            "singular": "verificationpolicy",
            "kind": "VerificationPolicy",
            "listKind": "VerificationPolicyList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              }
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:22Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:22Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "verificationpolicies",
            "singular": "verificationpolicy",
            "kind": "VerificationPolicy",
            "listKind": "VerificationPolicyList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "VerificationPolicy",
      "apiGroup": "tekton.dev",
      "apiKind": "VerificationPolicy",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.v1beta1.ClusterTask",
      "definition": {
        "properties": {
          "spec": {
            "type": "object"
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "tekton.dev",
            "kind": "ClusterTask",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "clustertasks.tekton.dev",
          "uid": "2981162f-6fd3-4c71-978d-94bdf8e5a760",
          "resourceVersion": "145322095",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:06Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-pipelines",
            "pipeline.tekton.dev/release": "v0.57.0",
            "version": "v0.57.0"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:06Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:06Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:pipeline.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {},
                    "f:webhook": {
                      ".": {},
                      "f:clientConfig": {
                        ".": {},
                        "f:service": {
                          ".": {},
                          "f:name": {},
                          "f:namespace": {},
                          "f:port": {}
                        }
                      },
                      "f:conversionReviewVersions": {}
                    }
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "tekton.dev",
          "names": {
            "plural": "clustertasks",
            "singular": "clustertask",
            "kind": "ClusterTask",
            "listKind": "ClusterTaskList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Cluster",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "Webhook",
            "webhook": {
              "clientConfig": {
                "service": {
                  "namespace": "tekton",
                  "name": "tekton-pipelines-webhook",
                  "port": 443
                }
              },
              "conversionReviewVersions": [
                "v1beta1"
              ]
            }
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:06Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:06Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "clustertasks",
            "singular": "clustertask",
            "kind": "ClusterTask",
            "listKind": "ClusterTaskList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "ClusterTask",
      "apiGroup": "tekton.dev",
      "apiKind": "ClusterTask",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": false
    },
    {
      "alternatives": [],
      "name": "dev.tekton.v1beta1.CustomRun",
      "definition": {
        "properties": {
          "spec": {
            "description": "CustomRunSpec defines the desired state of CustomRun",
            "type": "object",
            "properties": {
              "customRef": {
                "description": "TaskRef can be used to refer to a specific instance of a task.",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent Note: A Task with non-empty APIVersion and Kind is considered a Custom Task",
                    "type": "string"
                  },
                  "bundle": {
                    "description": "Bundle url reference to a Tekton Bundle.\n\nDeprecated: Please use ResolverRef with the bundles resolver instead.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "TaskKind indicates the Kind of the Task: 1. Namespaced Task when Kind is set to \"Task\". If Kind is \"\", it defaults to \"Task\". 2. Cluster-Scoped Task when Kind is set to \"ClusterTask\" 3. Custom Task when Kind is non-empty and APIVersion is non-empty",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                  }
                }
              },
              "customSpec": {
                "description": "EmbeddedCustomRunSpec allows custom task definitions to be embedded",
                "type": "object",
                "properties": {
                  "apiVersion": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "spec": {
                    "description": "Spec is a specification of a custom task",
                    "default": {},
                    "$ref": "#/definitions/k8s.io.apimachinery.pkg.runtime.RawExtension"
                  }
                }
              },
              "params": {
                "type": "array",
                "items": {
                  "description": "Param declares an ParamValues to use for the parameter called name.",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "default": ""
                    },
                    "value": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "retries": {
                "description": "Used for propagating retries count to custom tasks",
                "type": "integer",
                "format": "int32"
              },
              "serviceAccountName": {
                "type": "string",
                "default": ""
              },
              "status": {
                "description": "Used for cancelling a customrun (and maybe more later on)",
                "type": "string"
              },
              "statusMessage": {
                "description": "Status message for cancellation.",
                "type": "string"
              },
              "timeout": {
                "description": "Time after which the custom-task times out. Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration",
                "$ref": "#/definitions/v1.Duration"
              },
              "workspaces": {
                "description": "Workspaces is a list of WorkspaceBindings from volumes to workspaces.",
                "type": "array",
                "items": {
                  "description": "WorkspaceBinding maps a Task's declared workspace to a Volume.",
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "configMap": {
                      "description": "ConfigMap represents a configMap that should populate this workspace.",
                      "$ref": "#/definitions/v1.ConfigMapVolumeSource"
                    },
                    "csi": {
                      "description": "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.",
                      "$ref": "#/definitions/v1.CSIVolumeSource"
                    },
                    "emptyDir": {
                      "description": "EmptyDir represents a temporary directory that shares a Task's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir Either this OR PersistentVolumeClaim can be used.",
                      "$ref": "#/definitions/v1.EmptyDirVolumeSource"
                    },
                    "name": {
                      "description": "Name is the name of the workspace populated by the volume.",
                      "type": "string",
                      "default": ""
                    },
                    "persistentVolumeClaim": {
                      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Either this OR EmptyDir can be used.",
                      "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
                    },
                    "projected": {
                      "description": "Projected represents a projected volume that should populate this workspace.",
                      "$ref": "#/definitions/v1.ProjectedVolumeSource"
                    },
                    "secret": {
                      "description": "Secret represents a secret that should populate this workspace.",
                      "$ref": "#/definitions/v1.SecretVolumeSource"
                    },
                    "subPath": {
                      "description": "SubPath is optionally a directory on the volume which should be used for this binding (i.e. the volume will be mounted at this sub directory).",
                      "type": "string"
                    },
                    "volumeClaimTemplate": {
                      "description": "VolumeClaimTemplate is a template for a claim that will be created in the same namespace. The PipelineRun controller is responsible for creating a unique claim for each instance of PipelineRun.",
                      "$ref": "#/definitions/v1.PersistentVolumeClaim"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              }
            }
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "tekton.dev",
            "kind": "CustomRun",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "customruns.tekton.dev",
          "uid": "f404a7a4-4585-4714-bb48-e19a7e2a8515",
          "resourceVersion": "145322119",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:07Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-pipelines",
            "pipeline.tekton.dev/release": "v0.57.0",
            "version": "v0.57.0"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:07Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:07Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:pipeline.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "tekton.dev",
          "names": {
            "plural": "customruns",
            "singular": "customrun",
            "kind": "CustomRun",
            "listKind": "CustomRunList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Succeeded",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason"
                },
                {
                  "name": "StartTime",
                  "type": "date",
                  "jsonPath": ".status.startTime"
                },
                {
                  "name": "CompletionTime",
                  "type": "date",
                  "jsonPath": ".status.completionTime"
                }
              ]
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:07Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:07Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "customruns",
            "singular": "customrun",
            "kind": "CustomRun",
            "listKind": "CustomRunList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "Succeeded",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].status"
        },
        {
          "name": "Reason",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type==\"Succeeded\")].reason"
        },
        {
          "name": "StartTime",
          "type": "date",
          "jsonPath": ".status.startTime"
        },
        {
          "name": "CompletionTime",
          "type": "date",
          "jsonPath": ".status.completionTime"
        }
      ],
      "short": "CustomRun",
      "apiGroup": "tekton.dev",
      "apiKind": "CustomRun",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.resolution.v1beta1.ResolutionRequest",
      "definition": {
        "properties": {
          "spec": {
            "description": "ResolutionRequestSpec are all the fields in the spec of the ResolutionRequest CRD.",
            "type": "object",
            "properties": {
              "params": {
                "description": "Parameters are the runtime attributes passed to the resolver to help it figure out how to resolve the resource being requested. For example: repo URL, commit SHA, path to file, the kind of authentication to leverage, etc.",
                "type": "array",
                "items": {
                  "description": "Param declares an ParamValues to use for the parameter called name.",
                  "type": "object",
                  "required": [
                    "name",
                    "value"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "default": ""
                    },
                    "value": {
                      "description": "ResultValue is a type alias of ParamValue",
                      "type": "object",
                      "required": [
                        "Type",
                        "StringVal",
                        "ArrayVal",
                        "ObjectVal"
                      ],
                      "properties": {
                        "ArrayVal": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "default": ""
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "ObjectVal": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string",
                            "default": ""
                          }
                        },
                        "StringVal": {
                          "description": "Represents the stored type of ParamValues.",
                          "type": "string",
                          "default": ""
                        },
                        "Type": {
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              }
            }
          },
          "status": {
            "description": "ResolutionRequestStatus are all the fields in a ResolutionRequest's status subresource.",
            "type": "object",
            "required": [
              "data",
              "source",
              "refSource"
            ],
            "properties": {
              "annotations": {
                "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "default": ""
                }
              },
              "conditions": {
                "description": "Conditions the latest available observations of a resource's current state.",
                "type": "array",
                "items": {
                  "default": {},
                  "$ref": "#/definitions/knative.Condition"
                },
                "x-kubernetes-patch-merge-key": "type",
                "x-kubernetes-patch-strategy": "merge"
              },
              "data": {
                "description": "Data is a string representation of the resolved content of the requested resource in-lined into the ResolutionRequest object.",
                "type": "string",
                "default": ""
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
                "type": "integer",
                "format": "int64"
              },
              "refSource": {
                "description": "RefSource contains the information that can uniquely identify where a remote built definition came from i.e. Git repositories, Tekton Bundles in OCI registry and hub.",
                "type": "object",
                "properties": {
                  "digest": {
                    "description": "Digest is a collection of cryptographic digests for the contents of the artifact specified by URI. Example: {\"sha1\": \"f99d13e554ffcb696dee719fa85b695cb5b0f428\"}",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "entryPoint": {
                    "description": "EntryPoint identifies the entry point into the build. This is often a path to a build definition file and/or a target label within that file. Example: \"task/git-clone/0.8/git-clone.yaml\"",
                    "type": "string"
                  },
                  "uri": {
                    "description": "URI indicates the identity of the source of the build definition. Example: \"https://github.com/tektoncd/catalog\"",
                    "type": "string"
                  }
                }
              },
              "source": {
                "description": "RefSource contains the information that can uniquely identify where a remote built definition came from i.e. Git repositories, Tekton Bundles in OCI registry and hub.",
                "type": "object",
                "properties": {
                  "digest": {
                    "description": "Digest is a collection of cryptographic digests for the contents of the artifact specified by URI. Example: {\"sha1\": \"f99d13e554ffcb696dee719fa85b695cb5b0f428\"}",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "entryPoint": {
                    "description": "EntryPoint identifies the entry point into the build. This is often a path to a build definition file and/or a target label within that file. Example: \"task/git-clone/0.8/git-clone.yaml\"",
                    "type": "string"
                  },
                  "uri": {
                    "description": "URI indicates the identity of the source of the build definition. Example: \"https://github.com/tektoncd/catalog\"",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "resolution.tekton.dev",
            "kind": "ResolutionRequest",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "resolutionrequests.resolution.tekton.dev",
          "uid": "ac07f8e2-8262-4baf-8f38-c29ec2fc3e72",
          "resourceVersion": "149693904",
          "generation": 3,
          "creationTimestamp": "2024-03-20T05:58:14Z",
          "labels": {
            "resolution.tekton.dev/release": "devel"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:14Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:14Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:resolution.tekton.dev/release": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {},
                    "f:webhook": {
                      ".": {},
                      "f:clientConfig": {
                        ".": {},
                        "f:service": {
                          ".": {},
                          "f:name": {},
                          "f:namespace": {},
                          "f:port": {}
                        }
                      },
                      "f:conversionReviewVersions": {}
                    }
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            },
            {
              "manager": "webhook",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-25T16:45:14Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:spec": {
                  "f:conversion": {
                    "f:webhook": {
                      "f:clientConfig": {
                        "f:caBundle": {},
                        "f:service": {
                          "f:path": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "spec": {
          "group": "resolution.tekton.dev",
          "names": {
            "plural": "resolutionrequests",
            "singular": "resolutionrequest",
            "shortNames": [
              "resolutionrequest",
              "resolutionrequests"
            ],
            "kind": "ResolutionRequest",
            "listKind": "ResolutionRequestList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": false,
              "deprecated": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Succeeded",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Succeeded')].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Succeeded')].reason"
                }
              ]
            },
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "OwnerKind",
                  "type": "string",
                  "jsonPath": ".metadata.ownerReferences[0].kind"
                },
                {
                  "name": "Owner",
                  "type": "string",
                  "jsonPath": ".metadata.ownerReferences[0].name"
                },
                {
                  "name": "Succeeded",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Succeeded')].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Succeeded')].reason"
                },
                {
                  "name": "StartTime",
                  "type": "string",
                  "jsonPath": ".metadata.creationTimestamp"
                },
                {
                  "name": "EndTime",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Succeeded')].lastTransitionTime"
                }
              ]
            }
          ],
          "conversion": {
            "strategy": "Webhook",
            "webhook": {
              "clientConfig": {
                "service": {
                  "namespace": "tekton",
                  "name": "tekton-pipelines-webhook",
                  "path": "/resource-conversion",
                  "port": 443
                },
                "caBundle": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqRENDQWpPZ0F3SUJBZ0lSQU5xcG9yOEhmWWZPajJUV2VNUXROejh3Q2dZSUtvWkl6ajBFQXdJd1JERVUKTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmxiR2x1WlhNdApkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNQjRYRFRJME1ETXlOVEUyTkRVd09Gb1hEVEkwTURRd01URTJORFV3Ck9Gb3dSREVVTUJJR0ExVUVDaE1MYTI1aGRHbDJaUzVrWlhZeExEQXFCZ05WQkFNVEkzUmxhM1J2Ymkxd2FYQmwKYkdsdVpYTXRkMlZpYUc5dmF5NTBaV3QwYjI0dWMzWmpNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRApRZ0FFeHAvMURsZE9PanA0Ynh5dHpGd0Mxb3N0eCtFUXZCaFo5ellIcGpNWDRQSHFwSFFkUzF2VHAzS3pCZTNuCkdTbTVoNDltQnhiajh3V3dBUWg2ZlgxbXJhT0NBUVF3Z2dFQU1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVWZyWllIRlRGWDkvemNiejZqTzBrc0pQN0VGTXdnWjRHQTFVZEVRU0JsakNCazRJWWRHVnJkRzl1CkxYQnBjR1ZzYVc1bGN5MTNaV0pvYjI5cmdoOTBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnIKZEc5dWdpTjBaV3QwYjI0dGNHbHdaV3hwYm1WekxYZGxZbWh2YjJzdWRHVnJkRzl1TG5OMlk0SXhkR1ZyZEc5dQpMWEJwY0dWc2FXNWxjeTEzWldKb2IyOXJMblJsYTNSdmJpNXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQUtCZ2dxCmhrak9QUVFEQWdOSEFEQkVBaUJOTlkydUk2Wmp1YVl6aGl5Ly9VNXYxejBLSUU0N1RHSEplRVhVZGttTGRBSWcKUzI0ZEhPejlDWXg5eGJnRFpmNXZxUW04TUwyU2wxMDg3SXBwcFQ3dmV4TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
              },
              "conversionReviewVersions": [
                "v1alpha1",
                "v1beta1"
              ]
            }
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:14Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:14Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "resolutionrequests",
            "singular": "resolutionrequest",
            "shortNames": [
              "resolutionrequest",
              "resolutionrequests"
            ],
            "kind": "ResolutionRequest",
            "listKind": "ResolutionRequestList",
            "categories": [
              "tekton",
              "tekton-pipelines"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "OwnerKind",
          "type": "string",
          "jsonPath": ".metadata.ownerReferences[0].kind"
        },
        {
          "name": "Owner",
          "type": "string",
          "jsonPath": ".metadata.ownerReferences[0].name"
        },
        {
          "name": "Succeeded",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type=='Succeeded')].status"
        },
        {
          "name": "Reason",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type=='Succeeded')].reason"
        },
        {
          "name": "StartTime",
          "type": "string",
          "jsonPath": ".metadata.creationTimestamp"
        },
        {
          "name": "EndTime",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type=='Succeeded')].lastTransitionTime"
        }
      ],
      "short": "ResolutionRequest",
      "apiGroup": "resolution.tekton.dev",
      "apiKind": "ResolutionRequest",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.triggers.v1alpha1.ClusterInterceptor",
      "definition": {
        "properties": {
          "spec": {
            "type": "object"
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "triggers.tekton.dev",
            "kind": "ClusterInterceptor",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "clusterinterceptors.triggers.tekton.dev",
          "uid": "52b5aa04-99af-4a1b-81fb-34d973a4d34f",
          "resourceVersion": "145322744",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:33Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-triggers",
            "triggers.tekton.dev/release": "v0.26.1",
            "version": "v0.26.1"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:33Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:33Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:triggers.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "triggers.tekton.dev",
          "names": {
            "plural": "clusterinterceptors",
            "singular": "clusterinterceptor",
            "shortNames": [
              "ci"
            ],
            "kind": "ClusterInterceptor",
            "listKind": "ClusterInterceptorList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "scope": "Cluster",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:33Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:33Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "clusterinterceptors",
            "singular": "clusterinterceptor",
            "shortNames": [
              "ci"
            ],
            "kind": "ClusterInterceptor",
            "listKind": "ClusterInterceptorList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "ClusterInterceptor",
      "apiGroup": "triggers.tekton.dev",
      "apiKind": "ClusterInterceptor",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": false
    },
    {
      "alternatives": [],
      "name": "dev.tekton.triggers.v1alpha1.Interceptor",
      "definition": {
        "properties": {
          "spec": {
            "type": "object"
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "triggers.tekton.dev",
            "kind": "Interceptor",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "interceptors.triggers.tekton.dev",
          "uid": "6f9c1572-a697-42fb-be3d-13bcae5a4a9a",
          "resourceVersion": "145322796",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:36Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-triggers",
            "triggers.tekton.dev/release": "v0.26.1",
            "version": "v0.26.1"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:36Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:36Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:triggers.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "triggers.tekton.dev",
          "names": {
            "plural": "interceptors",
            "singular": "interceptor",
            "shortNames": [
              "ni"
            ],
            "kind": "Interceptor",
            "listKind": "InterceptorList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:36Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:36Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "interceptors",
            "singular": "interceptor",
            "shortNames": [
              "ni"
            ],
            "kind": "Interceptor",
            "listKind": "InterceptorList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "Interceptor",
      "apiGroup": "triggers.tekton.dev",
      "apiKind": "Interceptor",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.triggers.v1beta1.ClusterTriggerBinding",
      "definition": {
        "properties": {
          "spec": {
            "type": "object"
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "triggers.tekton.dev",
            "kind": "ClusterTriggerBinding",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "clustertriggerbindings.triggers.tekton.dev",
          "uid": "2eb3f587-3b2d-4be1-b6ee-26c464e411a7",
          "resourceVersion": "145322757",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:33Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-triggers",
            "triggers.tekton.dev/release": "v0.26.1",
            "version": "v0.26.1"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:33Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:33Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:triggers.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "triggers.tekton.dev",
          "names": {
            "plural": "clustertriggerbindings",
            "singular": "clustertriggerbinding",
            "shortNames": [
              "ctb"
            ],
            "kind": "ClusterTriggerBinding",
            "listKind": "ClusterTriggerBindingList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "scope": "Cluster",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            },
            {
              "name": "v1alpha1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:33Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:33Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "clustertriggerbindings",
            "singular": "clustertriggerbinding",
            "shortNames": [
              "ctb"
            ],
            "kind": "ClusterTriggerBinding",
            "listKind": "ClusterTriggerBindingList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "ClusterTriggerBinding",
      "apiGroup": "triggers.tekton.dev",
      "apiKind": "ClusterTriggerBinding",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": false
    },
    {
      "alternatives": [],
      "name": "dev.tekton.triggers.v1beta1.EventListener",
      "definition": {
        "properties": {
          "spec": {
            "type": "object"
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "triggers.tekton.dev",
            "kind": "EventListener",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "eventlisteners.triggers.tekton.dev",
          "uid": "63c40797-d756-4f4a-b21d-d15056ba0e73",
          "resourceVersion": "145322763",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:34Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-triggers",
            "triggers.tekton.dev/release": "v0.26.1",
            "version": "v0.26.1"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:34Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:34Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:triggers.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "triggers.tekton.dev",
          "names": {
            "plural": "eventlisteners",
            "singular": "eventlistener",
            "shortNames": [
              "el"
            ],
            "kind": "EventListener",
            "listKind": "EventListenerList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Address",
                  "type": "string",
                  "jsonPath": ".status.address.url"
                },
                {
                  "name": "Available",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Available')].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Available')].reason"
                },
                {
                  "name": "Ready",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Ready')].reason"
                }
              ]
            },
            {
              "name": "v1alpha1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              },
              "additionalPrinterColumns": [
                {
                  "name": "Address",
                  "type": "string",
                  "jsonPath": ".status.address.url"
                },
                {
                  "name": "Available",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Available')].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Available')].reason"
                },
                {
                  "name": "Ready",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
                },
                {
                  "name": "Reason",
                  "type": "string",
                  "jsonPath": ".status.conditions[?(@.type=='Ready')].reason"
                }
              ]
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:34Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:34Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "eventlisteners",
            "singular": "eventlistener",
            "shortNames": [
              "el"
            ],
            "kind": "EventListener",
            "listKind": "EventListenerList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "additionalColumns": [
        {
          "name": "Address",
          "type": "string",
          "jsonPath": ".status.address.url"
        },
        {
          "name": "Available",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type=='Available')].status"
        },
        {
          "name": "Reason",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type=='Available')].reason"
        },
        {
          "name": "Ready",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type=='Ready')].status"
        },
        {
          "name": "Reason",
          "type": "string",
          "jsonPath": ".status.conditions[?(@.type=='Ready')].reason"
        }
      ],
      "short": "EventListener",
      "apiGroup": "triggers.tekton.dev",
      "apiKind": "EventListener",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.triggers.v1beta1.Trigger",
      "definition": {
        "properties": {
          "spec": {
            "type": "object"
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "triggers.tekton.dev",
            "kind": "Trigger",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "triggers.triggers.tekton.dev",
          "uid": "14cc5569-b8fe-4b6c-a452-23a631e2fb4a",
          "resourceVersion": "145322927",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:40Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-triggers",
            "triggers.tekton.dev/release": "v0.26.1",
            "version": "v0.26.1"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:40Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:40Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:triggers.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "triggers.tekton.dev",
          "names": {
            "plural": "triggers",
            "singular": "trigger",
            "shortNames": [
              "tri"
            ],
            "kind": "Trigger",
            "listKind": "TriggerList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            },
            {
              "name": "v1alpha1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:40Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:40Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "triggers",
            "singular": "trigger",
            "shortNames": [
              "tri"
            ],
            "kind": "Trigger",
            "listKind": "TriggerList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "Trigger",
      "apiGroup": "triggers.tekton.dev",
      "apiKind": "Trigger",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.triggers.v1beta1.TriggerBinding",
      "definition": {
        "properties": {
          "spec": {
            "type": "object"
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "triggers.tekton.dev",
            "kind": "TriggerBinding",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "triggerbindings.triggers.tekton.dev",
          "uid": "757180b7-d810-4996-b380-2fc3d1937dbe",
          "resourceVersion": "145322917",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:40Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-triggers",
            "triggers.tekton.dev/release": "v0.26.1",
            "version": "v0.26.1"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:40Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:40Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:triggers.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "triggers.tekton.dev",
          "names": {
            "plural": "triggerbindings",
            "singular": "triggerbinding",
            "shortNames": [
              "tb"
            ],
            "kind": "TriggerBinding",
            "listKind": "TriggerBindingList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            },
            {
              "name": "v1alpha1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:40Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:40Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "triggerbindings",
            "singular": "triggerbinding",
            "shortNames": [
              "tb"
            ],
            "kind": "TriggerBinding",
            "listKind": "TriggerBindingList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "TriggerBinding",
      "apiGroup": "triggers.tekton.dev",
      "apiKind": "TriggerBinding",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "dev.tekton.triggers.v1beta1.TriggerTemplate",
      "definition": {
        "properties": {
          "spec": {
            "type": "object"
          },
          "status": {
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "triggers.tekton.dev",
            "kind": "TriggerTemplate",
            "version": "v1beta1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "triggertemplates.triggers.tekton.dev",
          "uid": "49767410-43ac-4710-8a1b-e0a08f40dfd9",
          "resourceVersion": "145322947",
          "generation": 1,
          "creationTimestamp": "2024-03-20T05:58:41Z",
          "labels": {
            "app.kubernetes.io/instance": "default",
            "app.kubernetes.io/part-of": "tekton-triggers",
            "triggers.tekton.dev/release": "v0.26.1",
            "version": "v0.26.1"
          },
          "managedFields": [
            {
              "manager": "kube-apiserver",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:41Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:status": {
                  "f:acceptedNames": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:conditions": {
                    "k:{\"type\":\"Established\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    },
                    "k:{\"type\":\"NamesAccepted\"}": {
                      ".": {},
                      "f:lastTransitionTime": {},
                      "f:message": {},
                      "f:reason": {},
                      "f:status": {},
                      "f:type": {}
                    }
                  }
                }
              },
              "subresource": "status"
            },
            {
              "manager": "kubectl-create",
              "operation": "Update",
              "apiVersion": "apiextensions.k8s.io/v1",
              "time": "2024-03-20T05:58:41Z",
              "fieldsType": "FieldsV1",
              "fieldsV1": {
                "f:metadata": {
                  "f:labels": {
                    ".": {},
                    "f:app.kubernetes.io/instance": {},
                    "f:app.kubernetes.io/part-of": {},
                    "f:triggers.tekton.dev/release": {},
                    "f:version": {}
                  }
                },
                "f:spec": {
                  "f:conversion": {
                    ".": {},
                    "f:strategy": {}
                  },
                  "f:group": {},
                  "f:names": {
                    "f:categories": {},
                    "f:kind": {},
                    "f:listKind": {},
                    "f:plural": {},
                    "f:shortNames": {},
                    "f:singular": {}
                  },
                  "f:scope": {},
                  "f:versions": {}
                }
              }
            }
          ]
        },
        "spec": {
          "group": "triggers.tekton.dev",
          "names": {
            "plural": "triggertemplates",
            "singular": "triggertemplate",
            "shortNames": [
              "tt"
            ],
            "kind": "TriggerTemplate",
            "listKind": "TriggerTemplateList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1beta1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            },
            {
              "name": "v1alpha1",
              "served": true,
              "storage": false,
              "schema": {
                "openAPIV3Schema": {
                  "type": "object",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "subresources": {
                "status": {}
              }
            }
          ],
          "conversion": {
            "strategy": "None"
          }
        },
        "status": {
          "conditions": [
            {
              "type": "NamesAccepted",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:41Z",
              "reason": "NoConflicts",
              "message": "no conflicts found"
            },
            {
              "type": "Established",
              "status": "True",
              "lastTransitionTime": "2024-03-20T05:58:41Z",
              "reason": "InitialNamesAccepted",
              "message": "the initial names have been accepted"
            }
          ],
          "acceptedNames": {
            "plural": "triggertemplates",
            "singular": "triggertemplate",
            "shortNames": [
              "tt"
            ],
            "kind": "TriggerTemplate",
            "listKind": "TriggerTemplateList",
            "categories": [
              "tekton",
              "tekton-triggers"
            ]
          },
          "storedVersions": [
            "v1beta1"
          ]
        }
      },
      "short": "TriggerTemplate",
      "apiGroup": "triggers.tekton.dev",
      "apiKind": "TriggerTemplate",
      "apiVersion": "v1beta1",
      "readProperties": {
        "spec": "spec",
        "status": "status"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "tekton",
      "sub": "tekton",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject",
        "status": "JSONObject"
      },
      "namespaced": true
    }
  ]
}