{
  "name": "traefik",
  "objects": [
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.IngressRoute",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "IngressRouteSpec defines the desired state of IngressRoute.",
                "required": [
                  "routes"
                ],
                "properties": {
                  "entryPoints": {
                    "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "routes": {
                    "description": "Routes defines the list of routes.",
                    "type": "array",
                    "items": {
                      "description": "Route holds the HTTP route configuration.",
                      "type": "object",
                      "required": [
                        "kind",
                        "match"
                      ],
                      "properties": {
                        "kind": {
                          "description": "Kind defines the kind of the route.\nRule is the only supported kind.",
                          "type": "string",
                          "enum": [
                            "Rule"
                          ]
                        },
                        "match": {
                          "description": "Match defines the router's rule.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule",
                          "type": "string"
                        },
                        "middlewares": {
                          "description": "Middlewares defines the list of references to Middleware resources.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-middleware",
                          "type": "array",
                          "items": {
                            "description": "MiddlewareRef is a reference to a Middleware resource.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines the name of the referenced Middleware resource.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Middleware resource.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "priority": {
                          "description": "Priority defines the router's priority.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority",
                          "type": "integer"
                        },
                        "services": {
                          "description": "Services defines the list of Service.\nIt can contain any combination of TraefikService and/or reference to a Kubernetes Service.",
                          "type": "array",
                          "items": {
                            "description": "Service defines an upstream HTTP service to proxy traffic to.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "kind": {
                                "description": "Kind defines the kind of the Service.",
                                "type": "string",
                                "enum": [
                                  "Service",
                                  "TraefikService"
                                ]
                              },
                              "name": {
                                "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                "type": "string"
                              },
                              "nativeLB": {
                                "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                "type": "boolean"
                              },
                              "passHostHeader": {
                                "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                "type": "boolean"
                              },
                              "port": {
                                "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                "x-kubernetes-int-or-string": true,
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "responseForwarding": {
                                "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                "type": "object",
                                "properties": {
                                  "flushInterval": {
                                    "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                    "type": "string"
                                  }
                                }
                              },
                              "scheme": {
                                "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                "type": "string"
                              },
                              "serversTransport": {
                                "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                "type": "object",
                                "properties": {
                                  "cookie": {
                                    "description": "Cookie defines the sticky cookie configuration.",
                                    "type": "object",
                                    "properties": {
                                      "httpOnly": {
                                        "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                        "type": "boolean"
                                      },
                                      "maxAge": {
                                        "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "Name defines the Cookie name.",
                                        "type": "string"
                                      },
                                      "sameSite": {
                                        "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                        "type": "string"
                                      },
                                      "secure": {
                                        "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                        "type": "boolean"
                                      }
                                    }
                                  }
                                }
                              },
                              "strategy": {
                                "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                "type": "string"
                              },
                              "weight": {
                                "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "syntax": {
                          "description": "Syntax defines the router's rule syntax.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "tls": {
                    "description": "TLS defines the TLS configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls",
                    "type": "object",
                    "properties": {
                      "certResolver": {
                        "description": "CertResolver defines the name of the certificate resolver to use.\nCert resolvers have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers",
                        "type": "string"
                      },
                      "domains": {
                        "description": "Domains defines the list of domains that will be used to issue certificates.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains",
                        "type": "array",
                        "items": {
                          "description": "Domain holds a domain name with SANs.",
                          "type": "object",
                          "properties": {
                            "main": {
                              "description": "Main defines the main domain name.",
                              "type": "string"
                            },
                            "sans": {
                              "description": "SANs defines the subject alternative domain names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "options": {
                        "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.\nIf not defined, the `default` TLSOption is used.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced TLSOption.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced TLSOption.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption",
                            "type": "string"
                          }
                        }
                      },
                      "secretName": {
                        "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                        "type": "string"
                      },
                      "store": {
                        "description": "Store defines the reference to the TLSStore, that will be used to store certificates.\nPlease note that only `default` TLSStore can be used.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced TLSStore.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced TLSStore.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "IngressRoute is the CRD implementation of a Traefik HTTP Router.",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "IngressRoute",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "ingressroutes.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "ingressroutes",
                "singular": "ingressroute",
                "kind": "IngressRoute",
                "listKind": "IngressRouteList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "IngressRoute is the CRD implementation of a Traefik HTTP Router.",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "IngressRouteSpec defines the desired state of IngressRoute.",
                          "type": "object",
                          "required": [
                            "routes"
                          ],
                          "properties": {
                            "entryPoints": {
                              "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "routes": {
                              "description": "Routes defines the list of routes.",
                              "type": "array",
                              "items": {
                                "description": "Route holds the HTTP route configuration.",
                                "type": "object",
                                "required": [
                                  "kind",
                                  "match"
                                ],
                                "properties": {
                                  "kind": {
                                    "description": "Kind defines the kind of the route.\nRule is the only supported kind.",
                                    "type": "string",
                                    "enum": [
                                      "Rule"
                                    ]
                                  },
                                  "match": {
                                    "description": "Match defines the router's rule.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule",
                                    "type": "string"
                                  },
                                  "middlewares": {
                                    "description": "Middlewares defines the list of references to Middleware resources.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-middleware",
                                    "type": "array",
                                    "items": {
                                      "description": "MiddlewareRef is a reference to a Middleware resource.",
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name defines the name of the referenced Middleware resource.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Middleware resource.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "priority": {
                                    "description": "Priority defines the router's priority.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority",
                                    "type": "integer"
                                  },
                                  "services": {
                                    "description": "Services defines the list of Service.\nIt can contain any combination of TraefikService and/or reference to a Kubernetes Service.",
                                    "type": "array",
                                    "items": {
                                      "description": "Service defines an upstream HTTP service to proxy traffic to.",
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "kind": {
                                          "description": "Kind defines the kind of the Service.",
                                          "type": "string",
                                          "enum": [
                                            "Service",
                                            "TraefikService"
                                          ]
                                        },
                                        "name": {
                                          "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                          "type": "string"
                                        },
                                        "nativeLB": {
                                          "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                          "type": "boolean"
                                        },
                                        "passHostHeader": {
                                          "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                          "type": "boolean"
                                        },
                                        "port": {
                                          "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        },
                                        "responseForwarding": {
                                          "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                          "type": "object",
                                          "properties": {
                                            "flushInterval": {
                                              "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "scheme": {
                                          "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                          "type": "string"
                                        },
                                        "serversTransport": {
                                          "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "sticky": {
                                          "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                          "type": "object",
                                          "properties": {
                                            "cookie": {
                                              "description": "Cookie defines the sticky cookie configuration.",
                                              "type": "object",
                                              "properties": {
                                                "httpOnly": {
                                                  "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                                  "type": "boolean"
                                                },
                                                "maxAge": {
                                                  "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                                  "type": "integer"
                                                },
                                                "name": {
                                                  "description": "Name defines the Cookie name.",
                                                  "type": "string"
                                                },
                                                "sameSite": {
                                                  "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                                  "type": "string"
                                                },
                                                "secure": {
                                                  "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                                  "type": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "strategy": {
                                          "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                          "type": "string"
                                        },
                                        "weight": {
                                          "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  },
                                  "syntax": {
                                    "description": "Syntax defines the router's rule syntax.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "tls": {
                              "description": "TLS defines the TLS configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls",
                              "type": "object",
                              "properties": {
                                "certResolver": {
                                  "description": "CertResolver defines the name of the certificate resolver to use.\nCert resolvers have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers",
                                  "type": "string"
                                },
                                "domains": {
                                  "description": "Domains defines the list of domains that will be used to issue certificates.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains",
                                  "type": "array",
                                  "items": {
                                    "description": "Domain holds a domain name with SANs.",
                                    "type": "object",
                                    "properties": {
                                      "main": {
                                        "description": "Main defines the main domain name.",
                                        "type": "string"
                                      },
                                      "sans": {
                                        "description": "SANs defines the subject alternative domain names.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "options": {
                                  "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.\nIf not defined, the `default` TLSOption is used.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced TLSOption.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced TLSOption.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption",
                                      "type": "string"
                                    }
                                  }
                                },
                                "secretName": {
                                  "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                  "type": "string"
                                },
                                "store": {
                                  "description": "Store defines the reference to the TLSStore, that will be used to store certificates.\nPlease note that only `default` TLSStore can be used.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced TLSStore.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced TLSStore.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "ingressroutes",
                "singular": "ingressroute",
                "kind": "IngressRoute",
                "listKind": "IngressRouteList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "IngressRoute",
          "apiGroup": "traefik.io",
          "apiKind": "IngressRoute",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.IngressRoute",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "IngressRouteSpec defines the desired state of IngressRoute.",
                "required": [
                  "routes"
                ],
                "properties": {
                  "entryPoints": {
                    "description": "EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "routes": {
                    "description": "Routes defines the list of routes.",
                    "type": "array",
                    "items": {
                      "description": "Route holds the HTTP route configuration.",
                      "type": "object",
                      "required": [
                        "kind",
                        "match"
                      ],
                      "properties": {
                        "kind": {
                          "description": "Kind defines the kind of the route. Rule is the only supported kind.",
                          "type": "string",
                          "enum": [
                            "Rule"
                          ]
                        },
                        "match": {
                          "description": "Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule",
                          "type": "string"
                        },
                        "middlewares": {
                          "description": "Middlewares defines the list of references to Middleware resources. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-middleware",
                          "type": "array",
                          "items": {
                            "description": "MiddlewareRef is a reference to a Middleware resource.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines the name of the referenced Middleware resource.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Middleware resource.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "priority": {
                          "description": "Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority",
                          "type": "integer"
                        },
                        "services": {
                          "description": "Services defines the list of Service. It can contain any combination of TraefikService and/or reference to a Kubernetes Service.",
                          "type": "array",
                          "items": {
                            "description": "Service defines an upstream HTTP service to proxy traffic to.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "kind": {
                                "description": "Kind defines the kind of the Service.",
                                "type": "string",
                                "enum": [
                                  "Service",
                                  "TraefikService"
                                ]
                              },
                              "name": {
                                "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                "type": "string"
                              },
                              "nativeLB": {
                                "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                "type": "boolean"
                              },
                              "passHostHeader": {
                                "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                                "type": "boolean"
                              },
                              "port": {
                                "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                "x-kubernetes-int-or-string": true,
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "responseForwarding": {
                                "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                "type": "object",
                                "properties": {
                                  "flushInterval": {
                                    "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                    "type": "string"
                                  }
                                }
                              },
                              "scheme": {
                                "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                                "type": "string"
                              },
                              "serversTransport": {
                                "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                                "type": "object",
                                "properties": {
                                  "cookie": {
                                    "description": "Cookie defines the sticky cookie configuration.",
                                    "type": "object",
                                    "properties": {
                                      "httpOnly": {
                                        "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "description": "Name defines the Cookie name.",
                                        "type": "string"
                                      },
                                      "sameSite": {
                                        "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                        "type": "string"
                                      },
                                      "secure": {
                                        "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                        "type": "boolean"
                                      }
                                    }
                                  }
                                }
                              },
                              "strategy": {
                                "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                                "type": "string"
                              },
                              "weight": {
                                "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "tls": {
                    "description": "TLS defines the TLS configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls",
                    "type": "object",
                    "properties": {
                      "certResolver": {
                        "description": "CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers",
                        "type": "string"
                      },
                      "domains": {
                        "description": "Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains",
                        "type": "array",
                        "items": {
                          "description": "Domain holds a domain name with SANs.",
                          "type": "object",
                          "properties": {
                            "main": {
                              "description": "Main defines the main domain name.",
                              "type": "string"
                            },
                            "sans": {
                              "description": "SANs defines the subject alternative domain names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "options": {
                        "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsoption",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsoption",
                            "type": "string"
                          }
                        }
                      },
                      "secretName": {
                        "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                        "type": "string"
                      },
                      "store": {
                        "description": "Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsstore",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsstore",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "IngressRoute is the CRD implementation of a Traefik HTTP Router.",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "IngressRoute",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "ingressroutes.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "ingressroutes",
                "singular": "ingressroute",
                "kind": "IngressRoute",
                "listKind": "IngressRouteList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "IngressRoute is the CRD implementation of a Traefik HTTP Router.",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "IngressRouteSpec defines the desired state of IngressRoute.",
                          "type": "object",
                          "required": [
                            "routes"
                          ],
                          "properties": {
                            "entryPoints": {
                              "description": "EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "routes": {
                              "description": "Routes defines the list of routes.",
                              "type": "array",
                              "items": {
                                "description": "Route holds the HTTP route configuration.",
                                "type": "object",
                                "required": [
                                  "kind",
                                  "match"
                                ],
                                "properties": {
                                  "kind": {
                                    "description": "Kind defines the kind of the route. Rule is the only supported kind.",
                                    "type": "string",
                                    "enum": [
                                      "Rule"
                                    ]
                                  },
                                  "match": {
                                    "description": "Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule",
                                    "type": "string"
                                  },
                                  "middlewares": {
                                    "description": "Middlewares defines the list of references to Middleware resources. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-middleware",
                                    "type": "array",
                                    "items": {
                                      "description": "MiddlewareRef is a reference to a Middleware resource.",
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name defines the name of the referenced Middleware resource.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Middleware resource.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "priority": {
                                    "description": "Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority",
                                    "type": "integer"
                                  },
                                  "services": {
                                    "description": "Services defines the list of Service. It can contain any combination of TraefikService and/or reference to a Kubernetes Service.",
                                    "type": "array",
                                    "items": {
                                      "description": "Service defines an upstream HTTP service to proxy traffic to.",
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "kind": {
                                          "description": "Kind defines the kind of the Service.",
                                          "type": "string",
                                          "enum": [
                                            "Service",
                                            "TraefikService"
                                          ]
                                        },
                                        "name": {
                                          "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                          "type": "string"
                                        },
                                        "nativeLB": {
                                          "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                          "type": "boolean"
                                        },
                                        "passHostHeader": {
                                          "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                                          "type": "boolean"
                                        },
                                        "port": {
                                          "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        },
                                        "responseForwarding": {
                                          "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                          "type": "object",
                                          "properties": {
                                            "flushInterval": {
                                              "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "scheme": {
                                          "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                                          "type": "string"
                                        },
                                        "serversTransport": {
                                          "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "sticky": {
                                          "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                                          "type": "object",
                                          "properties": {
                                            "cookie": {
                                              "description": "Cookie defines the sticky cookie configuration.",
                                              "type": "object",
                                              "properties": {
                                                "httpOnly": {
                                                  "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                                  "type": "boolean"
                                                },
                                                "name": {
                                                  "description": "Name defines the Cookie name.",
                                                  "type": "string"
                                                },
                                                "sameSite": {
                                                  "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                                  "type": "string"
                                                },
                                                "secure": {
                                                  "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                                  "type": "boolean"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "strategy": {
                                          "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                                          "type": "string"
                                        },
                                        "weight": {
                                          "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "tls": {
                              "description": "TLS defines the TLS configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls",
                              "type": "object",
                              "properties": {
                                "certResolver": {
                                  "description": "CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers",
                                  "type": "string"
                                },
                                "domains": {
                                  "description": "Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains",
                                  "type": "array",
                                  "items": {
                                    "description": "Domain holds a domain name with SANs.",
                                    "type": "object",
                                    "properties": {
                                      "main": {
                                        "description": "Main defines the main domain name.",
                                        "type": "string"
                                      },
                                      "sans": {
                                        "description": "SANs defines the subject alternative domain names.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "options": {
                                  "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsoption",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsoption",
                                      "type": "string"
                                    }
                                  }
                                },
                                "secretName": {
                                  "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                  "type": "string"
                                },
                                "store": {
                                  "description": "Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsstore",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsstore",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "ingressroutes",
                "singular": "ingressroute",
                "kind": "IngressRoute",
                "listKind": "IngressRouteList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "IngressRoute",
          "apiGroup": "traefik.containo.us",
          "apiKind": "IngressRoute",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.IngressRoute",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "IngressRouteSpec defines the desired state of IngressRoute.",
            "required": [
              "routes"
            ],
            "properties": {
              "entryPoints": {
                "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "routes": {
                "description": "Routes defines the list of routes.",
                "type": "array",
                "items": {
                  "description": "Route holds the HTTP route configuration.",
                  "type": "object",
                  "required": [
                    "kind",
                    "match"
                  ],
                  "properties": {
                    "kind": {
                      "description": "Kind defines the kind of the route.\nRule is the only supported kind.",
                      "type": "string",
                      "enum": [
                        "Rule"
                      ]
                    },
                    "match": {
                      "description": "Match defines the router's rule.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule",
                      "type": "string"
                    },
                    "middlewares": {
                      "description": "Middlewares defines the list of references to Middleware resources.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-middleware",
                      "type": "array",
                      "items": {
                        "description": "MiddlewareRef is a reference to a Middleware resource.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced Middleware resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Middleware resource.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "priority": {
                      "description": "Priority defines the router's priority.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority",
                      "type": "integer"
                    },
                    "services": {
                      "description": "Services defines the list of Service.\nIt can contain any combination of TraefikService and/or reference to a Kubernetes Service.",
                      "type": "array",
                      "items": {
                        "description": "Service defines an upstream HTTP service to proxy traffic to.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "kind": {
                            "description": "Kind defines the kind of the Service.",
                            "type": "string",
                            "enum": [
                              "Service",
                              "TraefikService"
                            ]
                          },
                          "name": {
                            "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                            "type": "string"
                          },
                          "nativeLB": {
                            "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                            "type": "boolean"
                          },
                          "passHostHeader": {
                            "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                            "type": "boolean"
                          },
                          "port": {
                            "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                            "x-kubernetes-int-or-string": true,
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "responseForwarding": {
                            "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                            "type": "object",
                            "properties": {
                              "flushInterval": {
                                "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                "type": "string"
                              }
                            }
                          },
                          "scheme": {
                            "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                            "type": "string"
                          },
                          "serversTransport": {
                            "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                            "type": "string"
                          },
                          "sticky": {
                            "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                            "type": "object",
                            "properties": {
                              "cookie": {
                                "description": "Cookie defines the sticky cookie configuration.",
                                "type": "object",
                                "properties": {
                                  "httpOnly": {
                                    "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                    "type": "boolean"
                                  },
                                  "maxAge": {
                                    "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "Name defines the Cookie name.",
                                    "type": "string"
                                  },
                                  "sameSite": {
                                    "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                    "type": "string"
                                  },
                                  "secure": {
                                    "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "strategy": {
                            "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "syntax": {
                      "description": "Syntax defines the router's rule syntax.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax",
                      "type": "string"
                    }
                  }
                }
              },
              "tls": {
                "description": "TLS defines the TLS configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls",
                "type": "object",
                "properties": {
                  "certResolver": {
                    "description": "CertResolver defines the name of the certificate resolver to use.\nCert resolvers have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers",
                    "type": "string"
                  },
                  "domains": {
                    "description": "Domains defines the list of domains that will be used to issue certificates.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains",
                    "type": "array",
                    "items": {
                      "description": "Domain holds a domain name with SANs.",
                      "type": "object",
                      "properties": {
                        "main": {
                          "description": "Main defines the main domain name.",
                          "type": "string"
                        },
                        "sans": {
                          "description": "SANs defines the subject alternative domain names.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "options": {
                    "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.\nIf not defined, the `default` TLSOption is used.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name defines the name of the referenced TLSOption.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace defines the namespace of the referenced TLSOption.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption",
                        "type": "string"
                      }
                    }
                  },
                  "secretName": {
                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                    "type": "string"
                  },
                  "store": {
                    "description": "Store defines the reference to the TLSStore, that will be used to store certificates.\nPlease note that only `default` TLSStore can be used.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name defines the name of the referenced TLSStore.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace defines the namespace of the referenced TLSStore.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "IngressRoute is the CRD implementation of a Traefik HTTP Router.",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "IngressRoute",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "ingressroutes.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "ingressroutes",
            "singular": "ingressroute",
            "kind": "IngressRoute",
            "listKind": "IngressRouteList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "IngressRoute is the CRD implementation of a Traefik HTTP Router.",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "IngressRouteSpec defines the desired state of IngressRoute.",
                      "type": "object",
                      "required": [
                        "routes"
                      ],
                      "properties": {
                        "entryPoints": {
                          "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "routes": {
                          "description": "Routes defines the list of routes.",
                          "type": "array",
                          "items": {
                            "description": "Route holds the HTTP route configuration.",
                            "type": "object",
                            "required": [
                              "kind",
                              "match"
                            ],
                            "properties": {
                              "kind": {
                                "description": "Kind defines the kind of the route.\nRule is the only supported kind.",
                                "type": "string",
                                "enum": [
                                  "Rule"
                                ]
                              },
                              "match": {
                                "description": "Match defines the router's rule.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule",
                                "type": "string"
                              },
                              "middlewares": {
                                "description": "Middlewares defines the list of references to Middleware resources.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-middleware",
                                "type": "array",
                                "items": {
                                  "description": "MiddlewareRef is a reference to a Middleware resource.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced Middleware resource.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Middleware resource.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "priority": {
                                "description": "Priority defines the router's priority.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority",
                                "type": "integer"
                              },
                              "services": {
                                "description": "Services defines the list of Service.\nIt can contain any combination of TraefikService and/or reference to a Kubernetes Service.",
                                "type": "array",
                                "items": {
                                  "description": "Service defines an upstream HTTP service to proxy traffic to.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "kind": {
                                      "description": "Kind defines the kind of the Service.",
                                      "type": "string",
                                      "enum": [
                                        "Service",
                                        "TraefikService"
                                      ]
                                    },
                                    "name": {
                                      "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                      "type": "string"
                                    },
                                    "nativeLB": {
                                      "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                      "type": "boolean"
                                    },
                                    "passHostHeader": {
                                      "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                      "type": "boolean"
                                    },
                                    "port": {
                                      "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "responseForwarding": {
                                      "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                      "type": "object",
                                      "properties": {
                                        "flushInterval": {
                                          "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "scheme": {
                                      "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                      "type": "string"
                                    },
                                    "serversTransport": {
                                      "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                      "type": "string"
                                    },
                                    "sticky": {
                                      "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                      "type": "object",
                                      "properties": {
                                        "cookie": {
                                          "description": "Cookie defines the sticky cookie configuration.",
                                          "type": "object",
                                          "properties": {
                                            "httpOnly": {
                                              "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                              "type": "boolean"
                                            },
                                            "maxAge": {
                                              "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                              "type": "integer"
                                            },
                                            "name": {
                                              "description": "Name defines the Cookie name.",
                                              "type": "string"
                                            },
                                            "sameSite": {
                                              "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                              "type": "string"
                                            },
                                            "secure": {
                                              "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "strategy": {
                                      "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                      "type": "string"
                                    },
                                    "weight": {
                                      "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                      "type": "integer"
                                    }
                                  }
                                }
                              },
                              "syntax": {
                                "description": "Syntax defines the router's rule syntax.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "tls": {
                          "description": "TLS defines the TLS configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls",
                          "type": "object",
                          "properties": {
                            "certResolver": {
                              "description": "CertResolver defines the name of the certificate resolver to use.\nCert resolvers have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers",
                              "type": "string"
                            },
                            "domains": {
                              "description": "Domains defines the list of domains that will be used to issue certificates.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains",
                              "type": "array",
                              "items": {
                                "description": "Domain holds a domain name with SANs.",
                                "type": "object",
                                "properties": {
                                  "main": {
                                    "description": "Main defines the main domain name.",
                                    "type": "string"
                                  },
                                  "sans": {
                                    "description": "SANs defines the subject alternative domain names.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "options": {
                              "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.\nIf not defined, the `default` TLSOption is used.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name defines the name of the referenced TLSOption.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace defines the namespace of the referenced TLSOption.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption",
                                  "type": "string"
                                }
                              }
                            },
                            "secretName": {
                              "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                              "type": "string"
                            },
                            "store": {
                              "description": "Store defines the reference to the TLSStore, that will be used to store certificates.\nPlease note that only `default` TLSStore can be used.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name defines the name of the referenced TLSStore.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace defines the namespace of the referenced TLSStore.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "ingressroutes",
            "singular": "ingressroute",
            "kind": "IngressRoute",
            "listKind": "IngressRouteList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "IngressRoute",
      "apiGroup": "traefik.io",
      "apiKind": "IngressRoute",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.IngressRouteTCP",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "IngressRouteTCPSpec defines the desired state of IngressRouteTCP.",
                "required": [
                  "routes"
                ],
                "properties": {
                  "entryPoints": {
                    "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "routes": {
                    "description": "Routes defines the list of routes.",
                    "type": "array",
                    "items": {
                      "description": "RouteTCP holds the TCP route configuration.",
                      "type": "object",
                      "required": [
                        "match"
                      ],
                      "properties": {
                        "match": {
                          "description": "Match defines the router's rule.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule_1",
                          "type": "string"
                        },
                        "middlewares": {
                          "description": "Middlewares defines the list of references to MiddlewareTCP resources.",
                          "type": "array",
                          "items": {
                            "description": "ObjectReference is a generic reference to a Traefik resource.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines the name of the referenced Traefik resource.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "priority": {
                          "description": "Priority defines the router's priority.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority_1",
                          "type": "integer"
                        },
                        "services": {
                          "description": "Services defines the list of TCP services.",
                          "type": "array",
                          "items": {
                            "description": "ServiceTCP defines an upstream TCP service to proxy traffic to.",
                            "type": "object",
                            "required": [
                              "name",
                              "port"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines the name of the referenced Kubernetes Service.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                "type": "string"
                              },
                              "nativeLB": {
                                "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                "type": "boolean"
                              },
                              "port": {
                                "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                "x-kubernetes-int-or-string": true,
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "proxyProtocol": {
                                "description": "ProxyProtocol defines the PROXY protocol configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol",
                                "type": "object",
                                "properties": {
                                  "version": {
                                    "description": "Version defines the PROXY Protocol version to use.",
                                    "type": "integer"
                                  }
                                }
                              },
                              "serversTransport": {
                                "description": "ServersTransport defines the name of ServersTransportTCP resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                "type": "string"
                              },
                              "terminationDelay": {
                                "description": "TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates\nit has closed the writing capability of its connection, to close the reading capability as well,\nhence fully terminating the connection.\nIt is a duration in milliseconds, defaulting to 100.\nA negative value means an infinite deadline (i.e. the reading capability is never closed).\nDeprecated: TerminationDelay is not supported APIVersion traefik.io/v1, please use ServersTransport to configure the TerminationDelay instead.",
                                "type": "integer"
                              },
                              "tls": {
                                "description": "TLS determines whether to use TLS when dialing with the backend.",
                                "type": "boolean"
                              },
                              "weight": {
                                "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "syntax": {
                          "description": "Syntax defines the router's rule syntax.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax_1",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "tls": {
                    "description": "TLS defines the TLS configuration on a layer 4 / TCP Route.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1",
                    "type": "object",
                    "properties": {
                      "certResolver": {
                        "description": "CertResolver defines the name of the certificate resolver to use.\nCert resolvers have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers",
                        "type": "string"
                      },
                      "domains": {
                        "description": "Domains defines the list of domains that will be used to issue certificates.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains",
                        "type": "array",
                        "items": {
                          "description": "Domain holds a domain name with SANs.",
                          "type": "object",
                          "properties": {
                            "main": {
                              "description": "Main defines the main domain name.",
                              "type": "string"
                            },
                            "sans": {
                              "description": "SANs defines the subject alternative domain names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "options": {
                        "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.\nIf not defined, the `default` TLSOption is used.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced Traefik resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Traefik resource.",
                            "type": "string"
                          }
                        }
                      },
                      "passthrough": {
                        "description": "Passthrough defines whether a TLS router will terminate the TLS connection.",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                        "type": "string"
                      },
                      "store": {
                        "description": "Store defines the reference to the TLSStore, that will be used to store certificates.\nPlease note that only `default` TLSStore can be used.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced Traefik resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Traefik resource.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "IngressRouteTCP is the CRD implementation of a Traefik TCP Router.",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "IngressRouteTCP",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "ingressroutetcps.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "ingressroutetcps",
                "singular": "ingressroutetcp",
                "kind": "IngressRouteTCP",
                "listKind": "IngressRouteTCPList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "IngressRouteTCP is the CRD implementation of a Traefik TCP Router.",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "IngressRouteTCPSpec defines the desired state of IngressRouteTCP.",
                          "type": "object",
                          "required": [
                            "routes"
                          ],
                          "properties": {
                            "entryPoints": {
                              "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "routes": {
                              "description": "Routes defines the list of routes.",
                              "type": "array",
                              "items": {
                                "description": "RouteTCP holds the TCP route configuration.",
                                "type": "object",
                                "required": [
                                  "match"
                                ],
                                "properties": {
                                  "match": {
                                    "description": "Match defines the router's rule.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule_1",
                                    "type": "string"
                                  },
                                  "middlewares": {
                                    "description": "Middlewares defines the list of references to MiddlewareTCP resources.",
                                    "type": "array",
                                    "items": {
                                      "description": "ObjectReference is a generic reference to a Traefik resource.",
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name defines the name of the referenced Traefik resource.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "priority": {
                                    "description": "Priority defines the router's priority.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority_1",
                                    "type": "integer"
                                  },
                                  "services": {
                                    "description": "Services defines the list of TCP services.",
                                    "type": "array",
                                    "items": {
                                      "description": "ServiceTCP defines an upstream TCP service to proxy traffic to.",
                                      "type": "object",
                                      "required": [
                                        "name",
                                        "port"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name defines the name of the referenced Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "nativeLB": {
                                          "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                          "type": "boolean"
                                        },
                                        "port": {
                                          "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        },
                                        "proxyProtocol": {
                                          "description": "ProxyProtocol defines the PROXY protocol configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol",
                                          "type": "object",
                                          "properties": {
                                            "version": {
                                              "description": "Version defines the PROXY Protocol version to use.",
                                              "type": "integer"
                                            }
                                          }
                                        },
                                        "serversTransport": {
                                          "description": "ServersTransport defines the name of ServersTransportTCP resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "terminationDelay": {
                                          "description": "TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates\nit has closed the writing capability of its connection, to close the reading capability as well,\nhence fully terminating the connection.\nIt is a duration in milliseconds, defaulting to 100.\nA negative value means an infinite deadline (i.e. the reading capability is never closed).\nDeprecated: TerminationDelay is not supported APIVersion traefik.io/v1, please use ServersTransport to configure the TerminationDelay instead.",
                                          "type": "integer"
                                        },
                                        "tls": {
                                          "description": "TLS determines whether to use TLS when dialing with the backend.",
                                          "type": "boolean"
                                        },
                                        "weight": {
                                          "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  },
                                  "syntax": {
                                    "description": "Syntax defines the router's rule syntax.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax_1",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "tls": {
                              "description": "TLS defines the TLS configuration on a layer 4 / TCP Route.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1",
                              "type": "object",
                              "properties": {
                                "certResolver": {
                                  "description": "CertResolver defines the name of the certificate resolver to use.\nCert resolvers have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers",
                                  "type": "string"
                                },
                                "domains": {
                                  "description": "Domains defines the list of domains that will be used to issue certificates.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains",
                                  "type": "array",
                                  "items": {
                                    "description": "Domain holds a domain name with SANs.",
                                    "type": "object",
                                    "properties": {
                                      "main": {
                                        "description": "Main defines the main domain name.",
                                        "type": "string"
                                      },
                                      "sans": {
                                        "description": "SANs defines the subject alternative domain names.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "options": {
                                  "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.\nIf not defined, the `default` TLSOption is used.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced Traefik resource.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "passthrough": {
                                  "description": "Passthrough defines whether a TLS router will terminate the TLS connection.",
                                  "type": "boolean"
                                },
                                "secretName": {
                                  "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                  "type": "string"
                                },
                                "store": {
                                  "description": "Store defines the reference to the TLSStore, that will be used to store certificates.\nPlease note that only `default` TLSStore can be used.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced Traefik resource.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "ingressroutetcps",
                "singular": "ingressroutetcp",
                "kind": "IngressRouteTCP",
                "listKind": "IngressRouteTCPList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "IngressRouteTCP",
          "apiGroup": "traefik.io",
          "apiKind": "IngressRouteTCP",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.IngressRouteTCP",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "IngressRouteTCPSpec defines the desired state of IngressRouteTCP.",
                "required": [
                  "routes"
                ],
                "properties": {
                  "entryPoints": {
                    "description": "EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "routes": {
                    "description": "Routes defines the list of routes.",
                    "type": "array",
                    "items": {
                      "description": "RouteTCP holds the TCP route configuration.",
                      "type": "object",
                      "required": [
                        "match"
                      ],
                      "properties": {
                        "match": {
                          "description": "Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule_1",
                          "type": "string"
                        },
                        "middlewares": {
                          "description": "Middlewares defines the list of references to MiddlewareTCP resources.",
                          "type": "array",
                          "items": {
                            "description": "ObjectReference is a generic reference to a Traefik resource.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines the name of the referenced Traefik resource.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "priority": {
                          "description": "Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority_1",
                          "type": "integer"
                        },
                        "services": {
                          "description": "Services defines the list of TCP services.",
                          "type": "array",
                          "items": {
                            "description": "ServiceTCP defines an upstream TCP service to proxy traffic to.",
                            "type": "object",
                            "required": [
                              "name",
                              "port"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines the name of the referenced Kubernetes Service.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                "type": "string"
                              },
                              "nativeLB": {
                                "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                "type": "boolean"
                              },
                              "port": {
                                "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                "x-kubernetes-int-or-string": true,
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "proxyProtocol": {
                                "description": "ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#proxy-protocol",
                                "type": "object",
                                "properties": {
                                  "version": {
                                    "description": "Version defines the PROXY Protocol version to use.",
                                    "type": "integer"
                                  }
                                }
                              },
                              "terminationDelay": {
                                "description": "TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates it has closed the writing capability of its connection, to close the reading capability as well, hence fully terminating the connection. It is a duration in milliseconds, defaulting to 100. A negative value means an infinite deadline (i.e. the reading capability is never closed).",
                                "type": "integer"
                              },
                              "weight": {
                                "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "tls": {
                    "description": "TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls_1",
                    "type": "object",
                    "properties": {
                      "certResolver": {
                        "description": "CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers",
                        "type": "string"
                      },
                      "domains": {
                        "description": "Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains",
                        "type": "array",
                        "items": {
                          "description": "Domain holds a domain name with SANs.",
                          "type": "object",
                          "properties": {
                            "main": {
                              "description": "Main defines the main domain name.",
                              "type": "string"
                            },
                            "sans": {
                              "description": "SANs defines the subject alternative domain names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "options": {
                        "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced Traefik resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Traefik resource.",
                            "type": "string"
                          }
                        }
                      },
                      "passthrough": {
                        "description": "Passthrough defines whether a TLS router will terminate the TLS connection.",
                        "type": "boolean"
                      },
                      "secretName": {
                        "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                        "type": "string"
                      },
                      "store": {
                        "description": "Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced Traefik resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Traefik resource.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "IngressRouteTCP is the CRD implementation of a Traefik TCP Router.",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "IngressRouteTCP",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "ingressroutetcps.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "ingressroutetcps",
                "singular": "ingressroutetcp",
                "kind": "IngressRouteTCP",
                "listKind": "IngressRouteTCPList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "IngressRouteTCP is the CRD implementation of a Traefik TCP Router.",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "IngressRouteTCPSpec defines the desired state of IngressRouteTCP.",
                          "type": "object",
                          "required": [
                            "routes"
                          ],
                          "properties": {
                            "entryPoints": {
                              "description": "EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "routes": {
                              "description": "Routes defines the list of routes.",
                              "type": "array",
                              "items": {
                                "description": "RouteTCP holds the TCP route configuration.",
                                "type": "object",
                                "required": [
                                  "match"
                                ],
                                "properties": {
                                  "match": {
                                    "description": "Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule_1",
                                    "type": "string"
                                  },
                                  "middlewares": {
                                    "description": "Middlewares defines the list of references to MiddlewareTCP resources.",
                                    "type": "array",
                                    "items": {
                                      "description": "ObjectReference is a generic reference to a Traefik resource.",
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name defines the name of the referenced Traefik resource.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "priority": {
                                    "description": "Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority_1",
                                    "type": "integer"
                                  },
                                  "services": {
                                    "description": "Services defines the list of TCP services.",
                                    "type": "array",
                                    "items": {
                                      "description": "ServiceTCP defines an upstream TCP service to proxy traffic to.",
                                      "type": "object",
                                      "required": [
                                        "name",
                                        "port"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name defines the name of the referenced Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "nativeLB": {
                                          "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                          "type": "boolean"
                                        },
                                        "port": {
                                          "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        },
                                        "proxyProtocol": {
                                          "description": "ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#proxy-protocol",
                                          "type": "object",
                                          "properties": {
                                            "version": {
                                              "description": "Version defines the PROXY Protocol version to use.",
                                              "type": "integer"
                                            }
                                          }
                                        },
                                        "terminationDelay": {
                                          "description": "TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates it has closed the writing capability of its connection, to close the reading capability as well, hence fully terminating the connection. It is a duration in milliseconds, defaulting to 100. A negative value means an infinite deadline (i.e. the reading capability is never closed).",
                                          "type": "integer"
                                        },
                                        "weight": {
                                          "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "tls": {
                              "description": "TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls_1",
                              "type": "object",
                              "properties": {
                                "certResolver": {
                                  "description": "CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers",
                                  "type": "string"
                                },
                                "domains": {
                                  "description": "Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains",
                                  "type": "array",
                                  "items": {
                                    "description": "Domain holds a domain name with SANs.",
                                    "type": "object",
                                    "properties": {
                                      "main": {
                                        "description": "Main defines the main domain name.",
                                        "type": "string"
                                      },
                                      "sans": {
                                        "description": "SANs defines the subject alternative domain names.",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "options": {
                                  "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced Traefik resource.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "passthrough": {
                                  "description": "Passthrough defines whether a TLS router will terminate the TLS connection.",
                                  "type": "boolean"
                                },
                                "secretName": {
                                  "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                  "type": "string"
                                },
                                "store": {
                                  "description": "Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced Traefik resource.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "ingressroutetcps",
                "singular": "ingressroutetcp",
                "kind": "IngressRouteTCP",
                "listKind": "IngressRouteTCPList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "IngressRouteTCP",
          "apiGroup": "traefik.containo.us",
          "apiKind": "IngressRouteTCP",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.IngressRouteTCP",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "IngressRouteTCPSpec defines the desired state of IngressRouteTCP.",
            "required": [
              "routes"
            ],
            "properties": {
              "entryPoints": {
                "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "routes": {
                "description": "Routes defines the list of routes.",
                "type": "array",
                "items": {
                  "description": "RouteTCP holds the TCP route configuration.",
                  "type": "object",
                  "required": [
                    "match"
                  ],
                  "properties": {
                    "match": {
                      "description": "Match defines the router's rule.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule_1",
                      "type": "string"
                    },
                    "middlewares": {
                      "description": "Middlewares defines the list of references to MiddlewareTCP resources.",
                      "type": "array",
                      "items": {
                        "description": "ObjectReference is a generic reference to a Traefik resource.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced Traefik resource.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Traefik resource.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "priority": {
                      "description": "Priority defines the router's priority.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority_1",
                      "type": "integer"
                    },
                    "services": {
                      "description": "Services defines the list of TCP services.",
                      "type": "array",
                      "items": {
                        "description": "ServiceTCP defines an upstream TCP service to proxy traffic to.",
                        "type": "object",
                        "required": [
                          "name",
                          "port"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced Kubernetes Service.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                            "type": "string"
                          },
                          "nativeLB": {
                            "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                            "type": "boolean"
                          },
                          "port": {
                            "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                            "x-kubernetes-int-or-string": true,
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "proxyProtocol": {
                            "description": "ProxyProtocol defines the PROXY protocol configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol",
                            "type": "object",
                            "properties": {
                              "version": {
                                "description": "Version defines the PROXY Protocol version to use.",
                                "type": "integer"
                              }
                            }
                          },
                          "serversTransport": {
                            "description": "ServersTransport defines the name of ServersTransportTCP resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                            "type": "string"
                          },
                          "terminationDelay": {
                            "description": "TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates\nit has closed the writing capability of its connection, to close the reading capability as well,\nhence fully terminating the connection.\nIt is a duration in milliseconds, defaulting to 100.\nA negative value means an infinite deadline (i.e. the reading capability is never closed).\nDeprecated: TerminationDelay is not supported APIVersion traefik.io/v1, please use ServersTransport to configure the TerminationDelay instead.",
                            "type": "integer"
                          },
                          "tls": {
                            "description": "TLS determines whether to use TLS when dialing with the backend.",
                            "type": "boolean"
                          },
                          "weight": {
                            "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "syntax": {
                      "description": "Syntax defines the router's rule syntax.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax_1",
                      "type": "string"
                    }
                  }
                }
              },
              "tls": {
                "description": "TLS defines the TLS configuration on a layer 4 / TCP Route.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1",
                "type": "object",
                "properties": {
                  "certResolver": {
                    "description": "CertResolver defines the name of the certificate resolver to use.\nCert resolvers have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers",
                    "type": "string"
                  },
                  "domains": {
                    "description": "Domains defines the list of domains that will be used to issue certificates.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains",
                    "type": "array",
                    "items": {
                      "description": "Domain holds a domain name with SANs.",
                      "type": "object",
                      "properties": {
                        "main": {
                          "description": "Main defines the main domain name.",
                          "type": "string"
                        },
                        "sans": {
                          "description": "SANs defines the subject alternative domain names.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "options": {
                    "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.\nIf not defined, the `default` TLSOption is used.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name defines the name of the referenced Traefik resource.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace defines the namespace of the referenced Traefik resource.",
                        "type": "string"
                      }
                    }
                  },
                  "passthrough": {
                    "description": "Passthrough defines whether a TLS router will terminate the TLS connection.",
                    "type": "boolean"
                  },
                  "secretName": {
                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                    "type": "string"
                  },
                  "store": {
                    "description": "Store defines the reference to the TLSStore, that will be used to store certificates.\nPlease note that only `default` TLSStore can be used.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name defines the name of the referenced Traefik resource.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace defines the namespace of the referenced Traefik resource.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "IngressRouteTCP is the CRD implementation of a Traefik TCP Router.",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "IngressRouteTCP",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "ingressroutetcps.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "ingressroutetcps",
            "singular": "ingressroutetcp",
            "kind": "IngressRouteTCP",
            "listKind": "IngressRouteTCPList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "IngressRouteTCP is the CRD implementation of a Traefik TCP Router.",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "IngressRouteTCPSpec defines the desired state of IngressRouteTCP.",
                      "type": "object",
                      "required": [
                        "routes"
                      ],
                      "properties": {
                        "entryPoints": {
                          "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "routes": {
                          "description": "Routes defines the list of routes.",
                          "type": "array",
                          "items": {
                            "description": "RouteTCP holds the TCP route configuration.",
                            "type": "object",
                            "required": [
                              "match"
                            ],
                            "properties": {
                              "match": {
                                "description": "Match defines the router's rule.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule_1",
                                "type": "string"
                              },
                              "middlewares": {
                                "description": "Middlewares defines the list of references to MiddlewareTCP resources.",
                                "type": "array",
                                "items": {
                                  "description": "ObjectReference is a generic reference to a Traefik resource.",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced Traefik resource.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "priority": {
                                "description": "Priority defines the router's priority.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority_1",
                                "type": "integer"
                              },
                              "services": {
                                "description": "Services defines the list of TCP services.",
                                "type": "array",
                                "items": {
                                  "description": "ServiceTCP defines an upstream TCP service to proxy traffic to.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "port"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced Kubernetes Service.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                      "type": "string"
                                    },
                                    "nativeLB": {
                                      "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                      "type": "boolean"
                                    },
                                    "port": {
                                      "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "proxyProtocol": {
                                      "description": "ProxyProtocol defines the PROXY protocol configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol",
                                      "type": "object",
                                      "properties": {
                                        "version": {
                                          "description": "Version defines the PROXY Protocol version to use.",
                                          "type": "integer"
                                        }
                                      }
                                    },
                                    "serversTransport": {
                                      "description": "ServersTransport defines the name of ServersTransportTCP resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                      "type": "string"
                                    },
                                    "terminationDelay": {
                                      "description": "TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates\nit has closed the writing capability of its connection, to close the reading capability as well,\nhence fully terminating the connection.\nIt is a duration in milliseconds, defaulting to 100.\nA negative value means an infinite deadline (i.e. the reading capability is never closed).\nDeprecated: TerminationDelay is not supported APIVersion traefik.io/v1, please use ServersTransport to configure the TerminationDelay instead.",
                                      "type": "integer"
                                    },
                                    "tls": {
                                      "description": "TLS determines whether to use TLS when dialing with the backend.",
                                      "type": "boolean"
                                    },
                                    "weight": {
                                      "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                      "type": "integer"
                                    }
                                  }
                                }
                              },
                              "syntax": {
                                "description": "Syntax defines the router's rule syntax.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax_1",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "tls": {
                          "description": "TLS defines the TLS configuration on a layer 4 / TCP Route.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1",
                          "type": "object",
                          "properties": {
                            "certResolver": {
                              "description": "CertResolver defines the name of the certificate resolver to use.\nCert resolvers have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers",
                              "type": "string"
                            },
                            "domains": {
                              "description": "Domains defines the list of domains that will be used to issue certificates.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains",
                              "type": "array",
                              "items": {
                                "description": "Domain holds a domain name with SANs.",
                                "type": "object",
                                "properties": {
                                  "main": {
                                    "description": "Main defines the main domain name.",
                                    "type": "string"
                                  },
                                  "sans": {
                                    "description": "SANs defines the subject alternative domain names.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "options": {
                              "description": "Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.\nIf not defined, the `default` TLSOption is used.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name defines the name of the referenced Traefik resource.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                  "type": "string"
                                }
                              }
                            },
                            "passthrough": {
                              "description": "Passthrough defines whether a TLS router will terminate the TLS connection.",
                              "type": "boolean"
                            },
                            "secretName": {
                              "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                              "type": "string"
                            },
                            "store": {
                              "description": "Store defines the reference to the TLSStore, that will be used to store certificates.\nPlease note that only `default` TLSStore can be used.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name defines the name of the referenced Traefik resource.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace defines the namespace of the referenced Traefik resource.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "ingressroutetcps",
            "singular": "ingressroutetcp",
            "kind": "IngressRouteTCP",
            "listKind": "IngressRouteTCPList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "IngressRouteTCP",
      "apiGroup": "traefik.io",
      "apiKind": "IngressRouteTCP",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.IngressRouteUDP",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.",
                "required": [
                  "routes"
                ],
                "properties": {
                  "entryPoints": {
                    "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "routes": {
                    "description": "Routes defines the list of routes.",
                    "type": "array",
                    "items": {
                      "description": "RouteUDP holds the UDP route configuration.",
                      "type": "object",
                      "properties": {
                        "services": {
                          "description": "Services defines the list of UDP services.",
                          "type": "array",
                          "items": {
                            "description": "ServiceUDP defines an upstream UDP service to proxy traffic to.",
                            "type": "object",
                            "required": [
                              "name",
                              "port"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines the name of the referenced Kubernetes Service.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                "type": "string"
                              },
                              "nativeLB": {
                                "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                "type": "boolean"
                              },
                              "port": {
                                "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                "x-kubernetes-int-or-string": true,
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "weight": {
                                "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "IngressRouteUDP is a CRD implementation of a Traefik UDP Router.",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "IngressRouteUDP",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "ingressrouteudps.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "ingressrouteudps",
                "singular": "ingressrouteudp",
                "kind": "IngressRouteUDP",
                "listKind": "IngressRouteUDPList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "IngressRouteUDP is a CRD implementation of a Traefik UDP Router.",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.",
                          "type": "object",
                          "required": [
                            "routes"
                          ],
                          "properties": {
                            "entryPoints": {
                              "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "routes": {
                              "description": "Routes defines the list of routes.",
                              "type": "array",
                              "items": {
                                "description": "RouteUDP holds the UDP route configuration.",
                                "type": "object",
                                "properties": {
                                  "services": {
                                    "description": "Services defines the list of UDP services.",
                                    "type": "array",
                                    "items": {
                                      "description": "ServiceUDP defines an upstream UDP service to proxy traffic to.",
                                      "type": "object",
                                      "required": [
                                        "name",
                                        "port"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name defines the name of the referenced Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "nativeLB": {
                                          "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                          "type": "boolean"
                                        },
                                        "port": {
                                          "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        },
                                        "weight": {
                                          "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "ingressrouteudps",
                "singular": "ingressrouteudp",
                "kind": "IngressRouteUDP",
                "listKind": "IngressRouteUDPList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "IngressRouteUDP",
          "apiGroup": "traefik.io",
          "apiKind": "IngressRouteUDP",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.IngressRouteUDP",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.",
                "required": [
                  "routes"
                ],
                "properties": {
                  "entryPoints": {
                    "description": "EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "routes": {
                    "description": "Routes defines the list of routes.",
                    "type": "array",
                    "items": {
                      "description": "RouteUDP holds the UDP route configuration.",
                      "type": "object",
                      "properties": {
                        "services": {
                          "description": "Services defines the list of UDP services.",
                          "type": "array",
                          "items": {
                            "description": "ServiceUDP defines an upstream UDP service to proxy traffic to.",
                            "type": "object",
                            "required": [
                              "name",
                              "port"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name defines the name of the referenced Kubernetes Service.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                "type": "string"
                              },
                              "nativeLB": {
                                "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                "type": "boolean"
                              },
                              "port": {
                                "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                "x-kubernetes-int-or-string": true,
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "weight": {
                                "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "IngressRouteUDP is a CRD implementation of a Traefik UDP Router.",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "IngressRouteUDP",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "ingressrouteudps.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "ingressrouteudps",
                "singular": "ingressrouteudp",
                "kind": "IngressRouteUDP",
                "listKind": "IngressRouteUDPList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "IngressRouteUDP is a CRD implementation of a Traefik UDP Router.",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.",
                          "type": "object",
                          "required": [
                            "routes"
                          ],
                          "properties": {
                            "entryPoints": {
                              "description": "EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "routes": {
                              "description": "Routes defines the list of routes.",
                              "type": "array",
                              "items": {
                                "description": "RouteUDP holds the UDP route configuration.",
                                "type": "object",
                                "properties": {
                                  "services": {
                                    "description": "Services defines the list of UDP services.",
                                    "type": "array",
                                    "items": {
                                      "description": "ServiceUDP defines an upstream UDP service to proxy traffic to.",
                                      "type": "object",
                                      "required": [
                                        "name",
                                        "port"
                                      ],
                                      "properties": {
                                        "name": {
                                          "description": "Name defines the name of the referenced Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "namespace": {
                                          "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                          "type": "string"
                                        },
                                        "nativeLB": {
                                          "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                          "type": "boolean"
                                        },
                                        "port": {
                                          "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                          "anyOf": [
                                            {
                                              "type": "integer"
                                            },
                                            {
                                              "type": "string"
                                            }
                                          ],
                                          "x-kubernetes-int-or-string": true
                                        },
                                        "weight": {
                                          "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "ingressrouteudps",
                "singular": "ingressrouteudp",
                "kind": "IngressRouteUDP",
                "listKind": "IngressRouteUDPList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "IngressRouteUDP",
          "apiGroup": "traefik.containo.us",
          "apiKind": "IngressRouteUDP",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.IngressRouteUDP",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.",
            "required": [
              "routes"
            ],
            "properties": {
              "entryPoints": {
                "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "routes": {
                "description": "Routes defines the list of routes.",
                "type": "array",
                "items": {
                  "description": "RouteUDP holds the UDP route configuration.",
                  "type": "object",
                  "properties": {
                    "services": {
                      "description": "Services defines the list of UDP services.",
                      "type": "array",
                      "items": {
                        "description": "ServiceUDP defines an upstream UDP service to proxy traffic to.",
                        "type": "object",
                        "required": [
                          "name",
                          "port"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name defines the name of the referenced Kubernetes Service.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                            "type": "string"
                          },
                          "nativeLB": {
                            "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                            "type": "boolean"
                          },
                          "port": {
                            "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                            "x-kubernetes-int-or-string": true,
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "weight": {
                            "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "IngressRouteUDP is a CRD implementation of a Traefik UDP Router.",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "IngressRouteUDP",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "ingressrouteudps.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "ingressrouteudps",
            "singular": "ingressrouteudp",
            "kind": "IngressRouteUDP",
            "listKind": "IngressRouteUDPList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "IngressRouteUDP is a CRD implementation of a Traefik UDP Router.",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.",
                      "type": "object",
                      "required": [
                        "routes"
                      ],
                      "properties": {
                        "entryPoints": {
                          "description": "EntryPoints defines the list of entry point names to bind to.\nEntry points have to be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/\nDefault: all.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "routes": {
                          "description": "Routes defines the list of routes.",
                          "type": "array",
                          "items": {
                            "description": "RouteUDP holds the UDP route configuration.",
                            "type": "object",
                            "properties": {
                              "services": {
                                "description": "Services defines the list of UDP services.",
                                "type": "array",
                                "items": {
                                  "description": "ServiceUDP defines an upstream UDP service to proxy traffic to.",
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "port"
                                  ],
                                  "properties": {
                                    "name": {
                                      "description": "Name defines the name of the referenced Kubernetes Service.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Kubernetes Service.",
                                      "type": "string"
                                    },
                                    "nativeLB": {
                                      "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                      "type": "boolean"
                                    },
                                    "port": {
                                      "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "weight": {
                                      "description": "Weight defines the weight used when balancing requests between multiple Kubernetes Service.",
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "ingressrouteudps",
            "singular": "ingressrouteudp",
            "kind": "IngressRouteUDP",
            "listKind": "IngressRouteUDPList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "IngressRouteUDP",
      "apiGroup": "traefik.io",
      "apiKind": "IngressRouteUDP",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.Middleware",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "MiddlewareSpec defines the desired state of a Middleware.",
                "properties": {
                  "addPrefix": {
                    "description": "AddPrefix holds the add prefix middleware configuration.\nThis middleware updates the path of a request before forwarding it.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/",
                    "type": "object",
                    "properties": {
                      "prefix": {
                        "description": "Prefix is the string to add before the current path in the requested URL.\nIt should include a leading slash (/).",
                        "type": "string"
                      }
                    }
                  },
                  "basicAuth": {
                    "description": "BasicAuth holds the basic auth middleware configuration.\nThis middleware restricts access to your services to known users.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/",
                    "type": "object",
                    "properties": {
                      "headerField": {
                        "description": "HeaderField defines a header field to store the authenticated user.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield",
                        "type": "string"
                      },
                      "realm": {
                        "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.\nDefault: traefik.",
                        "type": "string"
                      },
                      "removeHeader": {
                        "description": "RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.\nDefault: false.",
                        "type": "boolean"
                      },
                      "secret": {
                        "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                        "type": "string"
                      }
                    }
                  },
                  "buffering": {
                    "description": "Buffering holds the buffering middleware configuration.\nThis middleware retries or limits the size of requests that can be forwarded to backends.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes",
                    "type": "object",
                    "properties": {
                      "maxRequestBodyBytes": {
                        "description": "MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).\nIf the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.\nDefault: 0 (no maximum).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "maxResponseBodyBytes": {
                        "description": "MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).\nIf the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.\nDefault: 0 (no maximum).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "memRequestBodyBytes": {
                        "description": "MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.\nDefault: 1048576 (1Mi).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "memResponseBodyBytes": {
                        "description": "MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.\nDefault: 1048576 (1Mi).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "retryExpression": {
                        "description": "RetryExpression defines the retry conditions.\nIt is a logical combination of functions with operators AND (&&) and OR (||).\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#retryexpression",
                        "type": "string"
                      }
                    }
                  },
                  "chain": {
                    "description": "Chain holds the configuration of the chain middleware.\nThis middleware enables to define reusable combinations of other pieces of middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/",
                    "type": "object",
                    "properties": {
                      "middlewares": {
                        "description": "Middlewares is the list of MiddlewareRef which composes the chain.",
                        "type": "array",
                        "items": {
                          "description": "MiddlewareRef is a reference to a Middleware resource.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name defines the name of the referenced Middleware resource.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace defines the namespace of the referenced Middleware resource.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "circuitBreaker": {
                    "description": "CircuitBreaker holds the circuit breaker configuration.",
                    "type": "object",
                    "properties": {
                      "checkPeriod": {
                        "description": "CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "expression": {
                        "description": "Expression is the condition that triggers the tripped state.",
                        "type": "string"
                      },
                      "fallbackDuration": {
                        "description": "FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "recoveryDuration": {
                        "description": "RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  },
                  "compress": {
                    "description": "Compress holds the compress middleware configuration.\nThis middleware compresses responses before sending them to the client, using gzip compression.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/",
                    "type": "object",
                    "properties": {
                      "excludedContentTypes": {
                        "description": "ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.\n`application/grpc` is always excluded.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "includedContentTypes": {
                        "description": "IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "minResponseBodyBytes": {
                        "description": "MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.\nDefault: 1024.",
                        "type": "integer"
                      }
                    }
                  },
                  "contentType": {
                    "description": "ContentType holds the content-type middleware configuration.\nThis middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                    "type": "object",
                    "properties": {
                      "autoDetect": {
                        "description": "AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,\nbe automatically set to a value derived from the contents of the response.\nDeprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.",
                        "type": "boolean"
                      }
                    }
                  },
                  "digestAuth": {
                    "description": "DigestAuth holds the digest auth middleware configuration.\nThis middleware restricts access to your services to known users.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/",
                    "type": "object",
                    "properties": {
                      "headerField": {
                        "description": "HeaderField defines a header field to store the authenticated user.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield",
                        "type": "string"
                      },
                      "realm": {
                        "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.\nDefault: traefik.",
                        "type": "string"
                      },
                      "removeHeader": {
                        "description": "RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.",
                        "type": "boolean"
                      },
                      "secret": {
                        "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                        "type": "string"
                      }
                    }
                  },
                  "errors": {
                    "description": "ErrorPage holds the custom error middleware configuration.\nThis middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/",
                    "type": "object",
                    "properties": {
                      "query": {
                        "description": "Query defines the URL for the error page (hosted by service).\nThe {status} variable can be used in order to insert the status code in the URL.",
                        "type": "string"
                      },
                      "service": {
                        "description": "Service defines the reference to a Kubernetes Service that will serve the error page.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "kind": {
                            "description": "Kind defines the kind of the Service.",
                            "type": "string",
                            "enum": [
                              "Service",
                              "TraefikService"
                            ]
                          },
                          "name": {
                            "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                            "type": "string"
                          },
                          "nativeLB": {
                            "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                            "type": "boolean"
                          },
                          "passHostHeader": {
                            "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                            "type": "boolean"
                          },
                          "port": {
                            "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                            "x-kubernetes-int-or-string": true,
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "responseForwarding": {
                            "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                            "type": "object",
                            "properties": {
                              "flushInterval": {
                                "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                "type": "string"
                              }
                            }
                          },
                          "scheme": {
                            "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                            "type": "string"
                          },
                          "serversTransport": {
                            "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                            "type": "string"
                          },
                          "sticky": {
                            "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                            "type": "object",
                            "properties": {
                              "cookie": {
                                "description": "Cookie defines the sticky cookie configuration.",
                                "type": "object",
                                "properties": {
                                  "httpOnly": {
                                    "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                    "type": "boolean"
                                  },
                                  "maxAge": {
                                    "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "Name defines the Cookie name.",
                                    "type": "string"
                                  },
                                  "sameSite": {
                                    "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                    "type": "string"
                                  },
                                  "secure": {
                                    "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "strategy": {
                            "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                            "type": "integer"
                          }
                        }
                      },
                      "status": {
                        "description": "Status defines which status or range of statuses should result in an error page.\nIt can be either a status code as a number (500),\nas multiple comma-separated numbers (500,502),\nas ranges by separating two codes with a dash (500-599),\nor a combination of the two (404,418,500-599).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "forwardAuth": {
                    "description": "ForwardAuth holds the forward auth middleware configuration.\nThis middleware delegates the request authentication to a Service.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/",
                    "type": "object",
                    "properties": {
                      "addAuthCookiesToResponse": {
                        "description": "AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "address": {
                        "description": "Address defines the authentication server address.",
                        "type": "string"
                      },
                      "authRequestHeaders": {
                        "description": "AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.\nIf not set or empty then all request headers are passed.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "authResponseHeaders": {
                        "description": "AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "authResponseHeadersRegex": {
                        "description": "AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/#authresponseheadersregex",
                        "type": "string"
                      },
                      "tls": {
                        "description": "TLS defines the configuration used to secure the connection to the authentication server.",
                        "type": "object",
                        "properties": {
                          "caOptional": {
                            "description": "Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).",
                            "type": "boolean"
                          },
                          "caSecret": {
                            "description": "CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.\nThe CA certificate is extracted from key `tls.ca` or `ca.crt`.",
                            "type": "string"
                          },
                          "certSecret": {
                            "description": "CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.\nThe client certificate is extracted from the keys `tls.crt` and `tls.key`.",
                            "type": "string"
                          },
                          "insecureSkipVerify": {
                            "description": "InsecureSkipVerify defines whether the server certificates should be validated.",
                            "type": "boolean"
                          }
                        }
                      },
                      "trustForwardHeader": {
                        "description": "TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.",
                        "type": "boolean"
                      }
                    }
                  },
                  "grpcWeb": {
                    "description": "GrpcWeb holds the gRPC web middleware configuration.\nThis middleware converts a gRPC web request to an HTTP/2 gRPC request.",
                    "type": "object",
                    "properties": {
                      "allowOrigins": {
                        "description": "AllowOrigins is a list of allowable origins.\nCan also be a wildcard origin \"*\".",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "headers": {
                    "description": "Headers holds the headers middleware configuration.\nThis middleware manages the requests and responses headers.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders",
                    "type": "object",
                    "properties": {
                      "accessControlAllowCredentials": {
                        "description": "AccessControlAllowCredentials defines whether the request can include user credentials.",
                        "type": "boolean"
                      },
                      "accessControlAllowHeaders": {
                        "description": "AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlAllowMethods": {
                        "description": "AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlAllowOriginList": {
                        "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlAllowOriginListRegex": {
                        "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlExposeHeaders": {
                        "description": "AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlMaxAge": {
                        "description": "AccessControlMaxAge defines the time that a preflight request may be cached.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "addVaryHeader": {
                        "description": "AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                        "type": "boolean"
                      },
                      "allowedHosts": {
                        "description": "AllowedHosts defines the fully qualified list of allowed domain names.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "browserXssFilter": {
                        "description": "BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.",
                        "type": "boolean"
                      },
                      "contentSecurityPolicy": {
                        "description": "ContentSecurityPolicy defines the Content-Security-Policy header value.",
                        "type": "string"
                      },
                      "contentTypeNosniff": {
                        "description": "ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.",
                        "type": "boolean"
                      },
                      "customBrowserXSSValue": {
                        "description": "CustomBrowserXSSValue defines the X-XSS-Protection header value.\nThis overrides the BrowserXssFilter option.",
                        "type": "string"
                      },
                      "customFrameOptionsValue": {
                        "description": "CustomFrameOptionsValue defines the X-Frame-Options header value.\nThis overrides the FrameDeny option.",
                        "type": "string"
                      },
                      "customRequestHeaders": {
                        "description": "CustomRequestHeaders defines the header names and values to apply to the request.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "customResponseHeaders": {
                        "description": "CustomResponseHeaders defines the header names and values to apply to the response.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "featurePolicy": {
                        "description": "Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.",
                        "type": "string"
                      },
                      "forceSTSHeader": {
                        "description": "ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.",
                        "type": "boolean"
                      },
                      "frameDeny": {
                        "description": "FrameDeny defines whether to add the X-Frame-Options header with the DENY value.",
                        "type": "boolean"
                      },
                      "hostsProxyHeaders": {
                        "description": "HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "isDevelopment": {
                        "description": "IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.\nUsually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.\nIf you would like your development environment to mimic production with complete Host blocking, SSL redirects,\nand STS headers, leave this as false.",
                        "type": "boolean"
                      },
                      "permissionsPolicy": {
                        "description": "PermissionsPolicy defines the Permissions-Policy header value.\nThis allows sites to control browser features.",
                        "type": "string"
                      },
                      "publicKey": {
                        "description": "PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.",
                        "type": "string"
                      },
                      "referrerPolicy": {
                        "description": "ReferrerPolicy defines the Referrer-Policy header value.\nThis allows sites to control whether browsers forward the Referer header to other sites.",
                        "type": "string"
                      },
                      "sslForceHost": {
                        "description": "Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.",
                        "type": "boolean"
                      },
                      "sslHost": {
                        "description": "Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.",
                        "type": "string"
                      },
                      "sslProxyHeaders": {
                        "description": "SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.\nIt can be useful when using other proxies (example: \"X-Forwarded-Proto\": \"https\").",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "sslRedirect": {
                        "description": "Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.",
                        "type": "boolean"
                      },
                      "sslTemporaryRedirect": {
                        "description": "Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.",
                        "type": "boolean"
                      },
                      "stsIncludeSubdomains": {
                        "description": "STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.",
                        "type": "boolean"
                      },
                      "stsPreload": {
                        "description": "STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.",
                        "type": "boolean"
                      },
                      "stsSeconds": {
                        "description": "STSSeconds defines the max-age of the Strict-Transport-Security header.\nIf set to 0, the header is not set.",
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  "inFlightReq": {
                    "description": "InFlightReq holds the in-flight request middleware configuration.\nThis middleware limits the number of requests being processed and served concurrently.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/",
                    "type": "object",
                    "properties": {
                      "amount": {
                        "description": "Amount defines the maximum amount of allowed simultaneous in-flight request.\nThe middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "sourceCriterion": {
                        "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source.\nIf several strategies are defined at the same time, an error will be raised.\nIf none are set, the default is to use the requestHost.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion",
                        "type": "object",
                        "properties": {
                          "ipStrategy": {
                            "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                            "type": "object",
                            "properties": {
                              "depth": {
                                "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                "type": "integer"
                              },
                              "excludedIPs": {
                                "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "requestHeaderName": {
                            "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                            "type": "string"
                          },
                          "requestHost": {
                            "description": "RequestHost defines whether to consider the request Host as the source.",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "ipAllowList": {
                    "description": "IPAllowList holds the IP allowlist middleware configuration.\nThis middleware accepts / refuses requests based on the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/",
                    "type": "object",
                    "properties": {
                      "ipStrategy": {
                        "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                        "type": "object",
                        "properties": {
                          "depth": {
                            "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                            "type": "integer"
                          },
                          "excludedIPs": {
                            "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "rejectStatusCode": {
                        "description": "RejectStatusCode defines the HTTP status code used for refused requests.\nIf not set, the default is 403 (Forbidden).",
                        "type": "integer"
                      },
                      "sourceRange": {
                        "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "ipWhiteList": {
                    "description": "Deprecated: please use IPAllowList instead.",
                    "type": "object",
                    "properties": {
                      "ipStrategy": {
                        "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                        "type": "object",
                        "properties": {
                          "depth": {
                            "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                            "type": "integer"
                          },
                          "excludedIPs": {
                            "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "sourceRange": {
                        "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "passTLSClientCert": {
                    "description": "PassTLSClientCert holds the pass TLS client cert middleware configuration.\nThis middleware adds the selected data from the passed client TLS certificate to a header.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/",
                    "type": "object",
                    "properties": {
                      "info": {
                        "description": "Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                        "type": "object",
                        "properties": {
                          "issuer": {
                            "description": "Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                            "type": "object",
                            "properties": {
                              "commonName": {
                                "description": "CommonName defines whether to add the organizationalUnit information into the issuer.",
                                "type": "boolean"
                              },
                              "country": {
                                "description": "Country defines whether to add the country information into the issuer.",
                                "type": "boolean"
                              },
                              "domainComponent": {
                                "description": "DomainComponent defines whether to add the domainComponent information into the issuer.",
                                "type": "boolean"
                              },
                              "locality": {
                                "description": "Locality defines whether to add the locality information into the issuer.",
                                "type": "boolean"
                              },
                              "organization": {
                                "description": "Organization defines whether to add the organization information into the issuer.",
                                "type": "boolean"
                              },
                              "province": {
                                "description": "Province defines whether to add the province information into the issuer.",
                                "type": "boolean"
                              },
                              "serialNumber": {
                                "description": "SerialNumber defines whether to add the serialNumber information into the issuer.",
                                "type": "boolean"
                              }
                            }
                          },
                          "notAfter": {
                            "description": "NotAfter defines whether to add the Not After information from the Validity part.",
                            "type": "boolean"
                          },
                          "notBefore": {
                            "description": "NotBefore defines whether to add the Not Before information from the Validity part.",
                            "type": "boolean"
                          },
                          "sans": {
                            "description": "Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.",
                            "type": "boolean"
                          },
                          "serialNumber": {
                            "description": "SerialNumber defines whether to add the client serialNumber information.",
                            "type": "boolean"
                          },
                          "subject": {
                            "description": "Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                            "type": "object",
                            "properties": {
                              "commonName": {
                                "description": "CommonName defines whether to add the organizationalUnit information into the subject.",
                                "type": "boolean"
                              },
                              "country": {
                                "description": "Country defines whether to add the country information into the subject.",
                                "type": "boolean"
                              },
                              "domainComponent": {
                                "description": "DomainComponent defines whether to add the domainComponent information into the subject.",
                                "type": "boolean"
                              },
                              "locality": {
                                "description": "Locality defines whether to add the locality information into the subject.",
                                "type": "boolean"
                              },
                              "organization": {
                                "description": "Organization defines whether to add the organization information into the subject.",
                                "type": "boolean"
                              },
                              "organizationalUnit": {
                                "description": "OrganizationalUnit defines whether to add the organizationalUnit information into the subject.",
                                "type": "boolean"
                              },
                              "province": {
                                "description": "Province defines whether to add the province information into the subject.",
                                "type": "boolean"
                              },
                              "serialNumber": {
                                "description": "SerialNumber defines whether to add the serialNumber information into the subject.",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "pem": {
                        "description": "PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.",
                        "type": "boolean"
                      }
                    }
                  },
                  "plugin": {
                    "description": "Plugin defines the middleware plugin configuration.\nMore info: https://doc.traefik.io/traefik/plugins/",
                    "type": "object",
                    "additionalProperties": {
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  },
                  "rateLimit": {
                    "description": "RateLimit holds the rate limit configuration.\nThis middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/",
                    "type": "object",
                    "properties": {
                      "average": {
                        "description": "Average is the maximum rate, by default in requests/s, allowed for the given source.\nIt defaults to 0, which means no rate limiting.\nThe rate is actually defined by dividing Average by Period. So for a rate below 1req/s,\none needs to define a Period larger than a second.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "burst": {
                        "description": "Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.\nIt defaults to 1.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "period": {
                        "description": "Period, in combination with Average, defines the actual maximum rate, such as:\nr = Average / Period. It defaults to a second.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "sourceCriterion": {
                        "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source.\nIf several strategies are defined at the same time, an error will be raised.\nIf none are set, the default is to use the request's remote address field (as an ipStrategy).",
                        "type": "object",
                        "properties": {
                          "ipStrategy": {
                            "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                            "type": "object",
                            "properties": {
                              "depth": {
                                "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                "type": "integer"
                              },
                              "excludedIPs": {
                                "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "requestHeaderName": {
                            "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                            "type": "string"
                          },
                          "requestHost": {
                            "description": "RequestHost defines whether to consider the request Host as the source.",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "redirectRegex": {
                    "description": "RedirectRegex holds the redirect regex middleware configuration.\nThis middleware redirects a request using regex matching and replacement.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex",
                    "type": "object",
                    "properties": {
                      "permanent": {
                        "description": "Permanent defines whether the redirection is permanent (301).",
                        "type": "boolean"
                      },
                      "regex": {
                        "description": "Regex defines the regex used to match and capture elements from the request URL.",
                        "type": "string"
                      },
                      "replacement": {
                        "description": "Replacement defines how to modify the URL to have the new target URL.",
                        "type": "string"
                      }
                    }
                  },
                  "redirectScheme": {
                    "description": "RedirectScheme holds the redirect scheme middleware configuration.\nThis middleware redirects requests from a scheme/port to another.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/",
                    "type": "object",
                    "properties": {
                      "permanent": {
                        "description": "Permanent defines whether the redirection is permanent (301).",
                        "type": "boolean"
                      },
                      "port": {
                        "description": "Port defines the port of the new URL.",
                        "type": "string"
                      },
                      "scheme": {
                        "description": "Scheme defines the scheme of the new URL.",
                        "type": "string"
                      }
                    }
                  },
                  "replacePath": {
                    "description": "ReplacePath holds the replace path middleware configuration.\nThis middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/",
                    "type": "object",
                    "properties": {
                      "path": {
                        "description": "Path defines the path to use as replacement in the request URL.",
                        "type": "string"
                      }
                    }
                  },
                  "replacePathRegex": {
                    "description": "ReplacePathRegex holds the replace path regex middleware configuration.\nThis middleware replaces the path of a URL using regex matching and replacement.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/",
                    "type": "object",
                    "properties": {
                      "regex": {
                        "description": "Regex defines the regular expression used to match and capture the path from the request URL.",
                        "type": "string"
                      },
                      "replacement": {
                        "description": "Replacement defines the replacement path format, which can include captured variables.",
                        "type": "string"
                      }
                    }
                  },
                  "retry": {
                    "description": "Retry holds the retry middleware configuration.\nThis middleware reissues requests a given number of times to a backend server if that server does not reply.\nAs soon as the server answers, the middleware stops retrying, regardless of the response status.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/",
                    "type": "object",
                    "properties": {
                      "attempts": {
                        "description": "Attempts defines how many times the request should be retried.",
                        "type": "integer"
                      },
                      "initialInterval": {
                        "description": "InitialInterval defines the first wait time in the exponential backoff series.\nThe maximum interval is calculated as twice the initialInterval.\nIf unspecified, requests will be retried immediately.\nThe value of initialInterval should be provided in seconds or as a valid duration format,\nsee https://pkg.go.dev/time#ParseDuration.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  },
                  "stripPrefix": {
                    "description": "StripPrefix holds the strip prefix middleware configuration.\nThis middleware removes the specified prefixes from the URL path.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/",
                    "type": "object",
                    "properties": {
                      "forceSlash": {
                        "description": "Deprecated: ForceSlash option is deprecated, please remove any usage of this option.\nForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.\nDefault: true.",
                        "type": "boolean"
                      },
                      "prefixes": {
                        "description": "Prefixes defines the prefixes to strip from the request URL.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "stripPrefixRegex": {
                    "description": "StripPrefixRegex holds the strip prefix regex middleware configuration.\nThis middleware removes the matching prefixes from the URL path.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/",
                    "type": "object",
                    "properties": {
                      "regex": {
                        "description": "Regex defines the regular expression to match the path prefix from the request URL.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "Middleware is the CRD implementation of a Traefik Middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/overview/",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "Middleware",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "middlewares.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "middlewares",
                "singular": "middleware",
                "kind": "Middleware",
                "listKind": "MiddlewareList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "Middleware is the CRD implementation of a Traefik Middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/overview/",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "MiddlewareSpec defines the desired state of a Middleware.",
                          "type": "object",
                          "properties": {
                            "addPrefix": {
                              "description": "AddPrefix holds the add prefix middleware configuration.\nThis middleware updates the path of a request before forwarding it.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/",
                              "type": "object",
                              "properties": {
                                "prefix": {
                                  "description": "Prefix is the string to add before the current path in the requested URL.\nIt should include a leading slash (/).",
                                  "type": "string"
                                }
                              }
                            },
                            "basicAuth": {
                              "description": "BasicAuth holds the basic auth middleware configuration.\nThis middleware restricts access to your services to known users.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/",
                              "type": "object",
                              "properties": {
                                "headerField": {
                                  "description": "HeaderField defines a header field to store the authenticated user.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield",
                                  "type": "string"
                                },
                                "realm": {
                                  "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.\nDefault: traefik.",
                                  "type": "string"
                                },
                                "removeHeader": {
                                  "description": "RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.\nDefault: false.",
                                  "type": "boolean"
                                },
                                "secret": {
                                  "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                                  "type": "string"
                                }
                              }
                            },
                            "buffering": {
                              "description": "Buffering holds the buffering middleware configuration.\nThis middleware retries or limits the size of requests that can be forwarded to backends.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes",
                              "type": "object",
                              "properties": {
                                "maxRequestBodyBytes": {
                                  "description": "MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).\nIf the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.\nDefault: 0 (no maximum).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "maxResponseBodyBytes": {
                                  "description": "MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).\nIf the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.\nDefault: 0 (no maximum).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "memRequestBodyBytes": {
                                  "description": "MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.\nDefault: 1048576 (1Mi).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "memResponseBodyBytes": {
                                  "description": "MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.\nDefault: 1048576 (1Mi).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "retryExpression": {
                                  "description": "RetryExpression defines the retry conditions.\nIt is a logical combination of functions with operators AND (&&) and OR (||).\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#retryexpression",
                                  "type": "string"
                                }
                              }
                            },
                            "chain": {
                              "description": "Chain holds the configuration of the chain middleware.\nThis middleware enables to define reusable combinations of other pieces of middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/",
                              "type": "object",
                              "properties": {
                                "middlewares": {
                                  "description": "Middlewares is the list of MiddlewareRef which composes the chain.",
                                  "type": "array",
                                  "items": {
                                    "description": "MiddlewareRef is a reference to a Middleware resource.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name defines the name of the referenced Middleware resource.",
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "description": "Namespace defines the namespace of the referenced Middleware resource.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "circuitBreaker": {
                              "description": "CircuitBreaker holds the circuit breaker configuration.",
                              "type": "object",
                              "properties": {
                                "checkPeriod": {
                                  "description": "CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "expression": {
                                  "description": "Expression is the condition that triggers the tripped state.",
                                  "type": "string"
                                },
                                "fallbackDuration": {
                                  "description": "FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "recoveryDuration": {
                                  "description": "RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "compress": {
                              "description": "Compress holds the compress middleware configuration.\nThis middleware compresses responses before sending them to the client, using gzip compression.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/",
                              "type": "object",
                              "properties": {
                                "excludedContentTypes": {
                                  "description": "ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.\n`application/grpc` is always excluded.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "includedContentTypes": {
                                  "description": "IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "minResponseBodyBytes": {
                                  "description": "MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.\nDefault: 1024.",
                                  "type": "integer"
                                }
                              }
                            },
                            "contentType": {
                              "description": "ContentType holds the content-type middleware configuration.\nThis middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                              "type": "object",
                              "properties": {
                                "autoDetect": {
                                  "description": "AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,\nbe automatically set to a value derived from the contents of the response.\nDeprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "digestAuth": {
                              "description": "DigestAuth holds the digest auth middleware configuration.\nThis middleware restricts access to your services to known users.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/",
                              "type": "object",
                              "properties": {
                                "headerField": {
                                  "description": "HeaderField defines a header field to store the authenticated user.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield",
                                  "type": "string"
                                },
                                "realm": {
                                  "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.\nDefault: traefik.",
                                  "type": "string"
                                },
                                "removeHeader": {
                                  "description": "RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.",
                                  "type": "boolean"
                                },
                                "secret": {
                                  "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                                  "type": "string"
                                }
                              }
                            },
                            "errors": {
                              "description": "ErrorPage holds the custom error middleware configuration.\nThis middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/",
                              "type": "object",
                              "properties": {
                                "query": {
                                  "description": "Query defines the URL for the error page (hosted by service).\nThe {status} variable can be used in order to insert the status code in the URL.",
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Service defines the reference to a Kubernetes Service that will serve the error page.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "kind": {
                                      "description": "Kind defines the kind of the Service.",
                                      "type": "string",
                                      "enum": [
                                        "Service",
                                        "TraefikService"
                                      ]
                                    },
                                    "name": {
                                      "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                      "type": "string"
                                    },
                                    "nativeLB": {
                                      "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                      "type": "boolean"
                                    },
                                    "passHostHeader": {
                                      "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                      "type": "boolean"
                                    },
                                    "port": {
                                      "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "responseForwarding": {
                                      "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                      "type": "object",
                                      "properties": {
                                        "flushInterval": {
                                          "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "scheme": {
                                      "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                      "type": "string"
                                    },
                                    "serversTransport": {
                                      "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                      "type": "string"
                                    },
                                    "sticky": {
                                      "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                      "type": "object",
                                      "properties": {
                                        "cookie": {
                                          "description": "Cookie defines the sticky cookie configuration.",
                                          "type": "object",
                                          "properties": {
                                            "httpOnly": {
                                              "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                              "type": "boolean"
                                            },
                                            "maxAge": {
                                              "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                              "type": "integer"
                                            },
                                            "name": {
                                              "description": "Name defines the Cookie name.",
                                              "type": "string"
                                            },
                                            "sameSite": {
                                              "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                              "type": "string"
                                            },
                                            "secure": {
                                              "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "strategy": {
                                      "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                      "type": "string"
                                    },
                                    "weight": {
                                      "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                      "type": "integer"
                                    }
                                  }
                                },
                                "status": {
                                  "description": "Status defines which status or range of statuses should result in an error page.\nIt can be either a status code as a number (500),\nas multiple comma-separated numbers (500,502),\nas ranges by separating two codes with a dash (500-599),\nor a combination of the two (404,418,500-599).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "forwardAuth": {
                              "description": "ForwardAuth holds the forward auth middleware configuration.\nThis middleware delegates the request authentication to a Service.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/",
                              "type": "object",
                              "properties": {
                                "addAuthCookiesToResponse": {
                                  "description": "AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "address": {
                                  "description": "Address defines the authentication server address.",
                                  "type": "string"
                                },
                                "authRequestHeaders": {
                                  "description": "AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.\nIf not set or empty then all request headers are passed.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "authResponseHeaders": {
                                  "description": "AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "authResponseHeadersRegex": {
                                  "description": "AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/#authresponseheadersregex",
                                  "type": "string"
                                },
                                "tls": {
                                  "description": "TLS defines the configuration used to secure the connection to the authentication server.",
                                  "type": "object",
                                  "properties": {
                                    "caOptional": {
                                      "description": "Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).",
                                      "type": "boolean"
                                    },
                                    "caSecret": {
                                      "description": "CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.\nThe CA certificate is extracted from key `tls.ca` or `ca.crt`.",
                                      "type": "string"
                                    },
                                    "certSecret": {
                                      "description": "CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.\nThe client certificate is extracted from the keys `tls.crt` and `tls.key`.",
                                      "type": "string"
                                    },
                                    "insecureSkipVerify": {
                                      "description": "InsecureSkipVerify defines whether the server certificates should be validated.",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "trustForwardHeader": {
                                  "description": "TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "grpcWeb": {
                              "description": "GrpcWeb holds the gRPC web middleware configuration.\nThis middleware converts a gRPC web request to an HTTP/2 gRPC request.",
                              "type": "object",
                              "properties": {
                                "allowOrigins": {
                                  "description": "AllowOrigins is a list of allowable origins.\nCan also be a wildcard origin \"*\".",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "headers": {
                              "description": "Headers holds the headers middleware configuration.\nThis middleware manages the requests and responses headers.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders",
                              "type": "object",
                              "properties": {
                                "accessControlAllowCredentials": {
                                  "description": "AccessControlAllowCredentials defines whether the request can include user credentials.",
                                  "type": "boolean"
                                },
                                "accessControlAllowHeaders": {
                                  "description": "AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlAllowMethods": {
                                  "description": "AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlAllowOriginList": {
                                  "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlAllowOriginListRegex": {
                                  "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlExposeHeaders": {
                                  "description": "AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlMaxAge": {
                                  "description": "AccessControlMaxAge defines the time that a preflight request may be cached.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "addVaryHeader": {
                                  "description": "AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                                  "type": "boolean"
                                },
                                "allowedHosts": {
                                  "description": "AllowedHosts defines the fully qualified list of allowed domain names.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "browserXssFilter": {
                                  "description": "BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.",
                                  "type": "boolean"
                                },
                                "contentSecurityPolicy": {
                                  "description": "ContentSecurityPolicy defines the Content-Security-Policy header value.",
                                  "type": "string"
                                },
                                "contentTypeNosniff": {
                                  "description": "ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.",
                                  "type": "boolean"
                                },
                                "customBrowserXSSValue": {
                                  "description": "CustomBrowserXSSValue defines the X-XSS-Protection header value.\nThis overrides the BrowserXssFilter option.",
                                  "type": "string"
                                },
                                "customFrameOptionsValue": {
                                  "description": "CustomFrameOptionsValue defines the X-Frame-Options header value.\nThis overrides the FrameDeny option.",
                                  "type": "string"
                                },
                                "customRequestHeaders": {
                                  "description": "CustomRequestHeaders defines the header names and values to apply to the request.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "customResponseHeaders": {
                                  "description": "CustomResponseHeaders defines the header names and values to apply to the response.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "featurePolicy": {
                                  "description": "Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.",
                                  "type": "string"
                                },
                                "forceSTSHeader": {
                                  "description": "ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.",
                                  "type": "boolean"
                                },
                                "frameDeny": {
                                  "description": "FrameDeny defines whether to add the X-Frame-Options header with the DENY value.",
                                  "type": "boolean"
                                },
                                "hostsProxyHeaders": {
                                  "description": "HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "isDevelopment": {
                                  "description": "IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.\nUsually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.\nIf you would like your development environment to mimic production with complete Host blocking, SSL redirects,\nand STS headers, leave this as false.",
                                  "type": "boolean"
                                },
                                "permissionsPolicy": {
                                  "description": "PermissionsPolicy defines the Permissions-Policy header value.\nThis allows sites to control browser features.",
                                  "type": "string"
                                },
                                "publicKey": {
                                  "description": "PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.",
                                  "type": "string"
                                },
                                "referrerPolicy": {
                                  "description": "ReferrerPolicy defines the Referrer-Policy header value.\nThis allows sites to control whether browsers forward the Referer header to other sites.",
                                  "type": "string"
                                },
                                "sslForceHost": {
                                  "description": "Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.",
                                  "type": "boolean"
                                },
                                "sslHost": {
                                  "description": "Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.",
                                  "type": "string"
                                },
                                "sslProxyHeaders": {
                                  "description": "SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.\nIt can be useful when using other proxies (example: \"X-Forwarded-Proto\": \"https\").",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "sslRedirect": {
                                  "description": "Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.",
                                  "type": "boolean"
                                },
                                "sslTemporaryRedirect": {
                                  "description": "Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.",
                                  "type": "boolean"
                                },
                                "stsIncludeSubdomains": {
                                  "description": "STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.",
                                  "type": "boolean"
                                },
                                "stsPreload": {
                                  "description": "STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.",
                                  "type": "boolean"
                                },
                                "stsSeconds": {
                                  "description": "STSSeconds defines the max-age of the Strict-Transport-Security header.\nIf set to 0, the header is not set.",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            },
                            "inFlightReq": {
                              "description": "InFlightReq holds the in-flight request middleware configuration.\nThis middleware limits the number of requests being processed and served concurrently.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/",
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "description": "Amount defines the maximum amount of allowed simultaneous in-flight request.\nThe middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "sourceCriterion": {
                                  "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source.\nIf several strategies are defined at the same time, an error will be raised.\nIf none are set, the default is to use the requestHost.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion",
                                  "type": "object",
                                  "properties": {
                                    "ipStrategy": {
                                      "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                                      "type": "object",
                                      "properties": {
                                        "depth": {
                                          "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                          "type": "integer"
                                        },
                                        "excludedIPs": {
                                          "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "requestHeaderName": {
                                      "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                                      "type": "string"
                                    },
                                    "requestHost": {
                                      "description": "RequestHost defines whether to consider the request Host as the source.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "ipAllowList": {
                              "description": "IPAllowList holds the IP allowlist middleware configuration.\nThis middleware accepts / refuses requests based on the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/",
                              "type": "object",
                              "properties": {
                                "ipStrategy": {
                                  "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                                  "type": "object",
                                  "properties": {
                                    "depth": {
                                      "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                      "type": "integer"
                                    },
                                    "excludedIPs": {
                                      "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "rejectStatusCode": {
                                  "description": "RejectStatusCode defines the HTTP status code used for refused requests.\nIf not set, the default is 403 (Forbidden).",
                                  "type": "integer"
                                },
                                "sourceRange": {
                                  "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "ipWhiteList": {
                              "description": "Deprecated: please use IPAllowList instead.",
                              "type": "object",
                              "properties": {
                                "ipStrategy": {
                                  "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                                  "type": "object",
                                  "properties": {
                                    "depth": {
                                      "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                      "type": "integer"
                                    },
                                    "excludedIPs": {
                                      "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "sourceRange": {
                                  "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "passTLSClientCert": {
                              "description": "PassTLSClientCert holds the pass TLS client cert middleware configuration.\nThis middleware adds the selected data from the passed client TLS certificate to a header.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/",
                              "type": "object",
                              "properties": {
                                "info": {
                                  "description": "Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                                  "type": "object",
                                  "properties": {
                                    "issuer": {
                                      "description": "Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                                      "type": "object",
                                      "properties": {
                                        "commonName": {
                                          "description": "CommonName defines whether to add the organizationalUnit information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "country": {
                                          "description": "Country defines whether to add the country information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "domainComponent": {
                                          "description": "DomainComponent defines whether to add the domainComponent information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "locality": {
                                          "description": "Locality defines whether to add the locality information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "organization": {
                                          "description": "Organization defines whether to add the organization information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "province": {
                                          "description": "Province defines whether to add the province information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "serialNumber": {
                                          "description": "SerialNumber defines whether to add the serialNumber information into the issuer.",
                                          "type": "boolean"
                                        }
                                      }
                                    },
                                    "notAfter": {
                                      "description": "NotAfter defines whether to add the Not After information from the Validity part.",
                                      "type": "boolean"
                                    },
                                    "notBefore": {
                                      "description": "NotBefore defines whether to add the Not Before information from the Validity part.",
                                      "type": "boolean"
                                    },
                                    "sans": {
                                      "description": "Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.",
                                      "type": "boolean"
                                    },
                                    "serialNumber": {
                                      "description": "SerialNumber defines whether to add the client serialNumber information.",
                                      "type": "boolean"
                                    },
                                    "subject": {
                                      "description": "Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                                      "type": "object",
                                      "properties": {
                                        "commonName": {
                                          "description": "CommonName defines whether to add the organizationalUnit information into the subject.",
                                          "type": "boolean"
                                        },
                                        "country": {
                                          "description": "Country defines whether to add the country information into the subject.",
                                          "type": "boolean"
                                        },
                                        "domainComponent": {
                                          "description": "DomainComponent defines whether to add the domainComponent information into the subject.",
                                          "type": "boolean"
                                        },
                                        "locality": {
                                          "description": "Locality defines whether to add the locality information into the subject.",
                                          "type": "boolean"
                                        },
                                        "organization": {
                                          "description": "Organization defines whether to add the organization information into the subject.",
                                          "type": "boolean"
                                        },
                                        "organizationalUnit": {
                                          "description": "OrganizationalUnit defines whether to add the organizationalUnit information into the subject.",
                                          "type": "boolean"
                                        },
                                        "province": {
                                          "description": "Province defines whether to add the province information into the subject.",
                                          "type": "boolean"
                                        },
                                        "serialNumber": {
                                          "description": "SerialNumber defines whether to add the serialNumber information into the subject.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                },
                                "pem": {
                                  "description": "PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "plugin": {
                              "description": "Plugin defines the middleware plugin configuration.\nMore info: https://doc.traefik.io/traefik/plugins/",
                              "type": "object",
                              "additionalProperties": {
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            },
                            "rateLimit": {
                              "description": "RateLimit holds the rate limit configuration.\nThis middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/",
                              "type": "object",
                              "properties": {
                                "average": {
                                  "description": "Average is the maximum rate, by default in requests/s, allowed for the given source.\nIt defaults to 0, which means no rate limiting.\nThe rate is actually defined by dividing Average by Period. So for a rate below 1req/s,\none needs to define a Period larger than a second.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "burst": {
                                  "description": "Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.\nIt defaults to 1.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "period": {
                                  "description": "Period, in combination with Average, defines the actual maximum rate, such as:\nr = Average / Period. It defaults to a second.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "sourceCriterion": {
                                  "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source.\nIf several strategies are defined at the same time, an error will be raised.\nIf none are set, the default is to use the request's remote address field (as an ipStrategy).",
                                  "type": "object",
                                  "properties": {
                                    "ipStrategy": {
                                      "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                                      "type": "object",
                                      "properties": {
                                        "depth": {
                                          "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                          "type": "integer"
                                        },
                                        "excludedIPs": {
                                          "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "requestHeaderName": {
                                      "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                                      "type": "string"
                                    },
                                    "requestHost": {
                                      "description": "RequestHost defines whether to consider the request Host as the source.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "redirectRegex": {
                              "description": "RedirectRegex holds the redirect regex middleware configuration.\nThis middleware redirects a request using regex matching and replacement.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex",
                              "type": "object",
                              "properties": {
                                "permanent": {
                                  "description": "Permanent defines whether the redirection is permanent (301).",
                                  "type": "boolean"
                                },
                                "regex": {
                                  "description": "Regex defines the regex used to match and capture elements from the request URL.",
                                  "type": "string"
                                },
                                "replacement": {
                                  "description": "Replacement defines how to modify the URL to have the new target URL.",
                                  "type": "string"
                                }
                              }
                            },
                            "redirectScheme": {
                              "description": "RedirectScheme holds the redirect scheme middleware configuration.\nThis middleware redirects requests from a scheme/port to another.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/",
                              "type": "object",
                              "properties": {
                                "permanent": {
                                  "description": "Permanent defines whether the redirection is permanent (301).",
                                  "type": "boolean"
                                },
                                "port": {
                                  "description": "Port defines the port of the new URL.",
                                  "type": "string"
                                },
                                "scheme": {
                                  "description": "Scheme defines the scheme of the new URL.",
                                  "type": "string"
                                }
                              }
                            },
                            "replacePath": {
                              "description": "ReplacePath holds the replace path middleware configuration.\nThis middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/",
                              "type": "object",
                              "properties": {
                                "path": {
                                  "description": "Path defines the path to use as replacement in the request URL.",
                                  "type": "string"
                                }
                              }
                            },
                            "replacePathRegex": {
                              "description": "ReplacePathRegex holds the replace path regex middleware configuration.\nThis middleware replaces the path of a URL using regex matching and replacement.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/",
                              "type": "object",
                              "properties": {
                                "regex": {
                                  "description": "Regex defines the regular expression used to match and capture the path from the request URL.",
                                  "type": "string"
                                },
                                "replacement": {
                                  "description": "Replacement defines the replacement path format, which can include captured variables.",
                                  "type": "string"
                                }
                              }
                            },
                            "retry": {
                              "description": "Retry holds the retry middleware configuration.\nThis middleware reissues requests a given number of times to a backend server if that server does not reply.\nAs soon as the server answers, the middleware stops retrying, regardless of the response status.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/",
                              "type": "object",
                              "properties": {
                                "attempts": {
                                  "description": "Attempts defines how many times the request should be retried.",
                                  "type": "integer"
                                },
                                "initialInterval": {
                                  "description": "InitialInterval defines the first wait time in the exponential backoff series.\nThe maximum interval is calculated as twice the initialInterval.\nIf unspecified, requests will be retried immediately.\nThe value of initialInterval should be provided in seconds or as a valid duration format,\nsee https://pkg.go.dev/time#ParseDuration.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "stripPrefix": {
                              "description": "StripPrefix holds the strip prefix middleware configuration.\nThis middleware removes the specified prefixes from the URL path.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/",
                              "type": "object",
                              "properties": {
                                "forceSlash": {
                                  "description": "Deprecated: ForceSlash option is deprecated, please remove any usage of this option.\nForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.\nDefault: true.",
                                  "type": "boolean"
                                },
                                "prefixes": {
                                  "description": "Prefixes defines the prefixes to strip from the request URL.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "stripPrefixRegex": {
                              "description": "StripPrefixRegex holds the strip prefix regex middleware configuration.\nThis middleware removes the matching prefixes from the URL path.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/",
                              "type": "object",
                              "properties": {
                                "regex": {
                                  "description": "Regex defines the regular expression to match the path prefix from the request URL.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "middlewares",
                "singular": "middleware",
                "kind": "Middleware",
                "listKind": "MiddlewareList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "Middleware",
          "apiGroup": "traefik.io",
          "apiKind": "Middleware",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.Middleware",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "MiddlewareSpec defines the desired state of a Middleware.",
                "properties": {
                  "addPrefix": {
                    "description": "AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/addprefix/",
                    "type": "object",
                    "properties": {
                      "prefix": {
                        "description": "Prefix is the string to add before the current path in the requested URL. It should include a leading slash (/).",
                        "type": "string"
                      }
                    }
                  },
                  "basicAuth": {
                    "description": "BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/",
                    "type": "object",
                    "properties": {
                      "headerField": {
                        "description": "HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/#headerfield",
                        "type": "string"
                      },
                      "realm": {
                        "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.",
                        "type": "string"
                      },
                      "removeHeader": {
                        "description": "RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service. Default: false.",
                        "type": "boolean"
                      },
                      "secret": {
                        "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                        "type": "string"
                      }
                    }
                  },
                  "buffering": {
                    "description": "Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#maxrequestbodybytes",
                    "type": "object",
                    "properties": {
                      "maxRequestBodyBytes": {
                        "description": "MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "maxResponseBodyBytes": {
                        "description": "MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "memRequestBodyBytes": {
                        "description": "MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "memResponseBodyBytes": {
                        "description": "MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "retryExpression": {
                        "description": "RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#retryexpression",
                        "type": "string"
                      }
                    }
                  },
                  "chain": {
                    "description": "Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/chain/",
                    "type": "object",
                    "properties": {
                      "middlewares": {
                        "description": "Middlewares is the list of MiddlewareRef which composes the chain.",
                        "type": "array",
                        "items": {
                          "description": "MiddlewareRef is a reference to a Middleware resource.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name defines the name of the referenced Middleware resource.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace defines the namespace of the referenced Middleware resource.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "circuitBreaker": {
                    "description": "CircuitBreaker holds the circuit breaker configuration.",
                    "type": "object",
                    "properties": {
                      "checkPeriod": {
                        "description": "CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "expression": {
                        "description": "Expression is the condition that triggers the tripped state.",
                        "type": "string"
                      },
                      "fallbackDuration": {
                        "description": "FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "recoveryDuration": {
                        "description": "RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  },
                  "compress": {
                    "description": "Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/compress/",
                    "type": "object",
                    "properties": {
                      "excludedContentTypes": {
                        "description": "ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "minResponseBodyBytes": {
                        "description": "MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed. Default: 1024.",
                        "type": "integer"
                      }
                    }
                  },
                  "contentType": {
                    "description": "ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                    "type": "object",
                    "properties": {
                      "autoDetect": {
                        "description": "AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it.",
                        "type": "boolean"
                      }
                    }
                  },
                  "digestAuth": {
                    "description": "DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/digestauth/",
                    "type": "object",
                    "properties": {
                      "headerField": {
                        "description": "HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/#headerfield",
                        "type": "string"
                      },
                      "realm": {
                        "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.",
                        "type": "string"
                      },
                      "removeHeader": {
                        "description": "RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.",
                        "type": "boolean"
                      },
                      "secret": {
                        "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                        "type": "string"
                      }
                    }
                  },
                  "errors": {
                    "description": "ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/",
                    "type": "object",
                    "properties": {
                      "query": {
                        "description": "Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.",
                        "type": "string"
                      },
                      "service": {
                        "description": "Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/#service",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "kind": {
                            "description": "Kind defines the kind of the Service.",
                            "type": "string",
                            "enum": [
                              "Service",
                              "TraefikService"
                            ]
                          },
                          "name": {
                            "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                            "type": "string"
                          },
                          "nativeLB": {
                            "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                            "type": "boolean"
                          },
                          "passHostHeader": {
                            "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                            "type": "boolean"
                          },
                          "port": {
                            "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                            "x-kubernetes-int-or-string": true,
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "responseForwarding": {
                            "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                            "type": "object",
                            "properties": {
                              "flushInterval": {
                                "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                "type": "string"
                              }
                            }
                          },
                          "scheme": {
                            "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                            "type": "string"
                          },
                          "serversTransport": {
                            "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                            "type": "string"
                          },
                          "sticky": {
                            "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                            "type": "object",
                            "properties": {
                              "cookie": {
                                "description": "Cookie defines the sticky cookie configuration.",
                                "type": "object",
                                "properties": {
                                  "httpOnly": {
                                    "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                    "type": "boolean"
                                  },
                                  "name": {
                                    "description": "Name defines the Cookie name.",
                                    "type": "string"
                                  },
                                  "sameSite": {
                                    "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                    "type": "string"
                                  },
                                  "secure": {
                                    "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "strategy": {
                            "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                            "type": "string"
                          },
                          "weight": {
                            "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                            "type": "integer"
                          }
                        }
                      },
                      "status": {
                        "description": "Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "forwardAuth": {
                    "description": "ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/",
                    "type": "object",
                    "properties": {
                      "address": {
                        "description": "Address defines the authentication server address.",
                        "type": "string"
                      },
                      "authRequestHeaders": {
                        "description": "AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "authResponseHeaders": {
                        "description": "AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "authResponseHeadersRegex": {
                        "description": "AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/#authresponseheadersregex",
                        "type": "string"
                      },
                      "tls": {
                        "description": "TLS defines the configuration used to secure the connection to the authentication server.",
                        "type": "object",
                        "properties": {
                          "caOptional": {
                            "type": "boolean"
                          },
                          "caSecret": {
                            "description": "CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.",
                            "type": "string"
                          },
                          "certSecret": {
                            "description": "CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.",
                            "type": "string"
                          },
                          "insecureSkipVerify": {
                            "description": "InsecureSkipVerify defines whether the server certificates should be validated.",
                            "type": "boolean"
                          }
                        }
                      },
                      "trustForwardHeader": {
                        "description": "TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.",
                        "type": "boolean"
                      }
                    }
                  },
                  "headers": {
                    "description": "Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/headers/#customrequestheaders",
                    "type": "object",
                    "properties": {
                      "accessControlAllowCredentials": {
                        "description": "AccessControlAllowCredentials defines whether the request can include user credentials.",
                        "type": "boolean"
                      },
                      "accessControlAllowHeaders": {
                        "description": "AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlAllowMethods": {
                        "description": "AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlAllowOriginList": {
                        "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlAllowOriginListRegex": {
                        "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlExposeHeaders": {
                        "description": "AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "accessControlMaxAge": {
                        "description": "AccessControlMaxAge defines the time that a preflight request may be cached.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "addVaryHeader": {
                        "description": "AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                        "type": "boolean"
                      },
                      "allowedHosts": {
                        "description": "AllowedHosts defines the fully qualified list of allowed domain names.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "browserXssFilter": {
                        "description": "BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.",
                        "type": "boolean"
                      },
                      "contentSecurityPolicy": {
                        "description": "ContentSecurityPolicy defines the Content-Security-Policy header value.",
                        "type": "string"
                      },
                      "contentTypeNosniff": {
                        "description": "ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.",
                        "type": "boolean"
                      },
                      "customBrowserXSSValue": {
                        "description": "CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.",
                        "type": "string"
                      },
                      "customFrameOptionsValue": {
                        "description": "CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.",
                        "type": "string"
                      },
                      "customRequestHeaders": {
                        "description": "CustomRequestHeaders defines the header names and values to apply to the request.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "customResponseHeaders": {
                        "description": "CustomResponseHeaders defines the header names and values to apply to the response.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "featurePolicy": {
                        "description": "Deprecated: use PermissionsPolicy instead.",
                        "type": "string"
                      },
                      "forceSTSHeader": {
                        "description": "ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.",
                        "type": "boolean"
                      },
                      "frameDeny": {
                        "description": "FrameDeny defines whether to add the X-Frame-Options header with the DENY value.",
                        "type": "boolean"
                      },
                      "hostsProxyHeaders": {
                        "description": "HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "isDevelopment": {
                        "description": "IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.",
                        "type": "boolean"
                      },
                      "permissionsPolicy": {
                        "description": "PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.",
                        "type": "string"
                      },
                      "publicKey": {
                        "description": "PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.",
                        "type": "string"
                      },
                      "referrerPolicy": {
                        "description": "ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.",
                        "type": "string"
                      },
                      "sslForceHost": {
                        "description": "Deprecated: use RedirectRegex instead.",
                        "type": "boolean"
                      },
                      "sslHost": {
                        "description": "Deprecated: use RedirectRegex instead.",
                        "type": "string"
                      },
                      "sslProxyHeaders": {
                        "description": "SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: \"X-Forwarded-Proto\": \"https\").",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "sslRedirect": {
                        "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                        "type": "boolean"
                      },
                      "sslTemporaryRedirect": {
                        "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                        "type": "boolean"
                      },
                      "stsIncludeSubdomains": {
                        "description": "STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.",
                        "type": "boolean"
                      },
                      "stsPreload": {
                        "description": "STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.",
                        "type": "boolean"
                      },
                      "stsSeconds": {
                        "description": "STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.",
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  "inFlightReq": {
                    "description": "InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/",
                    "type": "object",
                    "properties": {
                      "amount": {
                        "description": "Amount defines the maximum amount of allowed simultaneous in-flight request. The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).",
                        "type": "integer",
                        "format": "int64"
                      },
                      "sourceCriterion": {
                        "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/#sourcecriterion",
                        "type": "object",
                        "properties": {
                          "ipStrategy": {
                            "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy",
                            "type": "object",
                            "properties": {
                              "depth": {
                                "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                "type": "integer"
                              },
                              "excludedIPs": {
                                "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "requestHeaderName": {
                            "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                            "type": "string"
                          },
                          "requestHost": {
                            "description": "RequestHost defines whether to consider the request Host as the source.",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "ipWhiteList": {
                    "description": "IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/",
                    "type": "object",
                    "properties": {
                      "ipStrategy": {
                        "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy",
                        "type": "object",
                        "properties": {
                          "depth": {
                            "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                            "type": "integer"
                          },
                          "excludedIPs": {
                            "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "sourceRange": {
                        "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "passTLSClientCert": {
                    "description": "PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/passtlsclientcert/",
                    "type": "object",
                    "properties": {
                      "info": {
                        "description": "Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                        "type": "object",
                        "properties": {
                          "issuer": {
                            "description": "Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                            "type": "object",
                            "properties": {
                              "commonName": {
                                "description": "CommonName defines whether to add the organizationalUnit information into the issuer.",
                                "type": "boolean"
                              },
                              "country": {
                                "description": "Country defines whether to add the country information into the issuer.",
                                "type": "boolean"
                              },
                              "domainComponent": {
                                "description": "DomainComponent defines whether to add the domainComponent information into the issuer.",
                                "type": "boolean"
                              },
                              "locality": {
                                "description": "Locality defines whether to add the locality information into the issuer.",
                                "type": "boolean"
                              },
                              "organization": {
                                "description": "Organization defines whether to add the organization information into the issuer.",
                                "type": "boolean"
                              },
                              "province": {
                                "description": "Province defines whether to add the province information into the issuer.",
                                "type": "boolean"
                              },
                              "serialNumber": {
                                "description": "SerialNumber defines whether to add the serialNumber information into the issuer.",
                                "type": "boolean"
                              }
                            }
                          },
                          "notAfter": {
                            "description": "NotAfter defines whether to add the Not After information from the Validity part.",
                            "type": "boolean"
                          },
                          "notBefore": {
                            "description": "NotBefore defines whether to add the Not Before information from the Validity part.",
                            "type": "boolean"
                          },
                          "sans": {
                            "description": "Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.",
                            "type": "boolean"
                          },
                          "serialNumber": {
                            "description": "SerialNumber defines whether to add the client serialNumber information.",
                            "type": "boolean"
                          },
                          "subject": {
                            "description": "Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                            "type": "object",
                            "properties": {
                              "commonName": {
                                "description": "CommonName defines whether to add the organizationalUnit information into the subject.",
                                "type": "boolean"
                              },
                              "country": {
                                "description": "Country defines whether to add the country information into the subject.",
                                "type": "boolean"
                              },
                              "domainComponent": {
                                "description": "DomainComponent defines whether to add the domainComponent information into the subject.",
                                "type": "boolean"
                              },
                              "locality": {
                                "description": "Locality defines whether to add the locality information into the subject.",
                                "type": "boolean"
                              },
                              "organization": {
                                "description": "Organization defines whether to add the organization information into the subject.",
                                "type": "boolean"
                              },
                              "organizationalUnit": {
                                "description": "OrganizationalUnit defines whether to add the organizationalUnit information into the subject.",
                                "type": "boolean"
                              },
                              "province": {
                                "description": "Province defines whether to add the province information into the subject.",
                                "type": "boolean"
                              },
                              "serialNumber": {
                                "description": "SerialNumber defines whether to add the serialNumber information into the subject.",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "pem": {
                        "description": "PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.",
                        "type": "boolean"
                      }
                    }
                  },
                  "plugin": {
                    "description": "Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/",
                    "type": "object",
                    "additionalProperties": {
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  },
                  "rateLimit": {
                    "description": "RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ratelimit/",
                    "type": "object",
                    "properties": {
                      "average": {
                        "description": "Average is the maximum rate, by default in requests/s, allowed for the given source. It defaults to 0, which means no rate limiting. The rate is actually defined by dividing Average by Period. So for a rate below 1req/s, one needs to define a Period larger than a second.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "burst": {
                        "description": "Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time. It defaults to 1.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "period": {
                        "description": "Period, in combination with Average, defines the actual maximum rate, such as: r = Average / Period. It defaults to a second.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "sourceCriterion": {
                        "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).",
                        "type": "object",
                        "properties": {
                          "ipStrategy": {
                            "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy",
                            "type": "object",
                            "properties": {
                              "depth": {
                                "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                "type": "integer"
                              },
                              "excludedIPs": {
                                "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "requestHeaderName": {
                            "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                            "type": "string"
                          },
                          "requestHost": {
                            "description": "RequestHost defines whether to consider the request Host as the source.",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "redirectRegex": {
                    "description": "RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectregex/#regex",
                    "type": "object",
                    "properties": {
                      "permanent": {
                        "description": "Permanent defines whether the redirection is permanent (301).",
                        "type": "boolean"
                      },
                      "regex": {
                        "description": "Regex defines the regex used to match and capture elements from the request URL.",
                        "type": "string"
                      },
                      "replacement": {
                        "description": "Replacement defines how to modify the URL to have the new target URL.",
                        "type": "string"
                      }
                    }
                  },
                  "redirectScheme": {
                    "description": "RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectscheme/",
                    "type": "object",
                    "properties": {
                      "permanent": {
                        "description": "Permanent defines whether the redirection is permanent (301).",
                        "type": "boolean"
                      },
                      "port": {
                        "description": "Port defines the port of the new URL.",
                        "type": "string"
                      },
                      "scheme": {
                        "description": "Scheme defines the scheme of the new URL.",
                        "type": "string"
                      }
                    }
                  },
                  "replacePath": {
                    "description": "ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepath/",
                    "type": "object",
                    "properties": {
                      "path": {
                        "description": "Path defines the path to use as replacement in the request URL.",
                        "type": "string"
                      }
                    }
                  },
                  "replacePathRegex": {
                    "description": "ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepathregex/",
                    "type": "object",
                    "properties": {
                      "regex": {
                        "description": "Regex defines the regular expression used to match and capture the path from the request URL.",
                        "type": "string"
                      },
                      "replacement": {
                        "description": "Replacement defines the replacement path format, which can include captured variables.",
                        "type": "string"
                      }
                    }
                  },
                  "retry": {
                    "description": "Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/retry/",
                    "type": "object",
                    "properties": {
                      "attempts": {
                        "description": "Attempts defines how many times the request should be retried.",
                        "type": "integer"
                      },
                      "initialInterval": {
                        "description": "InitialInterval defines the first wait time in the exponential backoff series. The maximum interval is calculated as twice the initialInterval. If unspecified, requests will be retried immediately. The value of initialInterval should be provided in seconds or as a valid duration format, see https://pkg.go.dev/time#ParseDuration.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  },
                  "stripPrefix": {
                    "description": "StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefix/",
                    "type": "object",
                    "properties": {
                      "forceSlash": {
                        "description": "ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary. Default: true.",
                        "type": "boolean"
                      },
                      "prefixes": {
                        "description": "Prefixes defines the prefixes to strip from the request URL.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "stripPrefixRegex": {
                    "description": "StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefixregex/",
                    "type": "object",
                    "properties": {
                      "regex": {
                        "description": "Regex defines the regular expression to match the path prefix from the request URL.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "Middleware is the CRD implementation of a Traefik Middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/overview/",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "Middleware",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "middlewares.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "middlewares",
                "singular": "middleware",
                "kind": "Middleware",
                "listKind": "MiddlewareList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "Middleware is the CRD implementation of a Traefik Middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/overview/",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "MiddlewareSpec defines the desired state of a Middleware.",
                          "type": "object",
                          "properties": {
                            "addPrefix": {
                              "description": "AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/addprefix/",
                              "type": "object",
                              "properties": {
                                "prefix": {
                                  "description": "Prefix is the string to add before the current path in the requested URL. It should include a leading slash (/).",
                                  "type": "string"
                                }
                              }
                            },
                            "basicAuth": {
                              "description": "BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/",
                              "type": "object",
                              "properties": {
                                "headerField": {
                                  "description": "HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/#headerfield",
                                  "type": "string"
                                },
                                "realm": {
                                  "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.",
                                  "type": "string"
                                },
                                "removeHeader": {
                                  "description": "RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service. Default: false.",
                                  "type": "boolean"
                                },
                                "secret": {
                                  "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                                  "type": "string"
                                }
                              }
                            },
                            "buffering": {
                              "description": "Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#maxrequestbodybytes",
                              "type": "object",
                              "properties": {
                                "maxRequestBodyBytes": {
                                  "description": "MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "maxResponseBodyBytes": {
                                  "description": "MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "memRequestBodyBytes": {
                                  "description": "MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "memResponseBodyBytes": {
                                  "description": "MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "retryExpression": {
                                  "description": "RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#retryexpression",
                                  "type": "string"
                                }
                              }
                            },
                            "chain": {
                              "description": "Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/chain/",
                              "type": "object",
                              "properties": {
                                "middlewares": {
                                  "description": "Middlewares is the list of MiddlewareRef which composes the chain.",
                                  "type": "array",
                                  "items": {
                                    "description": "MiddlewareRef is a reference to a Middleware resource.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "name": {
                                        "description": "Name defines the name of the referenced Middleware resource.",
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "description": "Namespace defines the namespace of the referenced Middleware resource.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "circuitBreaker": {
                              "description": "CircuitBreaker holds the circuit breaker configuration.",
                              "type": "object",
                              "properties": {
                                "checkPeriod": {
                                  "description": "CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "expression": {
                                  "description": "Expression is the condition that triggers the tripped state.",
                                  "type": "string"
                                },
                                "fallbackDuration": {
                                  "description": "FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "recoveryDuration": {
                                  "description": "RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "compress": {
                              "description": "Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/compress/",
                              "type": "object",
                              "properties": {
                                "excludedContentTypes": {
                                  "description": "ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "minResponseBodyBytes": {
                                  "description": "MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed. Default: 1024.",
                                  "type": "integer"
                                }
                              }
                            },
                            "contentType": {
                              "description": "ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                              "type": "object",
                              "properties": {
                                "autoDetect": {
                                  "description": "AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "digestAuth": {
                              "description": "DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/digestauth/",
                              "type": "object",
                              "properties": {
                                "headerField": {
                                  "description": "HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/#headerfield",
                                  "type": "string"
                                },
                                "realm": {
                                  "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.",
                                  "type": "string"
                                },
                                "removeHeader": {
                                  "description": "RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.",
                                  "type": "boolean"
                                },
                                "secret": {
                                  "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                                  "type": "string"
                                }
                              }
                            },
                            "errors": {
                              "description": "ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/",
                              "type": "object",
                              "properties": {
                                "query": {
                                  "description": "Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.",
                                  "type": "string"
                                },
                                "service": {
                                  "description": "Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/#service",
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "kind": {
                                      "description": "Kind defines the kind of the Service.",
                                      "type": "string",
                                      "enum": [
                                        "Service",
                                        "TraefikService"
                                      ]
                                    },
                                    "name": {
                                      "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                                      "type": "string"
                                    },
                                    "namespace": {
                                      "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                      "type": "string"
                                    },
                                    "nativeLB": {
                                      "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                      "type": "boolean"
                                    },
                                    "passHostHeader": {
                                      "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                                      "type": "boolean"
                                    },
                                    "port": {
                                      "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                      "anyOf": [
                                        {
                                          "type": "integer"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "x-kubernetes-int-or-string": true
                                    },
                                    "responseForwarding": {
                                      "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                      "type": "object",
                                      "properties": {
                                        "flushInterval": {
                                          "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "scheme": {
                                      "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                                      "type": "string"
                                    },
                                    "serversTransport": {
                                      "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                                      "type": "string"
                                    },
                                    "sticky": {
                                      "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                                      "type": "object",
                                      "properties": {
                                        "cookie": {
                                          "description": "Cookie defines the sticky cookie configuration.",
                                          "type": "object",
                                          "properties": {
                                            "httpOnly": {
                                              "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                              "type": "boolean"
                                            },
                                            "name": {
                                              "description": "Name defines the Cookie name.",
                                              "type": "string"
                                            },
                                            "sameSite": {
                                              "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                              "type": "string"
                                            },
                                            "secure": {
                                              "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "strategy": {
                                      "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                                      "type": "string"
                                    },
                                    "weight": {
                                      "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                      "type": "integer"
                                    }
                                  }
                                },
                                "status": {
                                  "description": "Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "forwardAuth": {
                              "description": "ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/",
                              "type": "object",
                              "properties": {
                                "address": {
                                  "description": "Address defines the authentication server address.",
                                  "type": "string"
                                },
                                "authRequestHeaders": {
                                  "description": "AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "authResponseHeaders": {
                                  "description": "AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "authResponseHeadersRegex": {
                                  "description": "AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/#authresponseheadersregex",
                                  "type": "string"
                                },
                                "tls": {
                                  "description": "TLS defines the configuration used to secure the connection to the authentication server.",
                                  "type": "object",
                                  "properties": {
                                    "caOptional": {
                                      "type": "boolean"
                                    },
                                    "caSecret": {
                                      "description": "CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.",
                                      "type": "string"
                                    },
                                    "certSecret": {
                                      "description": "CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.",
                                      "type": "string"
                                    },
                                    "insecureSkipVerify": {
                                      "description": "InsecureSkipVerify defines whether the server certificates should be validated.",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "trustForwardHeader": {
                                  "description": "TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "headers": {
                              "description": "Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/headers/#customrequestheaders",
                              "type": "object",
                              "properties": {
                                "accessControlAllowCredentials": {
                                  "description": "AccessControlAllowCredentials defines whether the request can include user credentials.",
                                  "type": "boolean"
                                },
                                "accessControlAllowHeaders": {
                                  "description": "AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlAllowMethods": {
                                  "description": "AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlAllowOriginList": {
                                  "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlAllowOriginListRegex": {
                                  "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlExposeHeaders": {
                                  "description": "AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "accessControlMaxAge": {
                                  "description": "AccessControlMaxAge defines the time that a preflight request may be cached.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "addVaryHeader": {
                                  "description": "AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                                  "type": "boolean"
                                },
                                "allowedHosts": {
                                  "description": "AllowedHosts defines the fully qualified list of allowed domain names.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "browserXssFilter": {
                                  "description": "BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.",
                                  "type": "boolean"
                                },
                                "contentSecurityPolicy": {
                                  "description": "ContentSecurityPolicy defines the Content-Security-Policy header value.",
                                  "type": "string"
                                },
                                "contentTypeNosniff": {
                                  "description": "ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.",
                                  "type": "boolean"
                                },
                                "customBrowserXSSValue": {
                                  "description": "CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.",
                                  "type": "string"
                                },
                                "customFrameOptionsValue": {
                                  "description": "CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.",
                                  "type": "string"
                                },
                                "customRequestHeaders": {
                                  "description": "CustomRequestHeaders defines the header names and values to apply to the request.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "customResponseHeaders": {
                                  "description": "CustomResponseHeaders defines the header names and values to apply to the response.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "featurePolicy": {
                                  "description": "Deprecated: use PermissionsPolicy instead.",
                                  "type": "string"
                                },
                                "forceSTSHeader": {
                                  "description": "ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.",
                                  "type": "boolean"
                                },
                                "frameDeny": {
                                  "description": "FrameDeny defines whether to add the X-Frame-Options header with the DENY value.",
                                  "type": "boolean"
                                },
                                "hostsProxyHeaders": {
                                  "description": "HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "isDevelopment": {
                                  "description": "IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.",
                                  "type": "boolean"
                                },
                                "permissionsPolicy": {
                                  "description": "PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.",
                                  "type": "string"
                                },
                                "publicKey": {
                                  "description": "PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.",
                                  "type": "string"
                                },
                                "referrerPolicy": {
                                  "description": "ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.",
                                  "type": "string"
                                },
                                "sslForceHost": {
                                  "description": "Deprecated: use RedirectRegex instead.",
                                  "type": "boolean"
                                },
                                "sslHost": {
                                  "description": "Deprecated: use RedirectRegex instead.",
                                  "type": "string"
                                },
                                "sslProxyHeaders": {
                                  "description": "SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: \"X-Forwarded-Proto\": \"https\").",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "sslRedirect": {
                                  "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                                  "type": "boolean"
                                },
                                "sslTemporaryRedirect": {
                                  "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                                  "type": "boolean"
                                },
                                "stsIncludeSubdomains": {
                                  "description": "STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.",
                                  "type": "boolean"
                                },
                                "stsPreload": {
                                  "description": "STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.",
                                  "type": "boolean"
                                },
                                "stsSeconds": {
                                  "description": "STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            },
                            "inFlightReq": {
                              "description": "InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/",
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "description": "Amount defines the maximum amount of allowed simultaneous in-flight request. The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "sourceCriterion": {
                                  "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/#sourcecriterion",
                                  "type": "object",
                                  "properties": {
                                    "ipStrategy": {
                                      "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy",
                                      "type": "object",
                                      "properties": {
                                        "depth": {
                                          "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                          "type": "integer"
                                        },
                                        "excludedIPs": {
                                          "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "requestHeaderName": {
                                      "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                                      "type": "string"
                                    },
                                    "requestHost": {
                                      "description": "RequestHost defines whether to consider the request Host as the source.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "ipWhiteList": {
                              "description": "IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/",
                              "type": "object",
                              "properties": {
                                "ipStrategy": {
                                  "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy",
                                  "type": "object",
                                  "properties": {
                                    "depth": {
                                      "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                      "type": "integer"
                                    },
                                    "excludedIPs": {
                                      "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "sourceRange": {
                                  "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "passTLSClientCert": {
                              "description": "PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/passtlsclientcert/",
                              "type": "object",
                              "properties": {
                                "info": {
                                  "description": "Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                                  "type": "object",
                                  "properties": {
                                    "issuer": {
                                      "description": "Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                                      "type": "object",
                                      "properties": {
                                        "commonName": {
                                          "description": "CommonName defines whether to add the organizationalUnit information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "country": {
                                          "description": "Country defines whether to add the country information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "domainComponent": {
                                          "description": "DomainComponent defines whether to add the domainComponent information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "locality": {
                                          "description": "Locality defines whether to add the locality information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "organization": {
                                          "description": "Organization defines whether to add the organization information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "province": {
                                          "description": "Province defines whether to add the province information into the issuer.",
                                          "type": "boolean"
                                        },
                                        "serialNumber": {
                                          "description": "SerialNumber defines whether to add the serialNumber information into the issuer.",
                                          "type": "boolean"
                                        }
                                      }
                                    },
                                    "notAfter": {
                                      "description": "NotAfter defines whether to add the Not After information from the Validity part.",
                                      "type": "boolean"
                                    },
                                    "notBefore": {
                                      "description": "NotBefore defines whether to add the Not Before information from the Validity part.",
                                      "type": "boolean"
                                    },
                                    "sans": {
                                      "description": "Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.",
                                      "type": "boolean"
                                    },
                                    "serialNumber": {
                                      "description": "SerialNumber defines whether to add the client serialNumber information.",
                                      "type": "boolean"
                                    },
                                    "subject": {
                                      "description": "Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                                      "type": "object",
                                      "properties": {
                                        "commonName": {
                                          "description": "CommonName defines whether to add the organizationalUnit information into the subject.",
                                          "type": "boolean"
                                        },
                                        "country": {
                                          "description": "Country defines whether to add the country information into the subject.",
                                          "type": "boolean"
                                        },
                                        "domainComponent": {
                                          "description": "DomainComponent defines whether to add the domainComponent information into the subject.",
                                          "type": "boolean"
                                        },
                                        "locality": {
                                          "description": "Locality defines whether to add the locality information into the subject.",
                                          "type": "boolean"
                                        },
                                        "organization": {
                                          "description": "Organization defines whether to add the organization information into the subject.",
                                          "type": "boolean"
                                        },
                                        "organizationalUnit": {
                                          "description": "OrganizationalUnit defines whether to add the organizationalUnit information into the subject.",
                                          "type": "boolean"
                                        },
                                        "province": {
                                          "description": "Province defines whether to add the province information into the subject.",
                                          "type": "boolean"
                                        },
                                        "serialNumber": {
                                          "description": "SerialNumber defines whether to add the serialNumber information into the subject.",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                },
                                "pem": {
                                  "description": "PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "plugin": {
                              "description": "Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/",
                              "type": "object",
                              "additionalProperties": {
                                "x-kubernetes-preserve-unknown-fields": true
                              }
                            },
                            "rateLimit": {
                              "description": "RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ratelimit/",
                              "type": "object",
                              "properties": {
                                "average": {
                                  "description": "Average is the maximum rate, by default in requests/s, allowed for the given source. It defaults to 0, which means no rate limiting. The rate is actually defined by dividing Average by Period. So for a rate below 1req/s, one needs to define a Period larger than a second.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "burst": {
                                  "description": "Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time. It defaults to 1.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "period": {
                                  "description": "Period, in combination with Average, defines the actual maximum rate, such as: r = Average / Period. It defaults to a second.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "sourceCriterion": {
                                  "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).",
                                  "type": "object",
                                  "properties": {
                                    "ipStrategy": {
                                      "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy",
                                      "type": "object",
                                      "properties": {
                                        "depth": {
                                          "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                          "type": "integer"
                                        },
                                        "excludedIPs": {
                                          "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "requestHeaderName": {
                                      "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                                      "type": "string"
                                    },
                                    "requestHost": {
                                      "description": "RequestHost defines whether to consider the request Host as the source.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "redirectRegex": {
                              "description": "RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectregex/#regex",
                              "type": "object",
                              "properties": {
                                "permanent": {
                                  "description": "Permanent defines whether the redirection is permanent (301).",
                                  "type": "boolean"
                                },
                                "regex": {
                                  "description": "Regex defines the regex used to match and capture elements from the request URL.",
                                  "type": "string"
                                },
                                "replacement": {
                                  "description": "Replacement defines how to modify the URL to have the new target URL.",
                                  "type": "string"
                                }
                              }
                            },
                            "redirectScheme": {
                              "description": "RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectscheme/",
                              "type": "object",
                              "properties": {
                                "permanent": {
                                  "description": "Permanent defines whether the redirection is permanent (301).",
                                  "type": "boolean"
                                },
                                "port": {
                                  "description": "Port defines the port of the new URL.",
                                  "type": "string"
                                },
                                "scheme": {
                                  "description": "Scheme defines the scheme of the new URL.",
                                  "type": "string"
                                }
                              }
                            },
                            "replacePath": {
                              "description": "ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepath/",
                              "type": "object",
                              "properties": {
                                "path": {
                                  "description": "Path defines the path to use as replacement in the request URL.",
                                  "type": "string"
                                }
                              }
                            },
                            "replacePathRegex": {
                              "description": "ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepathregex/",
                              "type": "object",
                              "properties": {
                                "regex": {
                                  "description": "Regex defines the regular expression used to match and capture the path from the request URL.",
                                  "type": "string"
                                },
                                "replacement": {
                                  "description": "Replacement defines the replacement path format, which can include captured variables.",
                                  "type": "string"
                                }
                              }
                            },
                            "retry": {
                              "description": "Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/retry/",
                              "type": "object",
                              "properties": {
                                "attempts": {
                                  "description": "Attempts defines how many times the request should be retried.",
                                  "type": "integer"
                                },
                                "initialInterval": {
                                  "description": "InitialInterval defines the first wait time in the exponential backoff series. The maximum interval is calculated as twice the initialInterval. If unspecified, requests will be retried immediately. The value of initialInterval should be provided in seconds or as a valid duration format, see https://pkg.go.dev/time#ParseDuration.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "stripPrefix": {
                              "description": "StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefix/",
                              "type": "object",
                              "properties": {
                                "forceSlash": {
                                  "description": "ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary. Default: true.",
                                  "type": "boolean"
                                },
                                "prefixes": {
                                  "description": "Prefixes defines the prefixes to strip from the request URL.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "stripPrefixRegex": {
                              "description": "StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefixregex/",
                              "type": "object",
                              "properties": {
                                "regex": {
                                  "description": "Regex defines the regular expression to match the path prefix from the request URL.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "middlewares",
                "singular": "middleware",
                "kind": "Middleware",
                "listKind": "MiddlewareList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "Middleware",
          "apiGroup": "traefik.containo.us",
          "apiKind": "Middleware",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.Middleware",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "MiddlewareSpec defines the desired state of a Middleware.",
            "properties": {
              "addPrefix": {
                "description": "AddPrefix holds the add prefix middleware configuration.\nThis middleware updates the path of a request before forwarding it.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/",
                "type": "object",
                "properties": {
                  "prefix": {
                    "description": "Prefix is the string to add before the current path in the requested URL.\nIt should include a leading slash (/).",
                    "type": "string"
                  }
                }
              },
              "basicAuth": {
                "description": "BasicAuth holds the basic auth middleware configuration.\nThis middleware restricts access to your services to known users.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/",
                "type": "object",
                "properties": {
                  "headerField": {
                    "description": "HeaderField defines a header field to store the authenticated user.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield",
                    "type": "string"
                  },
                  "realm": {
                    "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.\nDefault: traefik.",
                    "type": "string"
                  },
                  "removeHeader": {
                    "description": "RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.\nDefault: false.",
                    "type": "boolean"
                  },
                  "secret": {
                    "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                    "type": "string"
                  }
                }
              },
              "buffering": {
                "description": "Buffering holds the buffering middleware configuration.\nThis middleware retries or limits the size of requests that can be forwarded to backends.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes",
                "type": "object",
                "properties": {
                  "maxRequestBodyBytes": {
                    "description": "MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).\nIf the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.\nDefault: 0 (no maximum).",
                    "type": "integer",
                    "format": "int64"
                  },
                  "maxResponseBodyBytes": {
                    "description": "MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).\nIf the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.\nDefault: 0 (no maximum).",
                    "type": "integer",
                    "format": "int64"
                  },
                  "memRequestBodyBytes": {
                    "description": "MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.\nDefault: 1048576 (1Mi).",
                    "type": "integer",
                    "format": "int64"
                  },
                  "memResponseBodyBytes": {
                    "description": "MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.\nDefault: 1048576 (1Mi).",
                    "type": "integer",
                    "format": "int64"
                  },
                  "retryExpression": {
                    "description": "RetryExpression defines the retry conditions.\nIt is a logical combination of functions with operators AND (&&) and OR (||).\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#retryexpression",
                    "type": "string"
                  }
                }
              },
              "chain": {
                "description": "Chain holds the configuration of the chain middleware.\nThis middleware enables to define reusable combinations of other pieces of middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/",
                "type": "object",
                "properties": {
                  "middlewares": {
                    "description": "Middlewares is the list of MiddlewareRef which composes the chain.",
                    "type": "array",
                    "items": {
                      "description": "MiddlewareRef is a reference to a Middleware resource.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "description": "Name defines the name of the referenced Middleware resource.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace defines the namespace of the referenced Middleware resource.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "circuitBreaker": {
                "description": "CircuitBreaker holds the circuit breaker configuration.",
                "type": "object",
                "properties": {
                  "checkPeriod": {
                    "description": "CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "expression": {
                    "description": "Expression is the condition that triggers the tripped state.",
                    "type": "string"
                  },
                  "fallbackDuration": {
                    "description": "FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "recoveryDuration": {
                    "description": "RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              "compress": {
                "description": "Compress holds the compress middleware configuration.\nThis middleware compresses responses before sending them to the client, using gzip compression.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/",
                "type": "object",
                "properties": {
                  "excludedContentTypes": {
                    "description": "ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.\n`application/grpc` is always excluded.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "includedContentTypes": {
                    "description": "IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "minResponseBodyBytes": {
                    "description": "MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.\nDefault: 1024.",
                    "type": "integer"
                  }
                }
              },
              "contentType": {
                "description": "ContentType holds the content-type middleware configuration.\nThis middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                "type": "object",
                "properties": {
                  "autoDetect": {
                    "description": "AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,\nbe automatically set to a value derived from the contents of the response.\nDeprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.",
                    "type": "boolean"
                  }
                }
              },
              "digestAuth": {
                "description": "DigestAuth holds the digest auth middleware configuration.\nThis middleware restricts access to your services to known users.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/",
                "type": "object",
                "properties": {
                  "headerField": {
                    "description": "HeaderField defines a header field to store the authenticated user.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield",
                    "type": "string"
                  },
                  "realm": {
                    "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.\nDefault: traefik.",
                    "type": "string"
                  },
                  "removeHeader": {
                    "description": "RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.",
                    "type": "boolean"
                  },
                  "secret": {
                    "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                    "type": "string"
                  }
                }
              },
              "errors": {
                "description": "ErrorPage holds the custom error middleware configuration.\nThis middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/",
                "type": "object",
                "properties": {
                  "query": {
                    "description": "Query defines the URL for the error page (hosted by service).\nThe {status} variable can be used in order to insert the status code in the URL.",
                    "type": "string"
                  },
                  "service": {
                    "description": "Service defines the reference to a Kubernetes Service that will serve the error page.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "kind": {
                        "description": "Kind defines the kind of the Service.",
                        "type": "string",
                        "enum": [
                          "Service",
                          "TraefikService"
                        ]
                      },
                      "name": {
                        "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                        "type": "string"
                      },
                      "nativeLB": {
                        "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                        "type": "boolean"
                      },
                      "passHostHeader": {
                        "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                        "type": "boolean"
                      },
                      "port": {
                        "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "responseForwarding": {
                        "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                        "type": "object",
                        "properties": {
                          "flushInterval": {
                            "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                            "type": "string"
                          }
                        }
                      },
                      "scheme": {
                        "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                        "type": "string"
                      },
                      "serversTransport": {
                        "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                        "type": "string"
                      },
                      "sticky": {
                        "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                        "type": "object",
                        "properties": {
                          "cookie": {
                            "description": "Cookie defines the sticky cookie configuration.",
                            "type": "object",
                            "properties": {
                              "httpOnly": {
                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                "type": "boolean"
                              },
                              "maxAge": {
                                "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name defines the Cookie name.",
                                "type": "string"
                              },
                              "sameSite": {
                                "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                "type": "string"
                              },
                              "secure": {
                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "strategy": {
                        "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                        "type": "string"
                      },
                      "weight": {
                        "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                        "type": "integer"
                      }
                    }
                  },
                  "status": {
                    "description": "Status defines which status or range of statuses should result in an error page.\nIt can be either a status code as a number (500),\nas multiple comma-separated numbers (500,502),\nas ranges by separating two codes with a dash (500-599),\nor a combination of the two (404,418,500-599).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "forwardAuth": {
                "description": "ForwardAuth holds the forward auth middleware configuration.\nThis middleware delegates the request authentication to a Service.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/",
                "type": "object",
                "properties": {
                  "addAuthCookiesToResponse": {
                    "description": "AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "address": {
                    "description": "Address defines the authentication server address.",
                    "type": "string"
                  },
                  "authRequestHeaders": {
                    "description": "AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.\nIf not set or empty then all request headers are passed.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "authResponseHeaders": {
                    "description": "AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "authResponseHeadersRegex": {
                    "description": "AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/#authresponseheadersregex",
                    "type": "string"
                  },
                  "tls": {
                    "description": "TLS defines the configuration used to secure the connection to the authentication server.",
                    "type": "object",
                    "properties": {
                      "caOptional": {
                        "description": "Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).",
                        "type": "boolean"
                      },
                      "caSecret": {
                        "description": "CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.\nThe CA certificate is extracted from key `tls.ca` or `ca.crt`.",
                        "type": "string"
                      },
                      "certSecret": {
                        "description": "CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.\nThe client certificate is extracted from the keys `tls.crt` and `tls.key`.",
                        "type": "string"
                      },
                      "insecureSkipVerify": {
                        "description": "InsecureSkipVerify defines whether the server certificates should be validated.",
                        "type": "boolean"
                      }
                    }
                  },
                  "trustForwardHeader": {
                    "description": "TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.",
                    "type": "boolean"
                  }
                }
              },
              "grpcWeb": {
                "description": "GrpcWeb holds the gRPC web middleware configuration.\nThis middleware converts a gRPC web request to an HTTP/2 gRPC request.",
                "type": "object",
                "properties": {
                  "allowOrigins": {
                    "description": "AllowOrigins is a list of allowable origins.\nCan also be a wildcard origin \"*\".",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "headers": {
                "description": "Headers holds the headers middleware configuration.\nThis middleware manages the requests and responses headers.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders",
                "type": "object",
                "properties": {
                  "accessControlAllowCredentials": {
                    "description": "AccessControlAllowCredentials defines whether the request can include user credentials.",
                    "type": "boolean"
                  },
                  "accessControlAllowHeaders": {
                    "description": "AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "accessControlAllowMethods": {
                    "description": "AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "accessControlAllowOriginList": {
                    "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "accessControlAllowOriginListRegex": {
                    "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "accessControlExposeHeaders": {
                    "description": "AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "accessControlMaxAge": {
                    "description": "AccessControlMaxAge defines the time that a preflight request may be cached.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "addVaryHeader": {
                    "description": "AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                    "type": "boolean"
                  },
                  "allowedHosts": {
                    "description": "AllowedHosts defines the fully qualified list of allowed domain names.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "browserXssFilter": {
                    "description": "BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.",
                    "type": "boolean"
                  },
                  "contentSecurityPolicy": {
                    "description": "ContentSecurityPolicy defines the Content-Security-Policy header value.",
                    "type": "string"
                  },
                  "contentTypeNosniff": {
                    "description": "ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.",
                    "type": "boolean"
                  },
                  "customBrowserXSSValue": {
                    "description": "CustomBrowserXSSValue defines the X-XSS-Protection header value.\nThis overrides the BrowserXssFilter option.",
                    "type": "string"
                  },
                  "customFrameOptionsValue": {
                    "description": "CustomFrameOptionsValue defines the X-Frame-Options header value.\nThis overrides the FrameDeny option.",
                    "type": "string"
                  },
                  "customRequestHeaders": {
                    "description": "CustomRequestHeaders defines the header names and values to apply to the request.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "customResponseHeaders": {
                    "description": "CustomResponseHeaders defines the header names and values to apply to the response.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "featurePolicy": {
                    "description": "Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.",
                    "type": "string"
                  },
                  "forceSTSHeader": {
                    "description": "ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.",
                    "type": "boolean"
                  },
                  "frameDeny": {
                    "description": "FrameDeny defines whether to add the X-Frame-Options header with the DENY value.",
                    "type": "boolean"
                  },
                  "hostsProxyHeaders": {
                    "description": "HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "isDevelopment": {
                    "description": "IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.\nUsually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.\nIf you would like your development environment to mimic production with complete Host blocking, SSL redirects,\nand STS headers, leave this as false.",
                    "type": "boolean"
                  },
                  "permissionsPolicy": {
                    "description": "PermissionsPolicy defines the Permissions-Policy header value.\nThis allows sites to control browser features.",
                    "type": "string"
                  },
                  "publicKey": {
                    "description": "PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.",
                    "type": "string"
                  },
                  "referrerPolicy": {
                    "description": "ReferrerPolicy defines the Referrer-Policy header value.\nThis allows sites to control whether browsers forward the Referer header to other sites.",
                    "type": "string"
                  },
                  "sslForceHost": {
                    "description": "Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.",
                    "type": "boolean"
                  },
                  "sslHost": {
                    "description": "Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.",
                    "type": "string"
                  },
                  "sslProxyHeaders": {
                    "description": "SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.\nIt can be useful when using other proxies (example: \"X-Forwarded-Proto\": \"https\").",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "sslRedirect": {
                    "description": "Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.",
                    "type": "boolean"
                  },
                  "sslTemporaryRedirect": {
                    "description": "Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.",
                    "type": "boolean"
                  },
                  "stsIncludeSubdomains": {
                    "description": "STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.",
                    "type": "boolean"
                  },
                  "stsPreload": {
                    "description": "STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.",
                    "type": "boolean"
                  },
                  "stsSeconds": {
                    "description": "STSSeconds defines the max-age of the Strict-Transport-Security header.\nIf set to 0, the header is not set.",
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "inFlightReq": {
                "description": "InFlightReq holds the in-flight request middleware configuration.\nThis middleware limits the number of requests being processed and served concurrently.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/",
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "Amount defines the maximum amount of allowed simultaneous in-flight request.\nThe middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).",
                    "type": "integer",
                    "format": "int64"
                  },
                  "sourceCriterion": {
                    "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source.\nIf several strategies are defined at the same time, an error will be raised.\nIf none are set, the default is to use the requestHost.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion",
                    "type": "object",
                    "properties": {
                      "ipStrategy": {
                        "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                        "type": "object",
                        "properties": {
                          "depth": {
                            "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                            "type": "integer"
                          },
                          "excludedIPs": {
                            "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "requestHeaderName": {
                        "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                        "type": "string"
                      },
                      "requestHost": {
                        "description": "RequestHost defines whether to consider the request Host as the source.",
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "ipAllowList": {
                "description": "IPAllowList holds the IP allowlist middleware configuration.\nThis middleware accepts / refuses requests based on the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/",
                "type": "object",
                "properties": {
                  "ipStrategy": {
                    "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                    "type": "object",
                    "properties": {
                      "depth": {
                        "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                        "type": "integer"
                      },
                      "excludedIPs": {
                        "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "rejectStatusCode": {
                    "description": "RejectStatusCode defines the HTTP status code used for refused requests.\nIf not set, the default is 403 (Forbidden).",
                    "type": "integer"
                  },
                  "sourceRange": {
                    "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "ipWhiteList": {
                "description": "Deprecated: please use IPAllowList instead.",
                "type": "object",
                "properties": {
                  "ipStrategy": {
                    "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                    "type": "object",
                    "properties": {
                      "depth": {
                        "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                        "type": "integer"
                      },
                      "excludedIPs": {
                        "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "sourceRange": {
                    "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "passTLSClientCert": {
                "description": "PassTLSClientCert holds the pass TLS client cert middleware configuration.\nThis middleware adds the selected data from the passed client TLS certificate to a header.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/",
                "type": "object",
                "properties": {
                  "info": {
                    "description": "Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                    "type": "object",
                    "properties": {
                      "issuer": {
                        "description": "Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                        "type": "object",
                        "properties": {
                          "commonName": {
                            "description": "CommonName defines whether to add the organizationalUnit information into the issuer.",
                            "type": "boolean"
                          },
                          "country": {
                            "description": "Country defines whether to add the country information into the issuer.",
                            "type": "boolean"
                          },
                          "domainComponent": {
                            "description": "DomainComponent defines whether to add the domainComponent information into the issuer.",
                            "type": "boolean"
                          },
                          "locality": {
                            "description": "Locality defines whether to add the locality information into the issuer.",
                            "type": "boolean"
                          },
                          "organization": {
                            "description": "Organization defines whether to add the organization information into the issuer.",
                            "type": "boolean"
                          },
                          "province": {
                            "description": "Province defines whether to add the province information into the issuer.",
                            "type": "boolean"
                          },
                          "serialNumber": {
                            "description": "SerialNumber defines whether to add the serialNumber information into the issuer.",
                            "type": "boolean"
                          }
                        }
                      },
                      "notAfter": {
                        "description": "NotAfter defines whether to add the Not After information from the Validity part.",
                        "type": "boolean"
                      },
                      "notBefore": {
                        "description": "NotBefore defines whether to add the Not Before information from the Validity part.",
                        "type": "boolean"
                      },
                      "sans": {
                        "description": "Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.",
                        "type": "boolean"
                      },
                      "serialNumber": {
                        "description": "SerialNumber defines whether to add the client serialNumber information.",
                        "type": "boolean"
                      },
                      "subject": {
                        "description": "Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                        "type": "object",
                        "properties": {
                          "commonName": {
                            "description": "CommonName defines whether to add the organizationalUnit information into the subject.",
                            "type": "boolean"
                          },
                          "country": {
                            "description": "Country defines whether to add the country information into the subject.",
                            "type": "boolean"
                          },
                          "domainComponent": {
                            "description": "DomainComponent defines whether to add the domainComponent information into the subject.",
                            "type": "boolean"
                          },
                          "locality": {
                            "description": "Locality defines whether to add the locality information into the subject.",
                            "type": "boolean"
                          },
                          "organization": {
                            "description": "Organization defines whether to add the organization information into the subject.",
                            "type": "boolean"
                          },
                          "organizationalUnit": {
                            "description": "OrganizationalUnit defines whether to add the organizationalUnit information into the subject.",
                            "type": "boolean"
                          },
                          "province": {
                            "description": "Province defines whether to add the province information into the subject.",
                            "type": "boolean"
                          },
                          "serialNumber": {
                            "description": "SerialNumber defines whether to add the serialNumber information into the subject.",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "pem": {
                    "description": "PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.",
                    "type": "boolean"
                  }
                }
              },
              "plugin": {
                "description": "Plugin defines the middleware plugin configuration.\nMore info: https://doc.traefik.io/traefik/plugins/",
                "type": "object",
                "additionalProperties": {
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "rateLimit": {
                "description": "RateLimit holds the rate limit configuration.\nThis middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/",
                "type": "object",
                "properties": {
                  "average": {
                    "description": "Average is the maximum rate, by default in requests/s, allowed for the given source.\nIt defaults to 0, which means no rate limiting.\nThe rate is actually defined by dividing Average by Period. So for a rate below 1req/s,\none needs to define a Period larger than a second.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "burst": {
                    "description": "Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.\nIt defaults to 1.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "period": {
                    "description": "Period, in combination with Average, defines the actual maximum rate, such as:\nr = Average / Period. It defaults to a second.",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "sourceCriterion": {
                    "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source.\nIf several strategies are defined at the same time, an error will be raised.\nIf none are set, the default is to use the request's remote address field (as an ipStrategy).",
                    "type": "object",
                    "properties": {
                      "ipStrategy": {
                        "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                        "type": "object",
                        "properties": {
                          "depth": {
                            "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                            "type": "integer"
                          },
                          "excludedIPs": {
                            "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "requestHeaderName": {
                        "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                        "type": "string"
                      },
                      "requestHost": {
                        "description": "RequestHost defines whether to consider the request Host as the source.",
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "redirectRegex": {
                "description": "RedirectRegex holds the redirect regex middleware configuration.\nThis middleware redirects a request using regex matching and replacement.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex",
                "type": "object",
                "properties": {
                  "permanent": {
                    "description": "Permanent defines whether the redirection is permanent (301).",
                    "type": "boolean"
                  },
                  "regex": {
                    "description": "Regex defines the regex used to match and capture elements from the request URL.",
                    "type": "string"
                  },
                  "replacement": {
                    "description": "Replacement defines how to modify the URL to have the new target URL.",
                    "type": "string"
                  }
                }
              },
              "redirectScheme": {
                "description": "RedirectScheme holds the redirect scheme middleware configuration.\nThis middleware redirects requests from a scheme/port to another.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/",
                "type": "object",
                "properties": {
                  "permanent": {
                    "description": "Permanent defines whether the redirection is permanent (301).",
                    "type": "boolean"
                  },
                  "port": {
                    "description": "Port defines the port of the new URL.",
                    "type": "string"
                  },
                  "scheme": {
                    "description": "Scheme defines the scheme of the new URL.",
                    "type": "string"
                  }
                }
              },
              "replacePath": {
                "description": "ReplacePath holds the replace path middleware configuration.\nThis middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/",
                "type": "object",
                "properties": {
                  "path": {
                    "description": "Path defines the path to use as replacement in the request URL.",
                    "type": "string"
                  }
                }
              },
              "replacePathRegex": {
                "description": "ReplacePathRegex holds the replace path regex middleware configuration.\nThis middleware replaces the path of a URL using regex matching and replacement.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/",
                "type": "object",
                "properties": {
                  "regex": {
                    "description": "Regex defines the regular expression used to match and capture the path from the request URL.",
                    "type": "string"
                  },
                  "replacement": {
                    "description": "Replacement defines the replacement path format, which can include captured variables.",
                    "type": "string"
                  }
                }
              },
              "retry": {
                "description": "Retry holds the retry middleware configuration.\nThis middleware reissues requests a given number of times to a backend server if that server does not reply.\nAs soon as the server answers, the middleware stops retrying, regardless of the response status.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/",
                "type": "object",
                "properties": {
                  "attempts": {
                    "description": "Attempts defines how many times the request should be retried.",
                    "type": "integer"
                  },
                  "initialInterval": {
                    "description": "InitialInterval defines the first wait time in the exponential backoff series.\nThe maximum interval is calculated as twice the initialInterval.\nIf unspecified, requests will be retried immediately.\nThe value of initialInterval should be provided in seconds or as a valid duration format,\nsee https://pkg.go.dev/time#ParseDuration.",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              "stripPrefix": {
                "description": "StripPrefix holds the strip prefix middleware configuration.\nThis middleware removes the specified prefixes from the URL path.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/",
                "type": "object",
                "properties": {
                  "forceSlash": {
                    "description": "Deprecated: ForceSlash option is deprecated, please remove any usage of this option.\nForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.\nDefault: true.",
                    "type": "boolean"
                  },
                  "prefixes": {
                    "description": "Prefixes defines the prefixes to strip from the request URL.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "stripPrefixRegex": {
                "description": "StripPrefixRegex holds the strip prefix regex middleware configuration.\nThis middleware removes the matching prefixes from the URL path.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/",
                "type": "object",
                "properties": {
                  "regex": {
                    "description": "Regex defines the regular expression to match the path prefix from the request URL.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "Middleware is the CRD implementation of a Traefik Middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/overview/",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "Middleware",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "middlewares.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "middlewares",
            "singular": "middleware",
            "kind": "Middleware",
            "listKind": "MiddlewareList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "Middleware is the CRD implementation of a Traefik Middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/overview/",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "MiddlewareSpec defines the desired state of a Middleware.",
                      "type": "object",
                      "properties": {
                        "addPrefix": {
                          "description": "AddPrefix holds the add prefix middleware configuration.\nThis middleware updates the path of a request before forwarding it.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/",
                          "type": "object",
                          "properties": {
                            "prefix": {
                              "description": "Prefix is the string to add before the current path in the requested URL.\nIt should include a leading slash (/).",
                              "type": "string"
                            }
                          }
                        },
                        "basicAuth": {
                          "description": "BasicAuth holds the basic auth middleware configuration.\nThis middleware restricts access to your services to known users.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/",
                          "type": "object",
                          "properties": {
                            "headerField": {
                              "description": "HeaderField defines a header field to store the authenticated user.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield",
                              "type": "string"
                            },
                            "realm": {
                              "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.\nDefault: traefik.",
                              "type": "string"
                            },
                            "removeHeader": {
                              "description": "RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.\nDefault: false.",
                              "type": "boolean"
                            },
                            "secret": {
                              "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                              "type": "string"
                            }
                          }
                        },
                        "buffering": {
                          "description": "Buffering holds the buffering middleware configuration.\nThis middleware retries or limits the size of requests that can be forwarded to backends.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes",
                          "type": "object",
                          "properties": {
                            "maxRequestBodyBytes": {
                              "description": "MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).\nIf the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.\nDefault: 0 (no maximum).",
                              "type": "integer",
                              "format": "int64"
                            },
                            "maxResponseBodyBytes": {
                              "description": "MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).\nIf the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.\nDefault: 0 (no maximum).",
                              "type": "integer",
                              "format": "int64"
                            },
                            "memRequestBodyBytes": {
                              "description": "MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.\nDefault: 1048576 (1Mi).",
                              "type": "integer",
                              "format": "int64"
                            },
                            "memResponseBodyBytes": {
                              "description": "MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.\nDefault: 1048576 (1Mi).",
                              "type": "integer",
                              "format": "int64"
                            },
                            "retryExpression": {
                              "description": "RetryExpression defines the retry conditions.\nIt is a logical combination of functions with operators AND (&&) and OR (||).\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#retryexpression",
                              "type": "string"
                            }
                          }
                        },
                        "chain": {
                          "description": "Chain holds the configuration of the chain middleware.\nThis middleware enables to define reusable combinations of other pieces of middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/",
                          "type": "object",
                          "properties": {
                            "middlewares": {
                              "description": "Middlewares is the list of MiddlewareRef which composes the chain.",
                              "type": "array",
                              "items": {
                                "description": "MiddlewareRef is a reference to a Middleware resource.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "description": "Name defines the name of the referenced Middleware resource.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace defines the namespace of the referenced Middleware resource.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "circuitBreaker": {
                          "description": "CircuitBreaker holds the circuit breaker configuration.",
                          "type": "object",
                          "properties": {
                            "checkPeriod": {
                              "description": "CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "expression": {
                              "description": "Expression is the condition that triggers the tripped state.",
                              "type": "string"
                            },
                            "fallbackDuration": {
                              "description": "FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "recoveryDuration": {
                              "description": "RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            }
                          }
                        },
                        "compress": {
                          "description": "Compress holds the compress middleware configuration.\nThis middleware compresses responses before sending them to the client, using gzip compression.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/",
                          "type": "object",
                          "properties": {
                            "excludedContentTypes": {
                              "description": "ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.\n`application/grpc` is always excluded.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "includedContentTypes": {
                              "description": "IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "minResponseBodyBytes": {
                              "description": "MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.\nDefault: 1024.",
                              "type": "integer"
                            }
                          }
                        },
                        "contentType": {
                          "description": "ContentType holds the content-type middleware configuration.\nThis middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                          "type": "object",
                          "properties": {
                            "autoDetect": {
                              "description": "AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,\nbe automatically set to a value derived from the contents of the response.\nDeprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.",
                              "type": "boolean"
                            }
                          }
                        },
                        "digestAuth": {
                          "description": "DigestAuth holds the digest auth middleware configuration.\nThis middleware restricts access to your services to known users.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/",
                          "type": "object",
                          "properties": {
                            "headerField": {
                              "description": "HeaderField defines a header field to store the authenticated user.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield",
                              "type": "string"
                            },
                            "realm": {
                              "description": "Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.\nDefault: traefik.",
                              "type": "string"
                            },
                            "removeHeader": {
                              "description": "RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.",
                              "type": "boolean"
                            },
                            "secret": {
                              "description": "Secret is the name of the referenced Kubernetes Secret containing user credentials.",
                              "type": "string"
                            }
                          }
                        },
                        "errors": {
                          "description": "ErrorPage holds the custom error middleware configuration.\nThis middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/",
                          "type": "object",
                          "properties": {
                            "query": {
                              "description": "Query defines the URL for the error page (hosted by service).\nThe {status} variable can be used in order to insert the status code in the URL.",
                              "type": "string"
                            },
                            "service": {
                              "description": "Service defines the reference to a Kubernetes Service that will serve the error page.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "kind": {
                                  "description": "Kind defines the kind of the Service.",
                                  "type": "string",
                                  "enum": [
                                    "Service",
                                    "TraefikService"
                                  ]
                                },
                                "name": {
                                  "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                  "type": "string"
                                },
                                "nativeLB": {
                                  "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                  "type": "boolean"
                                },
                                "passHostHeader": {
                                  "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                  "type": "boolean"
                                },
                                "port": {
                                  "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "responseForwarding": {
                                  "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                  "type": "object",
                                  "properties": {
                                    "flushInterval": {
                                      "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                      "type": "string"
                                    }
                                  }
                                },
                                "scheme": {
                                  "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                  "type": "string"
                                },
                                "serversTransport": {
                                  "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                  "type": "string"
                                },
                                "sticky": {
                                  "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                  "type": "object",
                                  "properties": {
                                    "cookie": {
                                      "description": "Cookie defines the sticky cookie configuration.",
                                      "type": "object",
                                      "properties": {
                                        "httpOnly": {
                                          "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                          "type": "boolean"
                                        },
                                        "maxAge": {
                                          "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                          "type": "integer"
                                        },
                                        "name": {
                                          "description": "Name defines the Cookie name.",
                                          "type": "string"
                                        },
                                        "sameSite": {
                                          "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                          "type": "string"
                                        },
                                        "secure": {
                                          "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                },
                                "strategy": {
                                  "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                  "type": "string"
                                },
                                "weight": {
                                  "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                  "type": "integer"
                                }
                              }
                            },
                            "status": {
                              "description": "Status defines which status or range of statuses should result in an error page.\nIt can be either a status code as a number (500),\nas multiple comma-separated numbers (500,502),\nas ranges by separating two codes with a dash (500-599),\nor a combination of the two (404,418,500-599).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "forwardAuth": {
                          "description": "ForwardAuth holds the forward auth middleware configuration.\nThis middleware delegates the request authentication to a Service.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/",
                          "type": "object",
                          "properties": {
                            "addAuthCookiesToResponse": {
                              "description": "AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "address": {
                              "description": "Address defines the authentication server address.",
                              "type": "string"
                            },
                            "authRequestHeaders": {
                              "description": "AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.\nIf not set or empty then all request headers are passed.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "authResponseHeaders": {
                              "description": "AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "authResponseHeadersRegex": {
                              "description": "AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/#authresponseheadersregex",
                              "type": "string"
                            },
                            "tls": {
                              "description": "TLS defines the configuration used to secure the connection to the authentication server.",
                              "type": "object",
                              "properties": {
                                "caOptional": {
                                  "description": "Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).",
                                  "type": "boolean"
                                },
                                "caSecret": {
                                  "description": "CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.\nThe CA certificate is extracted from key `tls.ca` or `ca.crt`.",
                                  "type": "string"
                                },
                                "certSecret": {
                                  "description": "CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.\nThe client certificate is extracted from the keys `tls.crt` and `tls.key`.",
                                  "type": "string"
                                },
                                "insecureSkipVerify": {
                                  "description": "InsecureSkipVerify defines whether the server certificates should be validated.",
                                  "type": "boolean"
                                }
                              }
                            },
                            "trustForwardHeader": {
                              "description": "TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.",
                              "type": "boolean"
                            }
                          }
                        },
                        "grpcWeb": {
                          "description": "GrpcWeb holds the gRPC web middleware configuration.\nThis middleware converts a gRPC web request to an HTTP/2 gRPC request.",
                          "type": "object",
                          "properties": {
                            "allowOrigins": {
                              "description": "AllowOrigins is a list of allowable origins.\nCan also be a wildcard origin \"*\".",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "headers": {
                          "description": "Headers holds the headers middleware configuration.\nThis middleware manages the requests and responses headers.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders",
                          "type": "object",
                          "properties": {
                            "accessControlAllowCredentials": {
                              "description": "AccessControlAllowCredentials defines whether the request can include user credentials.",
                              "type": "boolean"
                            },
                            "accessControlAllowHeaders": {
                              "description": "AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "accessControlAllowMethods": {
                              "description": "AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "accessControlAllowOriginList": {
                              "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "accessControlAllowOriginListRegex": {
                              "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "accessControlExposeHeaders": {
                              "description": "AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "accessControlMaxAge": {
                              "description": "AccessControlMaxAge defines the time that a preflight request may be cached.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "addVaryHeader": {
                              "description": "AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                              "type": "boolean"
                            },
                            "allowedHosts": {
                              "description": "AllowedHosts defines the fully qualified list of allowed domain names.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "browserXssFilter": {
                              "description": "BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.",
                              "type": "boolean"
                            },
                            "contentSecurityPolicy": {
                              "description": "ContentSecurityPolicy defines the Content-Security-Policy header value.",
                              "type": "string"
                            },
                            "contentTypeNosniff": {
                              "description": "ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.",
                              "type": "boolean"
                            },
                            "customBrowserXSSValue": {
                              "description": "CustomBrowserXSSValue defines the X-XSS-Protection header value.\nThis overrides the BrowserXssFilter option.",
                              "type": "string"
                            },
                            "customFrameOptionsValue": {
                              "description": "CustomFrameOptionsValue defines the X-Frame-Options header value.\nThis overrides the FrameDeny option.",
                              "type": "string"
                            },
                            "customRequestHeaders": {
                              "description": "CustomRequestHeaders defines the header names and values to apply to the request.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "customResponseHeaders": {
                              "description": "CustomResponseHeaders defines the header names and values to apply to the response.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "featurePolicy": {
                              "description": "Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.",
                              "type": "string"
                            },
                            "forceSTSHeader": {
                              "description": "ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.",
                              "type": "boolean"
                            },
                            "frameDeny": {
                              "description": "FrameDeny defines whether to add the X-Frame-Options header with the DENY value.",
                              "type": "boolean"
                            },
                            "hostsProxyHeaders": {
                              "description": "HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "isDevelopment": {
                              "description": "IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.\nUsually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.\nIf you would like your development environment to mimic production with complete Host blocking, SSL redirects,\nand STS headers, leave this as false.",
                              "type": "boolean"
                            },
                            "permissionsPolicy": {
                              "description": "PermissionsPolicy defines the Permissions-Policy header value.\nThis allows sites to control browser features.",
                              "type": "string"
                            },
                            "publicKey": {
                              "description": "PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.",
                              "type": "string"
                            },
                            "referrerPolicy": {
                              "description": "ReferrerPolicy defines the Referrer-Policy header value.\nThis allows sites to control whether browsers forward the Referer header to other sites.",
                              "type": "string"
                            },
                            "sslForceHost": {
                              "description": "Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.",
                              "type": "boolean"
                            },
                            "sslHost": {
                              "description": "Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.",
                              "type": "string"
                            },
                            "sslProxyHeaders": {
                              "description": "SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.\nIt can be useful when using other proxies (example: \"X-Forwarded-Proto\": \"https\").",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "sslRedirect": {
                              "description": "Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.",
                              "type": "boolean"
                            },
                            "sslTemporaryRedirect": {
                              "description": "Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.",
                              "type": "boolean"
                            },
                            "stsIncludeSubdomains": {
                              "description": "STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.",
                              "type": "boolean"
                            },
                            "stsPreload": {
                              "description": "STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.",
                              "type": "boolean"
                            },
                            "stsSeconds": {
                              "description": "STSSeconds defines the max-age of the Strict-Transport-Security header.\nIf set to 0, the header is not set.",
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        },
                        "inFlightReq": {
                          "description": "InFlightReq holds the in-flight request middleware configuration.\nThis middleware limits the number of requests being processed and served concurrently.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/",
                          "type": "object",
                          "properties": {
                            "amount": {
                              "description": "Amount defines the maximum amount of allowed simultaneous in-flight request.\nThe middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).",
                              "type": "integer",
                              "format": "int64"
                            },
                            "sourceCriterion": {
                              "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source.\nIf several strategies are defined at the same time, an error will be raised.\nIf none are set, the default is to use the requestHost.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion",
                              "type": "object",
                              "properties": {
                                "ipStrategy": {
                                  "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                                  "type": "object",
                                  "properties": {
                                    "depth": {
                                      "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                      "type": "integer"
                                    },
                                    "excludedIPs": {
                                      "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "requestHeaderName": {
                                  "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                                  "type": "string"
                                },
                                "requestHost": {
                                  "description": "RequestHost defines whether to consider the request Host as the source.",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        },
                        "ipAllowList": {
                          "description": "IPAllowList holds the IP allowlist middleware configuration.\nThis middleware accepts / refuses requests based on the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/",
                          "type": "object",
                          "properties": {
                            "ipStrategy": {
                              "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                              "type": "object",
                              "properties": {
                                "depth": {
                                  "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                  "type": "integer"
                                },
                                "excludedIPs": {
                                  "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "rejectStatusCode": {
                              "description": "RejectStatusCode defines the HTTP status code used for refused requests.\nIf not set, the default is 403 (Forbidden).",
                              "type": "integer"
                            },
                            "sourceRange": {
                              "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "ipWhiteList": {
                          "description": "Deprecated: please use IPAllowList instead.",
                          "type": "object",
                          "properties": {
                            "ipStrategy": {
                              "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                              "type": "object",
                              "properties": {
                                "depth": {
                                  "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                  "type": "integer"
                                },
                                "excludedIPs": {
                                  "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "sourceRange": {
                              "description": "SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "passTLSClientCert": {
                          "description": "PassTLSClientCert holds the pass TLS client cert middleware configuration.\nThis middleware adds the selected data from the passed client TLS certificate to a header.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/",
                          "type": "object",
                          "properties": {
                            "info": {
                              "description": "Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                              "type": "object",
                              "properties": {
                                "issuer": {
                                  "description": "Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                                  "type": "object",
                                  "properties": {
                                    "commonName": {
                                      "description": "CommonName defines whether to add the organizationalUnit information into the issuer.",
                                      "type": "boolean"
                                    },
                                    "country": {
                                      "description": "Country defines whether to add the country information into the issuer.",
                                      "type": "boolean"
                                    },
                                    "domainComponent": {
                                      "description": "DomainComponent defines whether to add the domainComponent information into the issuer.",
                                      "type": "boolean"
                                    },
                                    "locality": {
                                      "description": "Locality defines whether to add the locality information into the issuer.",
                                      "type": "boolean"
                                    },
                                    "organization": {
                                      "description": "Organization defines whether to add the organization information into the issuer.",
                                      "type": "boolean"
                                    },
                                    "province": {
                                      "description": "Province defines whether to add the province information into the issuer.",
                                      "type": "boolean"
                                    },
                                    "serialNumber": {
                                      "description": "SerialNumber defines whether to add the serialNumber information into the issuer.",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "notAfter": {
                                  "description": "NotAfter defines whether to add the Not After information from the Validity part.",
                                  "type": "boolean"
                                },
                                "notBefore": {
                                  "description": "NotBefore defines whether to add the Not Before information from the Validity part.",
                                  "type": "boolean"
                                },
                                "sans": {
                                  "description": "Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.",
                                  "type": "boolean"
                                },
                                "serialNumber": {
                                  "description": "SerialNumber defines whether to add the client serialNumber information.",
                                  "type": "boolean"
                                },
                                "subject": {
                                  "description": "Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.",
                                  "type": "object",
                                  "properties": {
                                    "commonName": {
                                      "description": "CommonName defines whether to add the organizationalUnit information into the subject.",
                                      "type": "boolean"
                                    },
                                    "country": {
                                      "description": "Country defines whether to add the country information into the subject.",
                                      "type": "boolean"
                                    },
                                    "domainComponent": {
                                      "description": "DomainComponent defines whether to add the domainComponent information into the subject.",
                                      "type": "boolean"
                                    },
                                    "locality": {
                                      "description": "Locality defines whether to add the locality information into the subject.",
                                      "type": "boolean"
                                    },
                                    "organization": {
                                      "description": "Organization defines whether to add the organization information into the subject.",
                                      "type": "boolean"
                                    },
                                    "organizationalUnit": {
                                      "description": "OrganizationalUnit defines whether to add the organizationalUnit information into the subject.",
                                      "type": "boolean"
                                    },
                                    "province": {
                                      "description": "Province defines whether to add the province information into the subject.",
                                      "type": "boolean"
                                    },
                                    "serialNumber": {
                                      "description": "SerialNumber defines whether to add the serialNumber information into the subject.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "pem": {
                              "description": "PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.",
                              "type": "boolean"
                            }
                          }
                        },
                        "plugin": {
                          "description": "Plugin defines the middleware plugin configuration.\nMore info: https://doc.traefik.io/traefik/plugins/",
                          "type": "object",
                          "additionalProperties": {
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        },
                        "rateLimit": {
                          "description": "RateLimit holds the rate limit configuration.\nThis middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/",
                          "type": "object",
                          "properties": {
                            "average": {
                              "description": "Average is the maximum rate, by default in requests/s, allowed for the given source.\nIt defaults to 0, which means no rate limiting.\nThe rate is actually defined by dividing Average by Period. So for a rate below 1req/s,\none needs to define a Period larger than a second.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "burst": {
                              "description": "Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.\nIt defaults to 1.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "period": {
                              "description": "Period, in combination with Average, defines the actual maximum rate, such as:\nr = Average / Period. It defaults to a second.",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "sourceCriterion": {
                              "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source.\nIf several strategies are defined at the same time, an error will be raised.\nIf none are set, the default is to use the request's remote address field (as an ipStrategy).",
                              "type": "object",
                              "properties": {
                                "ipStrategy": {
                                  "description": "IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy",
                                  "type": "object",
                                  "properties": {
                                    "depth": {
                                      "description": "Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).",
                                      "type": "integer"
                                    },
                                    "excludedIPs": {
                                      "description": "ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "requestHeaderName": {
                                  "description": "RequestHeaderName defines the name of the header used to group incoming requests.",
                                  "type": "string"
                                },
                                "requestHost": {
                                  "description": "RequestHost defines whether to consider the request Host as the source.",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        },
                        "redirectRegex": {
                          "description": "RedirectRegex holds the redirect regex middleware configuration.\nThis middleware redirects a request using regex matching and replacement.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex",
                          "type": "object",
                          "properties": {
                            "permanent": {
                              "description": "Permanent defines whether the redirection is permanent (301).",
                              "type": "boolean"
                            },
                            "regex": {
                              "description": "Regex defines the regex used to match and capture elements from the request URL.",
                              "type": "string"
                            },
                            "replacement": {
                              "description": "Replacement defines how to modify the URL to have the new target URL.",
                              "type": "string"
                            }
                          }
                        },
                        "redirectScheme": {
                          "description": "RedirectScheme holds the redirect scheme middleware configuration.\nThis middleware redirects requests from a scheme/port to another.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/",
                          "type": "object",
                          "properties": {
                            "permanent": {
                              "description": "Permanent defines whether the redirection is permanent (301).",
                              "type": "boolean"
                            },
                            "port": {
                              "description": "Port defines the port of the new URL.",
                              "type": "string"
                            },
                            "scheme": {
                              "description": "Scheme defines the scheme of the new URL.",
                              "type": "string"
                            }
                          }
                        },
                        "replacePath": {
                          "description": "ReplacePath holds the replace path middleware configuration.\nThis middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/",
                          "type": "object",
                          "properties": {
                            "path": {
                              "description": "Path defines the path to use as replacement in the request URL.",
                              "type": "string"
                            }
                          }
                        },
                        "replacePathRegex": {
                          "description": "ReplacePathRegex holds the replace path regex middleware configuration.\nThis middleware replaces the path of a URL using regex matching and replacement.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/",
                          "type": "object",
                          "properties": {
                            "regex": {
                              "description": "Regex defines the regular expression used to match and capture the path from the request URL.",
                              "type": "string"
                            },
                            "replacement": {
                              "description": "Replacement defines the replacement path format, which can include captured variables.",
                              "type": "string"
                            }
                          }
                        },
                        "retry": {
                          "description": "Retry holds the retry middleware configuration.\nThis middleware reissues requests a given number of times to a backend server if that server does not reply.\nAs soon as the server answers, the middleware stops retrying, regardless of the response status.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/",
                          "type": "object",
                          "properties": {
                            "attempts": {
                              "description": "Attempts defines how many times the request should be retried.",
                              "type": "integer"
                            },
                            "initialInterval": {
                              "description": "InitialInterval defines the first wait time in the exponential backoff series.\nThe maximum interval is calculated as twice the initialInterval.\nIf unspecified, requests will be retried immediately.\nThe value of initialInterval should be provided in seconds or as a valid duration format,\nsee https://pkg.go.dev/time#ParseDuration.",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            }
                          }
                        },
                        "stripPrefix": {
                          "description": "StripPrefix holds the strip prefix middleware configuration.\nThis middleware removes the specified prefixes from the URL path.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/",
                          "type": "object",
                          "properties": {
                            "forceSlash": {
                              "description": "Deprecated: ForceSlash option is deprecated, please remove any usage of this option.\nForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.\nDefault: true.",
                              "type": "boolean"
                            },
                            "prefixes": {
                              "description": "Prefixes defines the prefixes to strip from the request URL.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "stripPrefixRegex": {
                          "description": "StripPrefixRegex holds the strip prefix regex middleware configuration.\nThis middleware removes the matching prefixes from the URL path.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/",
                          "type": "object",
                          "properties": {
                            "regex": {
                              "description": "Regex defines the regular expression to match the path prefix from the request URL.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "middlewares",
            "singular": "middleware",
            "kind": "Middleware",
            "listKind": "MiddlewareList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "Middleware",
      "apiGroup": "traefik.io",
      "apiKind": "Middleware",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.MiddlewareTCP",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.",
                "properties": {
                  "inFlightConn": {
                    "description": "InFlightConn defines the InFlightConn middleware configuration.",
                    "type": "object",
                    "properties": {
                      "amount": {
                        "description": "Amount defines the maximum amount of allowed simultaneous connections.\nThe middleware closes the connection if there are already amount connections opened.",
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  "ipAllowList": {
                    "description": "IPAllowList defines the IPAllowList middleware configuration.\nThis middleware accepts/refuses connections based on the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/",
                    "type": "object",
                    "properties": {
                      "sourceRange": {
                        "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "ipWhiteList": {
                    "description": "IPWhiteList defines the IPWhiteList middleware configuration.\nThis middleware accepts/refuses connections based on the client IP.\nDeprecated: please use IPAllowList instead.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/",
                    "type": "object",
                    "properties": {
                      "sourceRange": {
                        "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "MiddlewareTCP is the CRD implementation of a Traefik TCP middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/overview/",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "MiddlewareTCP",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "middlewaretcps.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "middlewaretcps",
                "singular": "middlewaretcp",
                "kind": "MiddlewareTCP",
                "listKind": "MiddlewareTCPList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "MiddlewareTCP is the CRD implementation of a Traefik TCP middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/overview/",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.",
                          "type": "object",
                          "properties": {
                            "inFlightConn": {
                              "description": "InFlightConn defines the InFlightConn middleware configuration.",
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "description": "Amount defines the maximum amount of allowed simultaneous connections.\nThe middleware closes the connection if there are already amount connections opened.",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            },
                            "ipAllowList": {
                              "description": "IPAllowList defines the IPAllowList middleware configuration.\nThis middleware accepts/refuses connections based on the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/",
                              "type": "object",
                              "properties": {
                                "sourceRange": {
                                  "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "ipWhiteList": {
                              "description": "IPWhiteList defines the IPWhiteList middleware configuration.\nThis middleware accepts/refuses connections based on the client IP.\nDeprecated: please use IPAllowList instead.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/",
                              "type": "object",
                              "properties": {
                                "sourceRange": {
                                  "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "middlewaretcps",
                "singular": "middlewaretcp",
                "kind": "MiddlewareTCP",
                "listKind": "MiddlewareTCPList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "MiddlewareTCP",
          "apiGroup": "traefik.io",
          "apiKind": "MiddlewareTCP",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.MiddlewareTCP",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.",
                "properties": {
                  "inFlightConn": {
                    "description": "InFlightConn defines the InFlightConn middleware configuration.",
                    "type": "object",
                    "properties": {
                      "amount": {
                        "description": "Amount defines the maximum amount of allowed simultaneous connections. The middleware closes the connection if there are already amount connections opened.",
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  "ipWhiteList": {
                    "description": "IPWhiteList defines the IPWhiteList middleware configuration.",
                    "type": "object",
                    "properties": {
                      "sourceRange": {
                        "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "MiddlewareTCP is the CRD implementation of a Traefik TCP middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/overview/",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "MiddlewareTCP",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "middlewaretcps.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "middlewaretcps",
                "singular": "middlewaretcp",
                "kind": "MiddlewareTCP",
                "listKind": "MiddlewareTCPList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "MiddlewareTCP is the CRD implementation of a Traefik TCP middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/overview/",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.",
                          "type": "object",
                          "properties": {
                            "inFlightConn": {
                              "description": "InFlightConn defines the InFlightConn middleware configuration.",
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "description": "Amount defines the maximum amount of allowed simultaneous connections. The middleware closes the connection if there are already amount connections opened.",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            },
                            "ipWhiteList": {
                              "description": "IPWhiteList defines the IPWhiteList middleware configuration.",
                              "type": "object",
                              "properties": {
                                "sourceRange": {
                                  "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "middlewaretcps",
                "singular": "middlewaretcp",
                "kind": "MiddlewareTCP",
                "listKind": "MiddlewareTCPList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "MiddlewareTCP",
          "apiGroup": "traefik.containo.us",
          "apiKind": "MiddlewareTCP",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.MiddlewareTCP",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.",
            "properties": {
              "inFlightConn": {
                "description": "InFlightConn defines the InFlightConn middleware configuration.",
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "Amount defines the maximum amount of allowed simultaneous connections.\nThe middleware closes the connection if there are already amount connections opened.",
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "ipAllowList": {
                "description": "IPAllowList defines the IPAllowList middleware configuration.\nThis middleware accepts/refuses connections based on the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/",
                "type": "object",
                "properties": {
                  "sourceRange": {
                    "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "ipWhiteList": {
                "description": "IPWhiteList defines the IPWhiteList middleware configuration.\nThis middleware accepts/refuses connections based on the client IP.\nDeprecated: please use IPAllowList instead.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/",
                "type": "object",
                "properties": {
                  "sourceRange": {
                    "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "MiddlewareTCP is the CRD implementation of a Traefik TCP middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/overview/",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "MiddlewareTCP",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "middlewaretcps.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "middlewaretcps",
            "singular": "middlewaretcp",
            "kind": "MiddlewareTCP",
            "listKind": "MiddlewareTCPList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "MiddlewareTCP is the CRD implementation of a Traefik TCP middleware.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/overview/",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.",
                      "type": "object",
                      "properties": {
                        "inFlightConn": {
                          "description": "InFlightConn defines the InFlightConn middleware configuration.",
                          "type": "object",
                          "properties": {
                            "amount": {
                              "description": "Amount defines the maximum amount of allowed simultaneous connections.\nThe middleware closes the connection if there are already amount connections opened.",
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        },
                        "ipAllowList": {
                          "description": "IPAllowList defines the IPAllowList middleware configuration.\nThis middleware accepts/refuses connections based on the client IP.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/",
                          "type": "object",
                          "properties": {
                            "sourceRange": {
                              "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "ipWhiteList": {
                          "description": "IPWhiteList defines the IPWhiteList middleware configuration.\nThis middleware accepts/refuses connections based on the client IP.\nDeprecated: please use IPAllowList instead.\nMore info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/",
                          "type": "object",
                          "properties": {
                            "sourceRange": {
                              "description": "SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "middlewaretcps",
            "singular": "middlewaretcp",
            "kind": "MiddlewareTCP",
            "listKind": "MiddlewareTCPList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "MiddlewareTCP",
      "apiGroup": "traefik.io",
      "apiKind": "MiddlewareTCP",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.ServersTransport",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "ServersTransportSpec defines the desired state of a ServersTransport.",
                "properties": {
                  "certificatesSecrets": {
                    "description": "CertificatesSecrets defines a list of secret storing client certificates for mTLS.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "disableHTTP2": {
                    "description": "DisableHTTP2 disables HTTP/2 for connections with backend servers.",
                    "type": "boolean"
                  },
                  "forwardingTimeouts": {
                    "description": "ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.",
                    "type": "object",
                    "properties": {
                      "dialTimeout": {
                        "description": "DialTimeout is the amount of time to wait until a connection to a backend server can be established.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "idleConnTimeout": {
                        "description": "IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "pingTimeout": {
                        "description": "PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "readIdleTimeout": {
                        "description": "ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "responseHeaderTimeout": {
                        "description": "ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  },
                  "insecureSkipVerify": {
                    "description": "InsecureSkipVerify disables SSL certificate verification.",
                    "type": "boolean"
                  },
                  "maxIdleConnsPerHost": {
                    "description": "MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.",
                    "type": "integer"
                  },
                  "peerCertURI": {
                    "description": "PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.",
                    "type": "string"
                  },
                  "rootCAsSecrets": {
                    "description": "RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "serverName": {
                    "description": "ServerName defines the server name used to contact the server.",
                    "type": "string"
                  },
                  "spiffe": {
                    "description": "Spiffe defines the SPIFFE configuration.",
                    "type": "object",
                    "properties": {
                      "ids": {
                        "description": "IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "trustDomain": {
                        "description": "TrustDomain defines the allowed SPIFFE trust domain.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "ServersTransport is the CRD implementation of a ServersTransport.\nIf no serversTransport is specified, the default@internal will be used.\nThe default@internal serversTransport is created from the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#serverstransport_1",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "ServersTransport",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "serverstransports.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "serverstransports",
                "singular": "serverstransport",
                "kind": "ServersTransport",
                "listKind": "ServersTransportList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "ServersTransport is the CRD implementation of a ServersTransport.\nIf no serversTransport is specified, the default@internal will be used.\nThe default@internal serversTransport is created from the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#serverstransport_1",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "ServersTransportSpec defines the desired state of a ServersTransport.",
                          "type": "object",
                          "properties": {
                            "certificatesSecrets": {
                              "description": "CertificatesSecrets defines a list of secret storing client certificates for mTLS.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "disableHTTP2": {
                              "description": "DisableHTTP2 disables HTTP/2 for connections with backend servers.",
                              "type": "boolean"
                            },
                            "forwardingTimeouts": {
                              "description": "ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.",
                              "type": "object",
                              "properties": {
                                "dialTimeout": {
                                  "description": "DialTimeout is the amount of time to wait until a connection to a backend server can be established.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "idleConnTimeout": {
                                  "description": "IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "pingTimeout": {
                                  "description": "PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "readIdleTimeout": {
                                  "description": "ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "responseHeaderTimeout": {
                                  "description": "ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "insecureSkipVerify": {
                              "description": "InsecureSkipVerify disables SSL certificate verification.",
                              "type": "boolean"
                            },
                            "maxIdleConnsPerHost": {
                              "description": "MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.",
                              "type": "integer"
                            },
                            "peerCertURI": {
                              "description": "PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.",
                              "type": "string"
                            },
                            "rootCAsSecrets": {
                              "description": "RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "serverName": {
                              "description": "ServerName defines the server name used to contact the server.",
                              "type": "string"
                            },
                            "spiffe": {
                              "description": "Spiffe defines the SPIFFE configuration.",
                              "type": "object",
                              "properties": {
                                "ids": {
                                  "description": "IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "trustDomain": {
                                  "description": "TrustDomain defines the allowed SPIFFE trust domain.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "serverstransports",
                "singular": "serverstransport",
                "kind": "ServersTransport",
                "listKind": "ServersTransportList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "ServersTransport",
          "apiGroup": "traefik.io",
          "apiKind": "ServersTransport",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.ServersTransport",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "ServersTransportSpec defines the desired state of a ServersTransport.",
                "properties": {
                  "certificatesSecrets": {
                    "description": "CertificatesSecrets defines a list of secret storing client certificates for mTLS.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "disableHTTP2": {
                    "description": "DisableHTTP2 disables HTTP/2 for connections with backend servers.",
                    "type": "boolean"
                  },
                  "forwardingTimeouts": {
                    "description": "ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.",
                    "type": "object",
                    "properties": {
                      "dialTimeout": {
                        "description": "DialTimeout is the amount of time to wait until a connection to a backend server can be established.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "idleConnTimeout": {
                        "description": "IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "pingTimeout": {
                        "description": "PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "readIdleTimeout": {
                        "description": "ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "responseHeaderTimeout": {
                        "description": "ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  },
                  "insecureSkipVerify": {
                    "description": "InsecureSkipVerify disables SSL certificate verification.",
                    "type": "boolean"
                  },
                  "maxIdleConnsPerHost": {
                    "description": "MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.",
                    "type": "integer"
                  },
                  "peerCertURI": {
                    "description": "PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.",
                    "type": "string"
                  },
                  "rootCAsSecrets": {
                    "description": "RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "serverName": {
                    "description": "ServerName defines the server name used to contact the server.",
                    "type": "string"
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "ServersTransport is the CRD implementation of a ServersTransport. If no serversTransport is specified, the default@internal will be used. The default@internal serversTransport is created from the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#serverstransport_1",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "ServersTransport",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "serverstransports.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "serverstransports",
                "singular": "serverstransport",
                "kind": "ServersTransport",
                "listKind": "ServersTransportList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "ServersTransport is the CRD implementation of a ServersTransport. If no serversTransport is specified, the default@internal will be used. The default@internal serversTransport is created from the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#serverstransport_1",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "ServersTransportSpec defines the desired state of a ServersTransport.",
                          "type": "object",
                          "properties": {
                            "certificatesSecrets": {
                              "description": "CertificatesSecrets defines a list of secret storing client certificates for mTLS.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "disableHTTP2": {
                              "description": "DisableHTTP2 disables HTTP/2 for connections with backend servers.",
                              "type": "boolean"
                            },
                            "forwardingTimeouts": {
                              "description": "ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.",
                              "type": "object",
                              "properties": {
                                "dialTimeout": {
                                  "description": "DialTimeout is the amount of time to wait until a connection to a backend server can be established.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "idleConnTimeout": {
                                  "description": "IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "pingTimeout": {
                                  "description": "PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "readIdleTimeout": {
                                  "description": "ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "responseHeaderTimeout": {
                                  "description": "ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                }
                              }
                            },
                            "insecureSkipVerify": {
                              "description": "InsecureSkipVerify disables SSL certificate verification.",
                              "type": "boolean"
                            },
                            "maxIdleConnsPerHost": {
                              "description": "MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.",
                              "type": "integer"
                            },
                            "peerCertURI": {
                              "description": "PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.",
                              "type": "string"
                            },
                            "rootCAsSecrets": {
                              "description": "RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "serverName": {
                              "description": "ServerName defines the server name used to contact the server.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "serverstransports",
                "singular": "serverstransport",
                "kind": "ServersTransport",
                "listKind": "ServersTransportList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "ServersTransport",
          "apiGroup": "traefik.containo.us",
          "apiKind": "ServersTransport",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.ServersTransport",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "ServersTransportSpec defines the desired state of a ServersTransport.",
            "properties": {
              "certificatesSecrets": {
                "description": "CertificatesSecrets defines a list of secret storing client certificates for mTLS.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "disableHTTP2": {
                "description": "DisableHTTP2 disables HTTP/2 for connections with backend servers.",
                "type": "boolean"
              },
              "forwardingTimeouts": {
                "description": "ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.",
                "type": "object",
                "properties": {
                  "dialTimeout": {
                    "description": "DialTimeout is the amount of time to wait until a connection to a backend server can be established.",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "idleConnTimeout": {
                    "description": "IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "pingTimeout": {
                    "description": "PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "readIdleTimeout": {
                    "description": "ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "responseHeaderTimeout": {
                    "description": "ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              "insecureSkipVerify": {
                "description": "InsecureSkipVerify disables SSL certificate verification.",
                "type": "boolean"
              },
              "maxIdleConnsPerHost": {
                "description": "MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.",
                "type": "integer"
              },
              "peerCertURI": {
                "description": "PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.",
                "type": "string"
              },
              "rootCAsSecrets": {
                "description": "RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "serverName": {
                "description": "ServerName defines the server name used to contact the server.",
                "type": "string"
              },
              "spiffe": {
                "description": "Spiffe defines the SPIFFE configuration.",
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "trustDomain": {
                    "description": "TrustDomain defines the allowed SPIFFE trust domain.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "ServersTransport is the CRD implementation of a ServersTransport.\nIf no serversTransport is specified, the default@internal will be used.\nThe default@internal serversTransport is created from the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#serverstransport_1",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "ServersTransport",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "serverstransports.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "serverstransports",
            "singular": "serverstransport",
            "kind": "ServersTransport",
            "listKind": "ServersTransportList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "ServersTransport is the CRD implementation of a ServersTransport.\nIf no serversTransport is specified, the default@internal will be used.\nThe default@internal serversTransport is created from the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#serverstransport_1",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "ServersTransportSpec defines the desired state of a ServersTransport.",
                      "type": "object",
                      "properties": {
                        "certificatesSecrets": {
                          "description": "CertificatesSecrets defines a list of secret storing client certificates for mTLS.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "disableHTTP2": {
                          "description": "DisableHTTP2 disables HTTP/2 for connections with backend servers.",
                          "type": "boolean"
                        },
                        "forwardingTimeouts": {
                          "description": "ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.",
                          "type": "object",
                          "properties": {
                            "dialTimeout": {
                              "description": "DialTimeout is the amount of time to wait until a connection to a backend server can be established.",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "idleConnTimeout": {
                              "description": "IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "pingTimeout": {
                              "description": "PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "readIdleTimeout": {
                              "description": "ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "responseHeaderTimeout": {
                              "description": "ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            }
                          }
                        },
                        "insecureSkipVerify": {
                          "description": "InsecureSkipVerify disables SSL certificate verification.",
                          "type": "boolean"
                        },
                        "maxIdleConnsPerHost": {
                          "description": "MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.",
                          "type": "integer"
                        },
                        "peerCertURI": {
                          "description": "PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.",
                          "type": "string"
                        },
                        "rootCAsSecrets": {
                          "description": "RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "serverName": {
                          "description": "ServerName defines the server name used to contact the server.",
                          "type": "string"
                        },
                        "spiffe": {
                          "description": "Spiffe defines the SPIFFE configuration.",
                          "type": "object",
                          "properties": {
                            "ids": {
                              "description": "IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "trustDomain": {
                              "description": "TrustDomain defines the allowed SPIFFE trust domain.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "serverstransports",
            "singular": "serverstransport",
            "kind": "ServersTransport",
            "listKind": "ServersTransportList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "ServersTransport",
      "apiGroup": "traefik.io",
      "apiKind": "ServersTransport",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.TLSOption",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "TLSOptionSpec defines the desired state of a TLSOption.",
                "properties": {
                  "alpnProtocols": {
                    "description": "ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#alpn-protocols",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "cipherSuites": {
                    "description": "CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#cipher-suites",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "clientAuth": {
                    "description": "ClientAuth defines the server's policy for TLS Client Authentication.",
                    "type": "object",
                    "properties": {
                      "clientAuthType": {
                        "description": "ClientAuthType defines the client authentication type to apply.",
                        "type": "string",
                        "enum": [
                          "NoClientCert",
                          "RequestClientCert",
                          "RequireAnyClientCert",
                          "VerifyClientCertIfGiven",
                          "RequireAndVerifyClientCert"
                        ]
                      },
                      "secretNames": {
                        "description": "SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "curvePreferences": {
                    "description": "CurvePreferences defines the preferred elliptic curves in a specific order.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#curve-preferences",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "maxVersion": {
                    "description": "MaxVersion defines the maximum TLS version that Traefik will accept.\nPossible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\nDefault: None.",
                    "type": "string"
                  },
                  "minVersion": {
                    "description": "MinVersion defines the minimum TLS version that Traefik will accept.\nPossible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\nDefault: VersionTLS10.",
                    "type": "string"
                  },
                  "preferServerCipherSuites": {
                    "description": "PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.\nIt is enabled automatically when minVersion or maxVersion is set.\nDeprecated: https://github.com/golang/go/issues/45430",
                    "type": "boolean"
                  },
                  "sniStrict": {
                    "description": "SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.",
                    "type": "boolean"
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "TLSOption",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "tlsoptions.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "tlsoptions",
                "singular": "tlsoption",
                "kind": "TLSOption",
                "listKind": "TLSOptionList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "TLSOptionSpec defines the desired state of a TLSOption.",
                          "type": "object",
                          "properties": {
                            "alpnProtocols": {
                              "description": "ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#alpn-protocols",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "cipherSuites": {
                              "description": "CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#cipher-suites",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "clientAuth": {
                              "description": "ClientAuth defines the server's policy for TLS Client Authentication.",
                              "type": "object",
                              "properties": {
                                "clientAuthType": {
                                  "description": "ClientAuthType defines the client authentication type to apply.",
                                  "type": "string",
                                  "enum": [
                                    "NoClientCert",
                                    "RequestClientCert",
                                    "RequireAnyClientCert",
                                    "VerifyClientCertIfGiven",
                                    "RequireAndVerifyClientCert"
                                  ]
                                },
                                "secretNames": {
                                  "description": "SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "curvePreferences": {
                              "description": "CurvePreferences defines the preferred elliptic curves in a specific order.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#curve-preferences",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "maxVersion": {
                              "description": "MaxVersion defines the maximum TLS version that Traefik will accept.\nPossible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\nDefault: None.",
                              "type": "string"
                            },
                            "minVersion": {
                              "description": "MinVersion defines the minimum TLS version that Traefik will accept.\nPossible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\nDefault: VersionTLS10.",
                              "type": "string"
                            },
                            "preferServerCipherSuites": {
                              "description": "PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.\nIt is enabled automatically when minVersion or maxVersion is set.\nDeprecated: https://github.com/golang/go/issues/45430",
                              "type": "boolean"
                            },
                            "sniStrict": {
                              "description": "SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "tlsoptions",
                "singular": "tlsoption",
                "kind": "TLSOption",
                "listKind": "TLSOptionList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "TLSOption",
          "apiGroup": "traefik.io",
          "apiKind": "TLSOption",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.TLSOption",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "TLSOptionSpec defines the desired state of a TLSOption.",
                "properties": {
                  "alpnProtocols": {
                    "description": "ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#alpn-protocols",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "cipherSuites": {
                    "description": "CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#cipher-suites",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "clientAuth": {
                    "description": "ClientAuth defines the server's policy for TLS Client Authentication.",
                    "type": "object",
                    "properties": {
                      "clientAuthType": {
                        "description": "ClientAuthType defines the client authentication type to apply.",
                        "type": "string",
                        "enum": [
                          "NoClientCert",
                          "RequestClientCert",
                          "RequireAnyClientCert",
                          "VerifyClientCertIfGiven",
                          "RequireAndVerifyClientCert"
                        ]
                      },
                      "secretNames": {
                        "description": "SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "curvePreferences": {
                    "description": "CurvePreferences defines the preferred elliptic curves in a specific order. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#curve-preferences",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "maxVersion": {
                    "description": "MaxVersion defines the maximum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: None.",
                    "type": "string"
                  },
                  "minVersion": {
                    "description": "MinVersion defines the minimum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: VersionTLS10.",
                    "type": "string"
                  },
                  "preferServerCipherSuites": {
                    "description": "PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's. It is enabled automatically when minVersion or maxVersion is set. Deprecated: https://github.com/golang/go/issues/45430",
                    "type": "boolean"
                  },
                  "sniStrict": {
                    "description": "SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.",
                    "type": "boolean"
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "TLSOption",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "tlsoptions.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "tlsoptions",
                "singular": "tlsoption",
                "kind": "TLSOption",
                "listKind": "TLSOptionList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "TLSOptionSpec defines the desired state of a TLSOption.",
                          "type": "object",
                          "properties": {
                            "alpnProtocols": {
                              "description": "ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#alpn-protocols",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "cipherSuites": {
                              "description": "CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#cipher-suites",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "clientAuth": {
                              "description": "ClientAuth defines the server's policy for TLS Client Authentication.",
                              "type": "object",
                              "properties": {
                                "clientAuthType": {
                                  "description": "ClientAuthType defines the client authentication type to apply.",
                                  "type": "string",
                                  "enum": [
                                    "NoClientCert",
                                    "RequestClientCert",
                                    "RequireAnyClientCert",
                                    "VerifyClientCertIfGiven",
                                    "RequireAndVerifyClientCert"
                                  ]
                                },
                                "secretNames": {
                                  "description": "SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "curvePreferences": {
                              "description": "CurvePreferences defines the preferred elliptic curves in a specific order. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#curve-preferences",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "maxVersion": {
                              "description": "MaxVersion defines the maximum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: None.",
                              "type": "string"
                            },
                            "minVersion": {
                              "description": "MinVersion defines the minimum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: VersionTLS10.",
                              "type": "string"
                            },
                            "preferServerCipherSuites": {
                              "description": "PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's. It is enabled automatically when minVersion or maxVersion is set. Deprecated: https://github.com/golang/go/issues/45430",
                              "type": "boolean"
                            },
                            "sniStrict": {
                              "description": "SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "tlsoptions",
                "singular": "tlsoption",
                "kind": "TLSOption",
                "listKind": "TLSOptionList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "TLSOption",
          "apiGroup": "traefik.containo.us",
          "apiKind": "TLSOption",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.TLSOption",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "TLSOptionSpec defines the desired state of a TLSOption.",
            "properties": {
              "alpnProtocols": {
                "description": "ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#alpn-protocols",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "cipherSuites": {
                "description": "CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#cipher-suites",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "clientAuth": {
                "description": "ClientAuth defines the server's policy for TLS Client Authentication.",
                "type": "object",
                "properties": {
                  "clientAuthType": {
                    "description": "ClientAuthType defines the client authentication type to apply.",
                    "type": "string",
                    "enum": [
                      "NoClientCert",
                      "RequestClientCert",
                      "RequireAnyClientCert",
                      "VerifyClientCertIfGiven",
                      "RequireAndVerifyClientCert"
                    ]
                  },
                  "secretNames": {
                    "description": "SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "curvePreferences": {
                "description": "CurvePreferences defines the preferred elliptic curves in a specific order.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#curve-preferences",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "maxVersion": {
                "description": "MaxVersion defines the maximum TLS version that Traefik will accept.\nPossible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\nDefault: None.",
                "type": "string"
              },
              "minVersion": {
                "description": "MinVersion defines the minimum TLS version that Traefik will accept.\nPossible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\nDefault: VersionTLS10.",
                "type": "string"
              },
              "preferServerCipherSuites": {
                "description": "PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.\nIt is enabled automatically when minVersion or maxVersion is set.\nDeprecated: https://github.com/golang/go/issues/45430",
                "type": "boolean"
              },
              "sniStrict": {
                "description": "SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.",
                "type": "boolean"
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "TLSOption",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "tlsoptions.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "tlsoptions",
            "singular": "tlsoption",
            "kind": "TLSOption",
            "listKind": "TLSOptionList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "TLSOptionSpec defines the desired state of a TLSOption.",
                      "type": "object",
                      "properties": {
                        "alpnProtocols": {
                          "description": "ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#alpn-protocols",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "cipherSuites": {
                          "description": "CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#cipher-suites",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "clientAuth": {
                          "description": "ClientAuth defines the server's policy for TLS Client Authentication.",
                          "type": "object",
                          "properties": {
                            "clientAuthType": {
                              "description": "ClientAuthType defines the client authentication type to apply.",
                              "type": "string",
                              "enum": [
                                "NoClientCert",
                                "RequestClientCert",
                                "RequireAnyClientCert",
                                "VerifyClientCertIfGiven",
                                "RequireAndVerifyClientCert"
                              ]
                            },
                            "secretNames": {
                              "description": "SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "curvePreferences": {
                          "description": "CurvePreferences defines the preferred elliptic curves in a specific order.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#curve-preferences",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "maxVersion": {
                          "description": "MaxVersion defines the maximum TLS version that Traefik will accept.\nPossible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\nDefault: None.",
                          "type": "string"
                        },
                        "minVersion": {
                          "description": "MinVersion defines the minimum TLS version that Traefik will accept.\nPossible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\nDefault: VersionTLS10.",
                          "type": "string"
                        },
                        "preferServerCipherSuites": {
                          "description": "PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.\nIt is enabled automatically when minVersion or maxVersion is set.\nDeprecated: https://github.com/golang/go/issues/45430",
                          "type": "boolean"
                        },
                        "sniStrict": {
                          "description": "SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "tlsoptions",
            "singular": "tlsoption",
            "kind": "TLSOption",
            "listKind": "TLSOptionList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "TLSOption",
      "apiGroup": "traefik.io",
      "apiKind": "TLSOption",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.TLSStore",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "TLSStoreSpec defines the desired state of a TLSStore.",
                "properties": {
                  "certificates": {
                    "description": "Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.",
                    "type": "array",
                    "items": {
                      "description": "Certificate holds a secret name for the TLSStore resource.",
                      "type": "object",
                      "required": [
                        "secretName"
                      ],
                      "properties": {
                        "secretName": {
                          "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "defaultCertificate": {
                    "description": "DefaultCertificate defines the default certificate configuration.",
                    "type": "object",
                    "required": [
                      "secretName"
                    ],
                    "properties": {
                      "secretName": {
                        "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                        "type": "string"
                      }
                    }
                  },
                  "defaultGeneratedCert": {
                    "description": "DefaultGeneratedCert defines the default generated certificate configuration.",
                    "type": "object",
                    "properties": {
                      "domain": {
                        "description": "Domain is the domain definition for the DefaultCertificate.",
                        "type": "object",
                        "properties": {
                          "main": {
                            "description": "Main defines the main domain name.",
                            "type": "string"
                          },
                          "sans": {
                            "description": "SANs defines the subject alternative domain names.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "resolver": {
                        "description": "Resolver is the name of the resolver that will be used to issue the DefaultCertificate.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "TLSStore is the CRD implementation of a Traefik TLS Store.\nFor the time being, only the TLSStore named default is supported.\nThis means that you cannot have two stores that are named default in different Kubernetes namespaces.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#certificates-stores",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "TLSStore",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "tlsstores.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "tlsstores",
                "singular": "tlsstore",
                "kind": "TLSStore",
                "listKind": "TLSStoreList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "TLSStore is the CRD implementation of a Traefik TLS Store.\nFor the time being, only the TLSStore named default is supported.\nThis means that you cannot have two stores that are named default in different Kubernetes namespaces.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#certificates-stores",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "TLSStoreSpec defines the desired state of a TLSStore.",
                          "type": "object",
                          "properties": {
                            "certificates": {
                              "description": "Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.",
                              "type": "array",
                              "items": {
                                "description": "Certificate holds a secret name for the TLSStore resource.",
                                "type": "object",
                                "required": [
                                  "secretName"
                                ],
                                "properties": {
                                  "secretName": {
                                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "defaultCertificate": {
                              "description": "DefaultCertificate defines the default certificate configuration.",
                              "type": "object",
                              "required": [
                                "secretName"
                              ],
                              "properties": {
                                "secretName": {
                                  "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                  "type": "string"
                                }
                              }
                            },
                            "defaultGeneratedCert": {
                              "description": "DefaultGeneratedCert defines the default generated certificate configuration.",
                              "type": "object",
                              "properties": {
                                "domain": {
                                  "description": "Domain is the domain definition for the DefaultCertificate.",
                                  "type": "object",
                                  "properties": {
                                    "main": {
                                      "description": "Main defines the main domain name.",
                                      "type": "string"
                                    },
                                    "sans": {
                                      "description": "SANs defines the subject alternative domain names.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "resolver": {
                                  "description": "Resolver is the name of the resolver that will be used to issue the DefaultCertificate.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "tlsstores",
                "singular": "tlsstore",
                "kind": "TLSStore",
                "listKind": "TLSStoreList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "TLSStore",
          "apiGroup": "traefik.io",
          "apiKind": "TLSStore",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.TLSStore",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "TLSStoreSpec defines the desired state of a TLSStore.",
                "properties": {
                  "certificates": {
                    "description": "Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.",
                    "type": "array",
                    "items": {
                      "description": "Certificate holds a secret name for the TLSStore resource.",
                      "type": "object",
                      "required": [
                        "secretName"
                      ],
                      "properties": {
                        "secretName": {
                          "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "defaultCertificate": {
                    "description": "DefaultCertificate defines the default certificate configuration.",
                    "type": "object",
                    "required": [
                      "secretName"
                    ],
                    "properties": {
                      "secretName": {
                        "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                        "type": "string"
                      }
                    }
                  },
                  "defaultGeneratedCert": {
                    "description": "DefaultGeneratedCert defines the default generated certificate configuration.",
                    "type": "object",
                    "properties": {
                      "domain": {
                        "description": "Domain is the domain definition for the DefaultCertificate.",
                        "type": "object",
                        "properties": {
                          "main": {
                            "description": "Main defines the main domain name.",
                            "type": "string"
                          },
                          "sans": {
                            "description": "SANs defines the subject alternative domain names.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "resolver": {
                        "description": "Resolver is the name of the resolver that will be used to issue the DefaultCertificate.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "TLSStore is the CRD implementation of a Traefik TLS Store. For the time being, only the TLSStore named default is supported. This means that you cannot have two stores that are named default in different Kubernetes namespaces. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#certificates-stores",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "TLSStore",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "tlsstores.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "tlsstores",
                "singular": "tlsstore",
                "kind": "TLSStore",
                "listKind": "TLSStoreList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "TLSStore is the CRD implementation of a Traefik TLS Store. For the time being, only the TLSStore named default is supported. This means that you cannot have two stores that are named default in different Kubernetes namespaces. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#certificates-stores",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "TLSStoreSpec defines the desired state of a TLSStore.",
                          "type": "object",
                          "properties": {
                            "certificates": {
                              "description": "Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.",
                              "type": "array",
                              "items": {
                                "description": "Certificate holds a secret name for the TLSStore resource.",
                                "type": "object",
                                "required": [
                                  "secretName"
                                ],
                                "properties": {
                                  "secretName": {
                                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "defaultCertificate": {
                              "description": "DefaultCertificate defines the default certificate configuration.",
                              "type": "object",
                              "required": [
                                "secretName"
                              ],
                              "properties": {
                                "secretName": {
                                  "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                  "type": "string"
                                }
                              }
                            },
                            "defaultGeneratedCert": {
                              "description": "DefaultGeneratedCert defines the default generated certificate configuration.",
                              "type": "object",
                              "properties": {
                                "domain": {
                                  "description": "Domain is the domain definition for the DefaultCertificate.",
                                  "type": "object",
                                  "properties": {
                                    "main": {
                                      "description": "Main defines the main domain name.",
                                      "type": "string"
                                    },
                                    "sans": {
                                      "description": "SANs defines the subject alternative domain names.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "resolver": {
                                  "description": "Resolver is the name of the resolver that will be used to issue the DefaultCertificate.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "tlsstores",
                "singular": "tlsstore",
                "kind": "TLSStore",
                "listKind": "TLSStoreList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "TLSStore",
          "apiGroup": "traefik.containo.us",
          "apiKind": "TLSStore",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.TLSStore",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "TLSStoreSpec defines the desired state of a TLSStore.",
            "properties": {
              "certificates": {
                "description": "Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.",
                "type": "array",
                "items": {
                  "description": "Certificate holds a secret name for the TLSStore resource.",
                  "type": "object",
                  "required": [
                    "secretName"
                  ],
                  "properties": {
                    "secretName": {
                      "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                      "type": "string"
                    }
                  }
                }
              },
              "defaultCertificate": {
                "description": "DefaultCertificate defines the default certificate configuration.",
                "type": "object",
                "required": [
                  "secretName"
                ],
                "properties": {
                  "secretName": {
                    "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                    "type": "string"
                  }
                }
              },
              "defaultGeneratedCert": {
                "description": "DefaultGeneratedCert defines the default generated certificate configuration.",
                "type": "object",
                "properties": {
                  "domain": {
                    "description": "Domain is the domain definition for the DefaultCertificate.",
                    "type": "object",
                    "properties": {
                      "main": {
                        "description": "Main defines the main domain name.",
                        "type": "string"
                      },
                      "sans": {
                        "description": "SANs defines the subject alternative domain names.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "resolver": {
                    "description": "Resolver is the name of the resolver that will be used to issue the DefaultCertificate.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "TLSStore is the CRD implementation of a Traefik TLS Store.\nFor the time being, only the TLSStore named default is supported.\nThis means that you cannot have two stores that are named default in different Kubernetes namespaces.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#certificates-stores",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "TLSStore",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "tlsstores.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "tlsstores",
            "singular": "tlsstore",
            "kind": "TLSStore",
            "listKind": "TLSStoreList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "TLSStore is the CRD implementation of a Traefik TLS Store.\nFor the time being, only the TLSStore named default is supported.\nThis means that you cannot have two stores that are named default in different Kubernetes namespaces.\nMore info: https://doc.traefik.io/traefik/v3.0/https/tls/#certificates-stores",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "TLSStoreSpec defines the desired state of a TLSStore.",
                      "type": "object",
                      "properties": {
                        "certificates": {
                          "description": "Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.",
                          "type": "array",
                          "items": {
                            "description": "Certificate holds a secret name for the TLSStore resource.",
                            "type": "object",
                            "required": [
                              "secretName"
                            ],
                            "properties": {
                              "secretName": {
                                "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "defaultCertificate": {
                          "description": "DefaultCertificate defines the default certificate configuration.",
                          "type": "object",
                          "required": [
                            "secretName"
                          ],
                          "properties": {
                            "secretName": {
                              "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                              "type": "string"
                            }
                          }
                        },
                        "defaultGeneratedCert": {
                          "description": "DefaultGeneratedCert defines the default generated certificate configuration.",
                          "type": "object",
                          "properties": {
                            "domain": {
                              "description": "Domain is the domain definition for the DefaultCertificate.",
                              "type": "object",
                              "properties": {
                                "main": {
                                  "description": "Main defines the main domain name.",
                                  "type": "string"
                                },
                                "sans": {
                                  "description": "SANs defines the subject alternative domain names.",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "resolver": {
                              "description": "Resolver is the name of the resolver that will be used to issue the DefaultCertificate.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "tlsstores",
            "singular": "tlsstore",
            "kind": "TLSStore",
            "listKind": "TLSStoreList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "TLSStore",
      "apiGroup": "traefik.io",
      "apiKind": "TLSStore",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [
        {
          "name": "io.traefik.v1alpha1.TraefikService",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "TraefikServiceSpec defines the desired state of a TraefikService.",
                "properties": {
                  "mirroring": {
                    "description": "Mirroring defines the Mirroring service configuration.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "kind": {
                        "description": "Kind defines the kind of the Service.",
                        "type": "string",
                        "enum": [
                          "Service",
                          "TraefikService"
                        ]
                      },
                      "maxBodySize": {
                        "description": "MaxBodySize defines the maximum size allowed for the body of the request.\nIf the body is larger, the request is not mirrored.\nDefault value is -1, which means unlimited size.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "mirrors": {
                        "description": "Mirrors defines the list of mirrors where Traefik will duplicate the traffic.",
                        "type": "array",
                        "items": {
                          "description": "MirrorService holds the mirror configuration.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "kind": {
                              "description": "Kind defines the kind of the Service.",
                              "type": "string",
                              "enum": [
                                "Service",
                                "TraefikService"
                              ]
                            },
                            "name": {
                              "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                              "type": "string"
                            },
                            "nativeLB": {
                              "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                              "type": "boolean"
                            },
                            "passHostHeader": {
                              "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                              "type": "boolean"
                            },
                            "percent": {
                              "description": "Percent defines the part of the traffic to mirror.\nSupported values: 0 to 100.",
                              "type": "integer"
                            },
                            "port": {
                              "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "responseForwarding": {
                              "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                              "type": "object",
                              "properties": {
                                "flushInterval": {
                                  "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                  "type": "string"
                                }
                              }
                            },
                            "scheme": {
                              "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                              "type": "string"
                            },
                            "serversTransport": {
                              "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                              "type": "string"
                            },
                            "sticky": {
                              "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                              "type": "object",
                              "properties": {
                                "cookie": {
                                  "description": "Cookie defines the sticky cookie configuration.",
                                  "type": "object",
                                  "properties": {
                                    "httpOnly": {
                                      "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                      "type": "boolean"
                                    },
                                    "maxAge": {
                                      "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name defines the Cookie name.",
                                      "type": "string"
                                    },
                                    "sameSite": {
                                      "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                      "type": "string"
                                    },
                                    "secure": {
                                      "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "strategy": {
                              "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                              "type": "string"
                            },
                            "weight": {
                              "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                              "type": "integer"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                        "type": "string"
                      },
                      "nativeLB": {
                        "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                        "type": "boolean"
                      },
                      "passHostHeader": {
                        "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                        "type": "boolean"
                      },
                      "port": {
                        "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "responseForwarding": {
                        "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                        "type": "object",
                        "properties": {
                          "flushInterval": {
                            "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                            "type": "string"
                          }
                        }
                      },
                      "scheme": {
                        "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                        "type": "string"
                      },
                      "serversTransport": {
                        "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                        "type": "string"
                      },
                      "sticky": {
                        "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                        "type": "object",
                        "properties": {
                          "cookie": {
                            "description": "Cookie defines the sticky cookie configuration.",
                            "type": "object",
                            "properties": {
                              "httpOnly": {
                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                "type": "boolean"
                              },
                              "maxAge": {
                                "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name defines the Cookie name.",
                                "type": "string"
                              },
                              "sameSite": {
                                "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                "type": "string"
                              },
                              "secure": {
                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "strategy": {
                        "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                        "type": "string"
                      },
                      "weight": {
                        "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                        "type": "integer"
                      }
                    }
                  },
                  "weighted": {
                    "description": "Weighted defines the Weighted Round Robin configuration.",
                    "type": "object",
                    "properties": {
                      "services": {
                        "description": "Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.",
                        "type": "array",
                        "items": {
                          "description": "Service defines an upstream HTTP service to proxy traffic to.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "kind": {
                              "description": "Kind defines the kind of the Service.",
                              "type": "string",
                              "enum": [
                                "Service",
                                "TraefikService"
                              ]
                            },
                            "name": {
                              "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                              "type": "string"
                            },
                            "nativeLB": {
                              "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                              "type": "boolean"
                            },
                            "passHostHeader": {
                              "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                              "type": "boolean"
                            },
                            "port": {
                              "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "responseForwarding": {
                              "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                              "type": "object",
                              "properties": {
                                "flushInterval": {
                                  "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                  "type": "string"
                                }
                              }
                            },
                            "scheme": {
                              "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                              "type": "string"
                            },
                            "serversTransport": {
                              "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                              "type": "string"
                            },
                            "sticky": {
                              "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                              "type": "object",
                              "properties": {
                                "cookie": {
                                  "description": "Cookie defines the sticky cookie configuration.",
                                  "type": "object",
                                  "properties": {
                                    "httpOnly": {
                                      "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                      "type": "boolean"
                                    },
                                    "maxAge": {
                                      "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name defines the Cookie name.",
                                      "type": "string"
                                    },
                                    "sameSite": {
                                      "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                      "type": "string"
                                    },
                                    "secure": {
                                      "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "strategy": {
                              "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                              "type": "string"
                            },
                            "weight": {
                              "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                              "type": "integer"
                            }
                          }
                        }
                      },
                      "sticky": {
                        "description": "Sticky defines whether sticky sessions are enabled.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing",
                        "type": "object",
                        "properties": {
                          "cookie": {
                            "description": "Cookie defines the sticky cookie configuration.",
                            "type": "object",
                            "properties": {
                              "httpOnly": {
                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                "type": "boolean"
                              },
                              "maxAge": {
                                "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name defines the Cookie name.",
                                "type": "string"
                              },
                              "sameSite": {
                                "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                "type": "string"
                              },
                              "secure": {
                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "TraefikService is the CRD implementation of a Traefik Service.\nTraefikService object allows to:\n- Apply weight to Services on load-balancing\n- Mirror traffic on services\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-traefikservice",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.io",
                "kind": "TraefikService",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "traefikservices.traefik.io"
            },
            "spec": {
              "group": "traefik.io",
              "names": {
                "plural": "traefikservices",
                "singular": "traefikservice",
                "kind": "TraefikService",
                "listKind": "TraefikServiceList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "TraefikService is the CRD implementation of a Traefik Service.\nTraefikService object allows to:\n- Apply weight to Services on load-balancing\n- Mirror traffic on services\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-traefikservice",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "TraefikServiceSpec defines the desired state of a TraefikService.",
                          "type": "object",
                          "properties": {
                            "mirroring": {
                              "description": "Mirroring defines the Mirroring service configuration.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "kind": {
                                  "description": "Kind defines the kind of the Service.",
                                  "type": "string",
                                  "enum": [
                                    "Service",
                                    "TraefikService"
                                  ]
                                },
                                "maxBodySize": {
                                  "description": "MaxBodySize defines the maximum size allowed for the body of the request.\nIf the body is larger, the request is not mirrored.\nDefault value is -1, which means unlimited size.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "mirrors": {
                                  "description": "Mirrors defines the list of mirrors where Traefik will duplicate the traffic.",
                                  "type": "array",
                                  "items": {
                                    "description": "MirrorService holds the mirror configuration.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "kind": {
                                        "description": "Kind defines the kind of the Service.",
                                        "type": "string",
                                        "enum": [
                                          "Service",
                                          "TraefikService"
                                        ]
                                      },
                                      "name": {
                                        "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                        "type": "string"
                                      },
                                      "nativeLB": {
                                        "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                        "type": "boolean"
                                      },
                                      "passHostHeader": {
                                        "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                        "type": "boolean"
                                      },
                                      "percent": {
                                        "description": "Percent defines the part of the traffic to mirror.\nSupported values: 0 to 100.",
                                        "type": "integer"
                                      },
                                      "port": {
                                        "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "responseForwarding": {
                                        "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                        "type": "object",
                                        "properties": {
                                          "flushInterval": {
                                            "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "scheme": {
                                        "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                        "type": "string"
                                      },
                                      "serversTransport": {
                                        "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                        "type": "string"
                                      },
                                      "sticky": {
                                        "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                        "type": "object",
                                        "properties": {
                                          "cookie": {
                                            "description": "Cookie defines the sticky cookie configuration.",
                                            "type": "object",
                                            "properties": {
                                              "httpOnly": {
                                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                                "type": "boolean"
                                              },
                                              "maxAge": {
                                                "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                                "type": "integer"
                                              },
                                              "name": {
                                                "description": "Name defines the Cookie name.",
                                                "type": "string"
                                              },
                                              "sameSite": {
                                                "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                                "type": "string"
                                              },
                                              "secure": {
                                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                                "type": "boolean"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "strategy": {
                                        "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                        "type": "string"
                                      },
                                      "weight": {
                                        "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                        "type": "integer"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                  "type": "string"
                                },
                                "nativeLB": {
                                  "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                  "type": "boolean"
                                },
                                "passHostHeader": {
                                  "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                  "type": "boolean"
                                },
                                "port": {
                                  "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "responseForwarding": {
                                  "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                  "type": "object",
                                  "properties": {
                                    "flushInterval": {
                                      "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                      "type": "string"
                                    }
                                  }
                                },
                                "scheme": {
                                  "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                  "type": "string"
                                },
                                "serversTransport": {
                                  "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                  "type": "string"
                                },
                                "sticky": {
                                  "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                  "type": "object",
                                  "properties": {
                                    "cookie": {
                                      "description": "Cookie defines the sticky cookie configuration.",
                                      "type": "object",
                                      "properties": {
                                        "httpOnly": {
                                          "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                          "type": "boolean"
                                        },
                                        "maxAge": {
                                          "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                          "type": "integer"
                                        },
                                        "name": {
                                          "description": "Name defines the Cookie name.",
                                          "type": "string"
                                        },
                                        "sameSite": {
                                          "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                          "type": "string"
                                        },
                                        "secure": {
                                          "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                },
                                "strategy": {
                                  "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                  "type": "string"
                                },
                                "weight": {
                                  "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                  "type": "integer"
                                }
                              }
                            },
                            "weighted": {
                              "description": "Weighted defines the Weighted Round Robin configuration.",
                              "type": "object",
                              "properties": {
                                "services": {
                                  "description": "Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.",
                                  "type": "array",
                                  "items": {
                                    "description": "Service defines an upstream HTTP service to proxy traffic to.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "kind": {
                                        "description": "Kind defines the kind of the Service.",
                                        "type": "string",
                                        "enum": [
                                          "Service",
                                          "TraefikService"
                                        ]
                                      },
                                      "name": {
                                        "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                        "type": "string"
                                      },
                                      "nativeLB": {
                                        "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                        "type": "boolean"
                                      },
                                      "passHostHeader": {
                                        "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                        "type": "boolean"
                                      },
                                      "port": {
                                        "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "responseForwarding": {
                                        "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                        "type": "object",
                                        "properties": {
                                          "flushInterval": {
                                            "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "scheme": {
                                        "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                        "type": "string"
                                      },
                                      "serversTransport": {
                                        "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                        "type": "string"
                                      },
                                      "sticky": {
                                        "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                        "type": "object",
                                        "properties": {
                                          "cookie": {
                                            "description": "Cookie defines the sticky cookie configuration.",
                                            "type": "object",
                                            "properties": {
                                              "httpOnly": {
                                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                                "type": "boolean"
                                              },
                                              "maxAge": {
                                                "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                                "type": "integer"
                                              },
                                              "name": {
                                                "description": "Name defines the Cookie name.",
                                                "type": "string"
                                              },
                                              "sameSite": {
                                                "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                                "type": "string"
                                              },
                                              "secure": {
                                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                                "type": "boolean"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "strategy": {
                                        "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                        "type": "string"
                                      },
                                      "weight": {
                                        "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                        "type": "integer"
                                      }
                                    }
                                  }
                                },
                                "sticky": {
                                  "description": "Sticky defines whether sticky sessions are enabled.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing",
                                  "type": "object",
                                  "properties": {
                                    "cookie": {
                                      "description": "Cookie defines the sticky cookie configuration.",
                                      "type": "object",
                                      "properties": {
                                        "httpOnly": {
                                          "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                          "type": "boolean"
                                        },
                                        "maxAge": {
                                          "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                          "type": "integer"
                                        },
                                        "name": {
                                          "description": "Name defines the Cookie name.",
                                          "type": "string"
                                        },
                                        "sameSite": {
                                          "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                          "type": "string"
                                        },
                                        "secure": {
                                          "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "traefikservices",
                "singular": "traefikservice",
                "kind": "TraefikService",
                "listKind": "TraefikServiceList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "TraefikService",
          "apiGroup": "traefik.io",
          "apiKind": "TraefikService",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        },
        {
          "name": "us.containo.traefik.v1alpha1.TraefikService",
          "definition": {
            "properties": {
              "metadata": {
                "type": "object"
              },
              "spec": {
                "type": "object",
                "description": "TraefikServiceSpec defines the desired state of a TraefikService.",
                "properties": {
                  "mirroring": {
                    "description": "Mirroring defines the Mirroring service configuration.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "kind": {
                        "description": "Kind defines the kind of the Service.",
                        "type": "string",
                        "enum": [
                          "Service",
                          "TraefikService"
                        ]
                      },
                      "maxBodySize": {
                        "description": "MaxBodySize defines the maximum size allowed for the body of the request. If the body is larger, the request is not mirrored. Default value is -1, which means unlimited size.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "mirrors": {
                        "description": "Mirrors defines the list of mirrors where Traefik will duplicate the traffic.",
                        "type": "array",
                        "items": {
                          "description": "MirrorService holds the mirror configuration.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "kind": {
                              "description": "Kind defines the kind of the Service.",
                              "type": "string",
                              "enum": [
                                "Service",
                                "TraefikService"
                              ]
                            },
                            "name": {
                              "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                              "type": "string"
                            },
                            "nativeLB": {
                              "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                              "type": "boolean"
                            },
                            "passHostHeader": {
                              "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                              "type": "boolean"
                            },
                            "percent": {
                              "description": "Percent defines the part of the traffic to mirror. Supported values: 0 to 100.",
                              "type": "integer"
                            },
                            "port": {
                              "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "responseForwarding": {
                              "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                              "type": "object",
                              "properties": {
                                "flushInterval": {
                                  "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                  "type": "string"
                                }
                              }
                            },
                            "scheme": {
                              "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                              "type": "string"
                            },
                            "serversTransport": {
                              "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                              "type": "string"
                            },
                            "sticky": {
                              "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                              "type": "object",
                              "properties": {
                                "cookie": {
                                  "description": "Cookie defines the sticky cookie configuration.",
                                  "type": "object",
                                  "properties": {
                                    "httpOnly": {
                                      "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "Name defines the Cookie name.",
                                      "type": "string"
                                    },
                                    "sameSite": {
                                      "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                      "type": "string"
                                    },
                                    "secure": {
                                      "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "strategy": {
                              "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                              "type": "string"
                            },
                            "weight": {
                              "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                              "type": "integer"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                        "type": "string"
                      },
                      "namespace": {
                        "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                        "type": "string"
                      },
                      "nativeLB": {
                        "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                        "type": "boolean"
                      },
                      "passHostHeader": {
                        "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                        "type": "boolean"
                      },
                      "port": {
                        "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                        "x-kubernetes-int-or-string": true,
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "responseForwarding": {
                        "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                        "type": "object",
                        "properties": {
                          "flushInterval": {
                            "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                            "type": "string"
                          }
                        }
                      },
                      "scheme": {
                        "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                        "type": "string"
                      },
                      "serversTransport": {
                        "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                        "type": "string"
                      },
                      "sticky": {
                        "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                        "type": "object",
                        "properties": {
                          "cookie": {
                            "description": "Cookie defines the sticky cookie configuration.",
                            "type": "object",
                            "properties": {
                              "httpOnly": {
                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "Name defines the Cookie name.",
                                "type": "string"
                              },
                              "sameSite": {
                                "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                "type": "string"
                              },
                              "secure": {
                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "strategy": {
                        "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                        "type": "string"
                      },
                      "weight": {
                        "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                        "type": "integer"
                      }
                    }
                  },
                  "weighted": {
                    "description": "Weighted defines the Weighted Round Robin configuration.",
                    "type": "object",
                    "properties": {
                      "services": {
                        "description": "Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.",
                        "type": "array",
                        "items": {
                          "description": "Service defines an upstream HTTP service to proxy traffic to.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "kind": {
                              "description": "Kind defines the kind of the Service.",
                              "type": "string",
                              "enum": [
                                "Service",
                                "TraefikService"
                              ]
                            },
                            "name": {
                              "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                              "type": "string"
                            },
                            "nativeLB": {
                              "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                              "type": "boolean"
                            },
                            "passHostHeader": {
                              "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                              "type": "boolean"
                            },
                            "port": {
                              "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                              "x-kubernetes-int-or-string": true,
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "responseForwarding": {
                              "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                              "type": "object",
                              "properties": {
                                "flushInterval": {
                                  "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                  "type": "string"
                                }
                              }
                            },
                            "scheme": {
                              "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                              "type": "string"
                            },
                            "serversTransport": {
                              "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                              "type": "string"
                            },
                            "sticky": {
                              "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                              "type": "object",
                              "properties": {
                                "cookie": {
                                  "description": "Cookie defines the sticky cookie configuration.",
                                  "type": "object",
                                  "properties": {
                                    "httpOnly": {
                                      "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "description": "Name defines the Cookie name.",
                                      "type": "string"
                                    },
                                    "sameSite": {
                                      "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                      "type": "string"
                                    },
                                    "secure": {
                                      "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "strategy": {
                              "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                              "type": "string"
                            },
                            "weight": {
                              "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                              "type": "integer"
                            }
                          }
                        }
                      },
                      "sticky": {
                        "description": "Sticky defines whether sticky sessions are enabled. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#stickiness-and-load-balancing",
                        "type": "object",
                        "properties": {
                          "cookie": {
                            "description": "Cookie defines the sticky cookie configuration.",
                            "type": "object",
                            "properties": {
                              "httpOnly": {
                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "Name defines the Cookie name.",
                                "type": "string"
                              },
                              "sameSite": {
                                "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                "type": "string"
                              },
                              "secure": {
                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "apiVersion": {
                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                "type": "string"
              },
              "kind": {
                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              }
            },
            "description": "TraefikService is the CRD implementation of a Traefik Service. TraefikService object allows to: - Apply weight to Services on load-balancing - Mirror traffic on services More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-traefikservice",
            "type": "object",
            "required": [
              "metadata",
              "spec"
            ],
            "x-kubernetes-group-version-kind": [
              {
                "group": "traefik.containo.us",
                "kind": "TraefikService",
                "version": "v1alpha1"
              }
            ]
          },
          "crd": {
            "metadata": {
              "name": "traefikservices.traefik.containo.us"
            },
            "spec": {
              "group": "traefik.containo.us",
              "names": {
                "plural": "traefikservices",
                "singular": "traefikservice",
                "kind": "TraefikService",
                "listKind": "TraefikServiceList"
              },
              "scope": "Namespaced",
              "versions": [
                {
                  "name": "v1alpha1",
                  "served": true,
                  "storage": true,
                  "schema": {
                    "openAPIV3Schema": {
                      "description": "TraefikService is the CRD implementation of a Traefik Service. TraefikService object allows to: - Apply weight to Services on load-balancing - Mirror traffic on services More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-traefikservice",
                      "type": "object",
                      "required": [
                        "metadata",
                        "spec"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                          "type": "string"
                        },
                        "kind": {
                          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object"
                        },
                        "spec": {
                          "description": "TraefikServiceSpec defines the desired state of a TraefikService.",
                          "type": "object",
                          "properties": {
                            "mirroring": {
                              "description": "Mirroring defines the Mirroring service configuration.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "kind": {
                                  "description": "Kind defines the kind of the Service.",
                                  "type": "string",
                                  "enum": [
                                    "Service",
                                    "TraefikService"
                                  ]
                                },
                                "maxBodySize": {
                                  "description": "MaxBodySize defines the maximum size allowed for the body of the request. If the body is larger, the request is not mirrored. Default value is -1, which means unlimited size.",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "mirrors": {
                                  "description": "Mirrors defines the list of mirrors where Traefik will duplicate the traffic.",
                                  "type": "array",
                                  "items": {
                                    "description": "MirrorService holds the mirror configuration.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "kind": {
                                        "description": "Kind defines the kind of the Service.",
                                        "type": "string",
                                        "enum": [
                                          "Service",
                                          "TraefikService"
                                        ]
                                      },
                                      "name": {
                                        "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                        "type": "string"
                                      },
                                      "nativeLB": {
                                        "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                        "type": "boolean"
                                      },
                                      "passHostHeader": {
                                        "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                                        "type": "boolean"
                                      },
                                      "percent": {
                                        "description": "Percent defines the part of the traffic to mirror. Supported values: 0 to 100.",
                                        "type": "integer"
                                      },
                                      "port": {
                                        "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "responseForwarding": {
                                        "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                        "type": "object",
                                        "properties": {
                                          "flushInterval": {
                                            "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "scheme": {
                                        "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                                        "type": "string"
                                      },
                                      "serversTransport": {
                                        "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                                        "type": "string"
                                      },
                                      "sticky": {
                                        "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                                        "type": "object",
                                        "properties": {
                                          "cookie": {
                                            "description": "Cookie defines the sticky cookie configuration.",
                                            "type": "object",
                                            "properties": {
                                              "httpOnly": {
                                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                                "type": "boolean"
                                              },
                                              "name": {
                                                "description": "Name defines the Cookie name.",
                                                "type": "string"
                                              },
                                              "sameSite": {
                                                "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                                "type": "string"
                                              },
                                              "secure": {
                                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                                "type": "boolean"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "strategy": {
                                        "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                                        "type": "string"
                                      },
                                      "weight": {
                                        "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                        "type": "integer"
                                      }
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                  "type": "string"
                                },
                                "nativeLB": {
                                  "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                  "type": "boolean"
                                },
                                "passHostHeader": {
                                  "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                                  "type": "boolean"
                                },
                                "port": {
                                  "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "responseForwarding": {
                                  "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                  "type": "object",
                                  "properties": {
                                    "flushInterval": {
                                      "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                      "type": "string"
                                    }
                                  }
                                },
                                "scheme": {
                                  "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                                  "type": "string"
                                },
                                "serversTransport": {
                                  "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                                  "type": "string"
                                },
                                "sticky": {
                                  "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                                  "type": "object",
                                  "properties": {
                                    "cookie": {
                                      "description": "Cookie defines the sticky cookie configuration.",
                                      "type": "object",
                                      "properties": {
                                        "httpOnly": {
                                          "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                          "type": "boolean"
                                        },
                                        "name": {
                                          "description": "Name defines the Cookie name.",
                                          "type": "string"
                                        },
                                        "sameSite": {
                                          "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                          "type": "string"
                                        },
                                        "secure": {
                                          "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                },
                                "strategy": {
                                  "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                                  "type": "string"
                                },
                                "weight": {
                                  "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                  "type": "integer"
                                }
                              }
                            },
                            "weighted": {
                              "description": "Weighted defines the Weighted Round Robin configuration.",
                              "type": "object",
                              "properties": {
                                "services": {
                                  "description": "Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.",
                                  "type": "array",
                                  "items": {
                                    "description": "Service defines an upstream HTTP service to proxy traffic to.",
                                    "type": "object",
                                    "required": [
                                      "name"
                                    ],
                                    "properties": {
                                      "kind": {
                                        "description": "Kind defines the kind of the Service.",
                                        "type": "string",
                                        "enum": [
                                          "Service",
                                          "TraefikService"
                                        ]
                                      },
                                      "name": {
                                        "description": "Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.",
                                        "type": "string"
                                      },
                                      "namespace": {
                                        "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                        "type": "string"
                                      },
                                      "nativeLB": {
                                        "description": "NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.",
                                        "type": "boolean"
                                      },
                                      "passHostHeader": {
                                        "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.",
                                        "type": "boolean"
                                      },
                                      "port": {
                                        "description": "Port defines the port of a Kubernetes Service. This can be a reference to a named port.",
                                        "anyOf": [
                                          {
                                            "type": "integer"
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "x-kubernetes-int-or-string": true
                                      },
                                      "responseForwarding": {
                                        "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                        "type": "object",
                                        "properties": {
                                          "flushInterval": {
                                            "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms",
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "scheme": {
                                        "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.",
                                        "type": "string"
                                      },
                                      "serversTransport": {
                                        "description": "ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.",
                                        "type": "string"
                                      },
                                      "sticky": {
                                        "description": "Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions",
                                        "type": "object",
                                        "properties": {
                                          "cookie": {
                                            "description": "Cookie defines the sticky cookie configuration.",
                                            "type": "object",
                                            "properties": {
                                              "httpOnly": {
                                                "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                                "type": "boolean"
                                              },
                                              "name": {
                                                "description": "Name defines the Cookie name.",
                                                "type": "string"
                                              },
                                              "sameSite": {
                                                "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                                "type": "string"
                                              },
                                              "secure": {
                                                "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                                "type": "boolean"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "strategy": {
                                        "description": "Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.",
                                        "type": "string"
                                      },
                                      "weight": {
                                        "description": "Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                        "type": "integer"
                                      }
                                    }
                                  }
                                },
                                "sticky": {
                                  "description": "Sticky defines whether sticky sessions are enabled. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#stickiness-and-load-balancing",
                                  "type": "object",
                                  "properties": {
                                    "cookie": {
                                      "description": "Cookie defines the sticky cookie configuration.",
                                      "type": "object",
                                      "properties": {
                                        "httpOnly": {
                                          "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                          "type": "boolean"
                                        },
                                        "name": {
                                          "description": "Name defines the Cookie name.",
                                          "type": "string"
                                        },
                                        "sameSite": {
                                          "description": "SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                          "type": "string"
                                        },
                                        "secure": {
                                          "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ],
              "conversion": {}
            },
            "status": {
              "conditions": [],
              "acceptedNames": {
                "plural": "traefikservices",
                "singular": "traefikservice",
                "kind": "TraefikService",
                "listKind": "TraefikServiceList"
              },
              "storedVersions": [
                "v1alpha1"
              ]
            }
          },
          "short": "TraefikService",
          "apiGroup": "traefik.containo.us",
          "apiKind": "TraefikService",
          "apiVersion": "v1alpha1",
          "readProperties": {
            "spec": "spec"
          },
          "writeProperties": {
            "spec": "spec"
          },
          "group": "traefik",
          "sub": "traefik",
          "listExcludes": [],
          "readExcludes": [],
          "simpleExcludes": [],
          "gqlDefs": {
            "metadata": "metadata!",
            "spec": "JSONObject"
          },
          "namespaced": true
        }
      ],
      "name": "io.traefik.v1alpha1.TraefikService",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "TraefikServiceSpec defines the desired state of a TraefikService.",
            "properties": {
              "mirroring": {
                "description": "Mirroring defines the Mirroring service configuration.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "kind": {
                    "description": "Kind defines the kind of the Service.",
                    "type": "string",
                    "enum": [
                      "Service",
                      "TraefikService"
                    ]
                  },
                  "maxBodySize": {
                    "description": "MaxBodySize defines the maximum size allowed for the body of the request.\nIf the body is larger, the request is not mirrored.\nDefault value is -1, which means unlimited size.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "mirrors": {
                    "description": "Mirrors defines the list of mirrors where Traefik will duplicate the traffic.",
                    "type": "array",
                    "items": {
                      "description": "MirrorService holds the mirror configuration.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "kind": {
                          "description": "Kind defines the kind of the Service.",
                          "type": "string",
                          "enum": [
                            "Service",
                            "TraefikService"
                          ]
                        },
                        "name": {
                          "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                          "type": "string"
                        },
                        "nativeLB": {
                          "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                          "type": "boolean"
                        },
                        "passHostHeader": {
                          "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                          "type": "boolean"
                        },
                        "percent": {
                          "description": "Percent defines the part of the traffic to mirror.\nSupported values: 0 to 100.",
                          "type": "integer"
                        },
                        "port": {
                          "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                          "x-kubernetes-int-or-string": true,
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "responseForwarding": {
                          "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                          "type": "object",
                          "properties": {
                            "flushInterval": {
                              "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                              "type": "string"
                            }
                          }
                        },
                        "scheme": {
                          "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                          "type": "string"
                        },
                        "serversTransport": {
                          "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                          "type": "string"
                        },
                        "sticky": {
                          "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                          "type": "object",
                          "properties": {
                            "cookie": {
                              "description": "Cookie defines the sticky cookie configuration.",
                              "type": "object",
                              "properties": {
                                "httpOnly": {
                                  "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                  "type": "boolean"
                                },
                                "maxAge": {
                                  "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "Name defines the Cookie name.",
                                  "type": "string"
                                },
                                "sameSite": {
                                  "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                  "type": "string"
                                },
                                "secure": {
                                  "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        },
                        "strategy": {
                          "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                          "type": "string"
                        },
                        "weight": {
                          "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "name": {
                    "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                    "type": "string"
                  },
                  "nativeLB": {
                    "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                    "type": "boolean"
                  },
                  "passHostHeader": {
                    "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                    "type": "boolean"
                  },
                  "port": {
                    "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                    "x-kubernetes-int-or-string": true,
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "responseForwarding": {
                    "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                    "type": "object",
                    "properties": {
                      "flushInterval": {
                        "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                        "type": "string"
                      }
                    }
                  },
                  "scheme": {
                    "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                    "type": "string"
                  },
                  "serversTransport": {
                    "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                    "type": "string"
                  },
                  "sticky": {
                    "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                    "type": "object",
                    "properties": {
                      "cookie": {
                        "description": "Cookie defines the sticky cookie configuration.",
                        "type": "object",
                        "properties": {
                          "httpOnly": {
                            "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                            "type": "boolean"
                          },
                          "maxAge": {
                            "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name defines the Cookie name.",
                            "type": "string"
                          },
                          "sameSite": {
                            "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                            "type": "string"
                          },
                          "secure": {
                            "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                    "type": "string"
                  },
                  "weight": {
                    "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                    "type": "integer"
                  }
                }
              },
              "weighted": {
                "description": "Weighted defines the Weighted Round Robin configuration.",
                "type": "object",
                "properties": {
                  "services": {
                    "description": "Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.",
                    "type": "array",
                    "items": {
                      "description": "Service defines an upstream HTTP service to proxy traffic to.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "kind": {
                          "description": "Kind defines the kind of the Service.",
                          "type": "string",
                          "enum": [
                            "Service",
                            "TraefikService"
                          ]
                        },
                        "name": {
                          "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                          "type": "string"
                        },
                        "nativeLB": {
                          "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                          "type": "boolean"
                        },
                        "passHostHeader": {
                          "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                          "type": "boolean"
                        },
                        "port": {
                          "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                          "x-kubernetes-int-or-string": true,
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "responseForwarding": {
                          "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                          "type": "object",
                          "properties": {
                            "flushInterval": {
                              "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                              "type": "string"
                            }
                          }
                        },
                        "scheme": {
                          "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                          "type": "string"
                        },
                        "serversTransport": {
                          "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                          "type": "string"
                        },
                        "sticky": {
                          "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                          "type": "object",
                          "properties": {
                            "cookie": {
                              "description": "Cookie defines the sticky cookie configuration.",
                              "type": "object",
                              "properties": {
                                "httpOnly": {
                                  "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                  "type": "boolean"
                                },
                                "maxAge": {
                                  "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "Name defines the Cookie name.",
                                  "type": "string"
                                },
                                "sameSite": {
                                  "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                  "type": "string"
                                },
                                "secure": {
                                  "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        },
                        "strategy": {
                          "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                          "type": "string"
                        },
                        "weight": {
                          "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "sticky": {
                    "description": "Sticky defines whether sticky sessions are enabled.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing",
                    "type": "object",
                    "properties": {
                      "cookie": {
                        "description": "Cookie defines the sticky cookie configuration.",
                        "type": "object",
                        "properties": {
                          "httpOnly": {
                            "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                            "type": "boolean"
                          },
                          "maxAge": {
                            "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name defines the Cookie name.",
                            "type": "string"
                          },
                          "sameSite": {
                            "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                            "type": "string"
                          },
                          "secure": {
                            "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "TraefikService is the CRD implementation of a Traefik Service.\nTraefikService object allows to:\n- Apply weight to Services on load-balancing\n- Mirror traffic on services\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-traefikservice",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "TraefikService",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "traefikservices.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "traefikservices",
            "singular": "traefikservice",
            "kind": "TraefikService",
            "listKind": "TraefikServiceList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "TraefikService is the CRD implementation of a Traefik Service.\nTraefikService object allows to:\n- Apply weight to Services on load-balancing\n- Mirror traffic on services\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-traefikservice",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "TraefikServiceSpec defines the desired state of a TraefikService.",
                      "type": "object",
                      "properties": {
                        "mirroring": {
                          "description": "Mirroring defines the Mirroring service configuration.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "kind": {
                              "description": "Kind defines the kind of the Service.",
                              "type": "string",
                              "enum": [
                                "Service",
                                "TraefikService"
                              ]
                            },
                            "maxBodySize": {
                              "description": "MaxBodySize defines the maximum size allowed for the body of the request.\nIf the body is larger, the request is not mirrored.\nDefault value is -1, which means unlimited size.",
                              "type": "integer",
                              "format": "int64"
                            },
                            "mirrors": {
                              "description": "Mirrors defines the list of mirrors where Traefik will duplicate the traffic.",
                              "type": "array",
                              "items": {
                                "description": "MirrorService holds the mirror configuration.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "kind": {
                                    "description": "Kind defines the kind of the Service.",
                                    "type": "string",
                                    "enum": [
                                      "Service",
                                      "TraefikService"
                                    ]
                                  },
                                  "name": {
                                    "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                    "type": "string"
                                  },
                                  "nativeLB": {
                                    "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                    "type": "boolean"
                                  },
                                  "passHostHeader": {
                                    "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                    "type": "boolean"
                                  },
                                  "percent": {
                                    "description": "Percent defines the part of the traffic to mirror.\nSupported values: 0 to 100.",
                                    "type": "integer"
                                  },
                                  "port": {
                                    "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "responseForwarding": {
                                    "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                    "type": "object",
                                    "properties": {
                                      "flushInterval": {
                                        "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "scheme": {
                                    "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                    "type": "string"
                                  },
                                  "serversTransport": {
                                    "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                    "type": "string"
                                  },
                                  "sticky": {
                                    "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                    "type": "object",
                                    "properties": {
                                      "cookie": {
                                        "description": "Cookie defines the sticky cookie configuration.",
                                        "type": "object",
                                        "properties": {
                                          "httpOnly": {
                                            "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                            "type": "boolean"
                                          },
                                          "maxAge": {
                                            "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "Name defines the Cookie name.",
                                            "type": "string"
                                          },
                                          "sameSite": {
                                            "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                            "type": "string"
                                          },
                                          "secure": {
                                            "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                            "type": "boolean"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "strategy": {
                                    "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                    "type": "string"
                                  },
                                  "weight": {
                                    "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "name": {
                              "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                              "type": "string"
                            },
                            "nativeLB": {
                              "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                              "type": "boolean"
                            },
                            "passHostHeader": {
                              "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                              "type": "boolean"
                            },
                            "port": {
                              "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "x-kubernetes-int-or-string": true
                            },
                            "responseForwarding": {
                              "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                              "type": "object",
                              "properties": {
                                "flushInterval": {
                                  "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                  "type": "string"
                                }
                              }
                            },
                            "scheme": {
                              "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                              "type": "string"
                            },
                            "serversTransport": {
                              "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                              "type": "string"
                            },
                            "sticky": {
                              "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                              "type": "object",
                              "properties": {
                                "cookie": {
                                  "description": "Cookie defines the sticky cookie configuration.",
                                  "type": "object",
                                  "properties": {
                                    "httpOnly": {
                                      "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                      "type": "boolean"
                                    },
                                    "maxAge": {
                                      "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name defines the Cookie name.",
                                      "type": "string"
                                    },
                                    "sameSite": {
                                      "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                      "type": "string"
                                    },
                                    "secure": {
                                      "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            },
                            "strategy": {
                              "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                              "type": "string"
                            },
                            "weight": {
                              "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                              "type": "integer"
                            }
                          }
                        },
                        "weighted": {
                          "description": "Weighted defines the Weighted Round Robin configuration.",
                          "type": "object",
                          "properties": {
                            "services": {
                              "description": "Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.",
                              "type": "array",
                              "items": {
                                "description": "Service defines an upstream HTTP service to proxy traffic to.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "kind": {
                                    "description": "Kind defines the kind of the Service.",
                                    "type": "string",
                                    "enum": [
                                      "Service",
                                      "TraefikService"
                                    ]
                                  },
                                  "name": {
                                    "description": "Name defines the name of the referenced Kubernetes Service or TraefikService.\nThe differentiation between the two is specified in the Kind field.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "description": "Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.",
                                    "type": "string"
                                  },
                                  "nativeLB": {
                                    "description": "NativeLB controls, when creating the load-balancer,\nwhether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.\nThe Kubernetes Service itself does load-balance to the pods.\nBy default, NativeLB is false.",
                                    "type": "boolean"
                                  },
                                  "passHostHeader": {
                                    "description": "PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.\nBy default, passHostHeader is true.",
                                    "type": "boolean"
                                  },
                                  "port": {
                                    "description": "Port defines the port of a Kubernetes Service.\nThis can be a reference to a named port.",
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "responseForwarding": {
                                    "description": "ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.",
                                    "type": "object",
                                    "properties": {
                                      "flushInterval": {
                                        "description": "FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.\nA negative value means to flush immediately after each write to the client.\nThis configuration is ignored when ReverseProxy recognizes a response as a streaming response;\nfor such responses, writes are flushed to the client immediately.\nDefault: 100ms",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "scheme": {
                                    "description": "Scheme defines the scheme to use for the request to the upstream Kubernetes Service.\nIt defaults to https when Kubernetes Service port is 443, http otherwise.",
                                    "type": "string"
                                  },
                                  "serversTransport": {
                                    "description": "ServersTransport defines the name of ServersTransport resource to use.\nIt allows to configure the transport between Traefik and your servers.\nCan only be used on a Kubernetes Service.",
                                    "type": "string"
                                  },
                                  "sticky": {
                                    "description": "Sticky defines the sticky sessions configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions",
                                    "type": "object",
                                    "properties": {
                                      "cookie": {
                                        "description": "Cookie defines the sticky cookie configuration.",
                                        "type": "object",
                                        "properties": {
                                          "httpOnly": {
                                            "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                            "type": "boolean"
                                          },
                                          "maxAge": {
                                            "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "Name defines the Cookie name.",
                                            "type": "string"
                                          },
                                          "sameSite": {
                                            "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                            "type": "string"
                                          },
                                          "secure": {
                                            "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                            "type": "boolean"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "strategy": {
                                    "description": "Strategy defines the load balancing strategy between the servers.\nRoundRobin is the only supported value at the moment.",
                                    "type": "string"
                                  },
                                  "weight": {
                                    "description": "Weight defines the weight and should only be specified when Name references a TraefikService object\n(and to be precise, one that embeds a Weighted Round Robin).",
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "sticky": {
                              "description": "Sticky defines whether sticky sessions are enabled.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing",
                              "type": "object",
                              "properties": {
                                "cookie": {
                                  "description": "Cookie defines the sticky cookie configuration.",
                                  "type": "object",
                                  "properties": {
                                    "httpOnly": {
                                      "description": "HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.",
                                      "type": "boolean"
                                    },
                                    "maxAge": {
                                      "description": "MaxAge indicates the number of seconds until the cookie expires.\nWhen set to a negative number, the cookie expires immediately.\nWhen set to zero, the cookie never expires.",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name defines the Cookie name.",
                                      "type": "string"
                                    },
                                    "sameSite": {
                                      "description": "SameSite defines the same site policy.\nMore info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite",
                                      "type": "string"
                                    },
                                    "secure": {
                                      "description": "Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "traefikservices",
            "singular": "traefikservice",
            "kind": "TraefikService",
            "listKind": "TraefikServiceList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "TraefikService",
      "apiGroup": "traefik.io",
      "apiKind": "TraefikService",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    },
    {
      "alternatives": [],
      "name": "io.traefik.v1alpha1.ServersTransportTCP",
      "definition": {
        "properties": {
          "metadata": {
            "type": "object"
          },
          "spec": {
            "type": "object",
            "description": "ServersTransportTCPSpec defines the desired state of a ServersTransportTCP.",
            "properties": {
              "dialKeepAlive": {
                "description": "DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.",
                "x-kubernetes-int-or-string": true,
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "dialTimeout": {
                "description": "DialTimeout is the amount of time to wait until a connection to a backend server can be established.",
                "x-kubernetes-int-or-string": true,
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "terminationDelay": {
                "description": "TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.",
                "x-kubernetes-int-or-string": true,
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "tls": {
                "description": "TLS defines the TLS configuration",
                "type": "object",
                "properties": {
                  "certificatesSecrets": {
                    "description": "CertificatesSecrets defines a list of secret storing client certificates for mTLS.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "insecureSkipVerify": {
                    "description": "InsecureSkipVerify disables TLS certificate verification.",
                    "type": "boolean"
                  },
                  "peerCertURI": {
                    "description": "MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.\nPeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.",
                    "type": "string"
                  },
                  "rootCAsSecrets": {
                    "description": "RootCAsSecrets defines a list of CA secret used to validate self-signed certificates.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "serverName": {
                    "description": "ServerName defines the server name used to contact the server.",
                    "type": "string"
                  },
                  "spiffe": {
                    "description": "Spiffe defines the SPIFFE configuration.",
                    "type": "object",
                    "properties": {
                      "ids": {
                        "description": "IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "trustDomain": {
                        "description": "TrustDomain defines the allowed SPIFFE trust domain.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          }
        },
        "description": "ServersTransportTCP is the CRD implementation of a TCPServersTransport.\nIf no tcpServersTransport is specified, a default one named default@internal will be used.\nThe default@internal tcpServersTransport can be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#serverstransport_3",
        "type": "object",
        "required": [
          "metadata",
          "spec"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "traefik.io",
            "kind": "ServersTransportTCP",
            "version": "v1alpha1"
          }
        ]
      },
      "crd": {
        "metadata": {
          "name": "serverstransporttcps.traefik.io"
        },
        "spec": {
          "group": "traefik.io",
          "names": {
            "plural": "serverstransporttcps",
            "singular": "serverstransporttcp",
            "kind": "ServersTransportTCP",
            "listKind": "ServersTransportTCPList"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "served": true,
              "storage": true,
              "schema": {
                "openAPIV3Schema": {
                  "description": "ServersTransportTCP is the CRD implementation of a TCPServersTransport.\nIf no tcpServersTransport is specified, a default one named default@internal will be used.\nThe default@internal tcpServersTransport can be configured in the static configuration.\nMore info: https://doc.traefik.io/traefik/v3.0/routing/services/#serverstransport_3",
                  "type": "object",
                  "required": [
                    "metadata",
                    "spec"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "ServersTransportTCPSpec defines the desired state of a ServersTransportTCP.",
                      "type": "object",
                      "properties": {
                        "dialKeepAlive": {
                          "description": "DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "dialTimeout": {
                          "description": "DialTimeout is the amount of time to wait until a connection to a backend server can be established.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "terminationDelay": {
                          "description": "TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.",
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "x-kubernetes-int-or-string": true
                        },
                        "tls": {
                          "description": "TLS defines the TLS configuration",
                          "type": "object",
                          "properties": {
                            "certificatesSecrets": {
                              "description": "CertificatesSecrets defines a list of secret storing client certificates for mTLS.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "insecureSkipVerify": {
                              "description": "InsecureSkipVerify disables TLS certificate verification.",
                              "type": "boolean"
                            },
                            "peerCertURI": {
                              "description": "MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.\nPeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.",
                              "type": "string"
                            },
                            "rootCAsSecrets": {
                              "description": "RootCAsSecrets defines a list of CA secret used to validate self-signed certificates.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "serverName": {
                              "description": "ServerName defines the server name used to contact the server.",
                              "type": "string"
                            },
                            "spiffe": {
                              "description": "Spiffe defines the SPIFFE configuration.",
                              "type": "object",
                              "properties": {
                                "ids": {
                                  "description": "IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).",
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "trustDomain": {
                                  "description": "TrustDomain defines the allowed SPIFFE trust domain.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "conversion": {}
        },
        "status": {
          "conditions": [],
          "acceptedNames": {
            "plural": "serverstransporttcps",
            "singular": "serverstransporttcp",
            "kind": "ServersTransportTCP",
            "listKind": "ServersTransportTCPList"
          },
          "storedVersions": [
            "v1alpha1"
          ]
        }
      },
      "short": "ServersTransportTCP",
      "apiGroup": "traefik.io",
      "apiKind": "ServersTransportTCP",
      "apiVersion": "v1alpha1",
      "readProperties": {
        "spec": "spec"
      },
      "writeProperties": {
        "spec": "spec"
      },
      "group": "traefik",
      "sub": "traefik",
      "listExcludes": [],
      "readExcludes": [],
      "simpleExcludes": [],
      "gqlDefs": {
        "metadata": "metadata!",
        "spec": "JSONObject"
      },
      "namespaced": true
    }
  ]
}