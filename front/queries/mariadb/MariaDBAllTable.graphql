
query MariadbMariaDBs {
 namespaces {
  mariadbMariaDBs {
    metadata {
      annotations {
        name
        value
      }
      labels {
        name
        value
      }
      name
      namespace
    }
    affinity {
      nodeAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          preference {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          nodeSelectorTerms {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
        }
      }
      podAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          podAffinityTerm {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaceSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaces
            topologyKey
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          labelSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaceSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaces
          topologyKey
        }
      }
      podAntiAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          podAffinityTerm {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaceSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaces
            topologyKey
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          labelSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaceSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaces
          topologyKey
        }
      }
    }
    args
    bootstrapFrom {
      backupRef {
        name
      }
      fileName
      volume {
        awsElasticBlockStore {
          fsType
          partition
          readOnly
          volumeID
        }
        azureDisk {
          cachingMode
          diskName
          diskURI
          fsType
          kind
          readOnly
        }
        azureFile {
          readOnly
          secretName
          shareName
        }
        cephfs {
          monitors
          path
          readOnly
          secretFile
          secretRef {
            name
          }
          user
        }
        cinder {
          fsType
          readOnly
          secretRef {
            name
          }
          volumeID
        }
        configMap {
          defaultMode
          items {
            key
            mode
            path
          }
          name
          optional
        }
        csi {
          driver
          fsType
          nodePublishSecretRef {
            name
          }
          readOnly
        }
        downwardAPI {
          defaultMode
          items {
            fieldRef {
              apiVersion
              fieldPath
            }
            mode
            path
            resourceFieldRef {
              containerName
              resource
            }
          }
        }
        emptyDir {
          medium
        }
        ephemeral {
          volumeClaimTemplate {
            spec {
              accessModes
              dataSource {
                apiGroup
                kind
                name
              }
              dataSourceRef {
                apiGroup
                kind
                name
                namespace
              }
              resources {
                claims {
                  name
                }
              }
              selector {
                matchExpressions {
                  key
                  operator
                  values
                }
              }
              storageClassName
              volumeMode
              volumeName
            }
          }
        }
        fc {
          fsType
          lun
          readOnly
          targetWWNs
          wwids
        }
        flexVolume {
          driver
          fsType
          readOnly
          secretRef {
            name
          }
        }
        flocker {
          datasetName
          datasetUUID
        }
        gcePersistentDisk {
          fsType
          partition
          pdName
          readOnly
        }
        gitRepo {
          directory
          repository
          revision
        }
        glusterfs {
          endpoints
          path
          readOnly
        }
        hostPath {
          path
          type
        }
        iscsi {
          chapAuthDiscovery
          chapAuthSession
          fsType
          initiatorName
          iqn
          iscsiInterface
          lun
          portals
          readOnly
          secretRef {
            name
          }
          targetPortal
        }
        nfs {
          path
          readOnly
          server
        }
        persistentVolumeClaim {
          claimName
          readOnly
        }
        photonPersistentDisk {
          fsType
          pdID
        }
        portworxVolume {
          fsType
          readOnly
          volumeID
        }
        projected {
          defaultMode
          sources {
            configMap {
              items {
                key
                mode
                path
              }
              name
              optional
            }
            downwardAPI {
              items {
                fieldRef {
                  apiVersion
                  fieldPath
                }
                mode
                path
                resourceFieldRef {
                  containerName
                  resource
                }
              }
            }
            secret {
              items {
                key
                mode
                path
              }
              name
              optional
            }
            serviceAccountToken {
              audience
              expirationSeconds
              path
            }
          }
        }
        quobyte {
          group
          readOnly
          registry
          tenant
          user
          volume
        }
        rbd {
          fsType
          image
          keyring
          monitors
          pool
          readOnly
          secretRef {
            name
          }
          user
        }
        scaleIO {
          fsType
          gateway
          protectionDomain
          readOnly
          secretRef {
            name
          }
          sslEnabled
          storageMode
          storagePool
          system
          volumeName
        }
        secret {
          defaultMode
          items {
            key
            mode
            path
          }
          optional
          secretName
        }
        storageos {
          fsType
          readOnly
          secretRef {
            name
          }
          volumeName
          volumeNamespace
        }
        vsphereVolume {
          fsType
          storagePolicyID
          storagePolicyName
          volumePath
        }
      }
    }
    command
    connection {
      healthCheck {
        interval
        retryInterval
      }
      secretName
      secretTemplate {
        databaseKey
        format
        hostKey
        key
        passwordKey
        portKey
        usernameKey
      }
      serviceName
    }
    database
    env {
      name
      value
      valueFrom {
        configMapKeyRef {
          key
          name
          optional
        }
        fieldRef {
          apiVersion
          fieldPath
        }
        resourceFieldRef {
          containerName
          resource
        }
        secretKeyRef {
          key
          name
          optional
        }
      }
    }
    envFrom {
      configMapRef {
        name
        optional
      }
      prefix
      secretRef {
        name
        optional
      }
    }
    galera {
      agent {
        args
        command
        env {
          name
          value
          valueFrom {
            configMapKeyRef {
              key
              name
              optional
            }
            fieldRef {
              apiVersion
              fieldPath
            }
            resourceFieldRef {
              containerName
              resource
            }
            secretKeyRef {
              key
              name
              optional
            }
          }
        }
        envFrom {
          configMapRef {
            name
            optional
          }
          prefix
          secretRef {
            name
            optional
          }
        }
        gracefulShutdownTimeout
        image
        imagePullPolicy
        kubernetesAuth {
          authDelegatorRoleName
          enabled
        }
        livenessProbe {
          exec {
            command
          }
          failureThreshold
          grpc {
            port
            service
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          initialDelaySeconds
          periodSeconds
          successThreshold
          tcpSocket {
            host
          }
          terminationGracePeriodSeconds
          timeoutSeconds
        }
        port
        readinessProbe {
          exec {
            command
          }
          failureThreshold
          grpc {
            port
            service
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          initialDelaySeconds
          periodSeconds
          successThreshold
          tcpSocket {
            host
          }
          terminationGracePeriodSeconds
          timeoutSeconds
        }
        resources {
          claims {
            name
          }
        }
        securityContext {
          allowPrivilegeEscalation
          capabilities {
            add
            drop
          }
          privileged
          procMount
          readOnlyRootFilesystem
          runAsGroup
          runAsNonRoot
          runAsUser
          seLinuxOptions {
            level
            role
            type
            user
          }
          seccompProfile {
            localhostProfile
            type
          }
          windowsOptions {
            gmsaCredentialSpec
            gmsaCredentialSpecName
            hostProcess
            runAsUserName
          }
        }
        volumeMounts {
          mountPath
          mountPropagation
          name
          readOnly
          subPath
          subPathExpr
        }
      }
      enabled
      initContainer {
        args
        command
        env {
          name
          value
          valueFrom {
            configMapKeyRef {
              key
              name
              optional
            }
            fieldRef {
              apiVersion
              fieldPath
            }
            resourceFieldRef {
              containerName
              resource
            }
            secretKeyRef {
              key
              name
              optional
            }
          }
        }
        envFrom {
          configMapRef {
            name
            optional
          }
          prefix
          secretRef {
            name
            optional
          }
        }
        image
        imagePullPolicy
        livenessProbe {
          exec {
            command
          }
          failureThreshold
          grpc {
            port
            service
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          initialDelaySeconds
          periodSeconds
          successThreshold
          tcpSocket {
            host
          }
          terminationGracePeriodSeconds
          timeoutSeconds
        }
        readinessProbe {
          exec {
            command
          }
          failureThreshold
          grpc {
            port
            service
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          initialDelaySeconds
          periodSeconds
          successThreshold
          tcpSocket {
            host
          }
          terminationGracePeriodSeconds
          timeoutSeconds
        }
        resources {
          claims {
            name
          }
        }
        securityContext {
          allowPrivilegeEscalation
          capabilities {
            add
            drop
          }
          privileged
          procMount
          readOnlyRootFilesystem
          runAsGroup
          runAsNonRoot
          runAsUser
          seLinuxOptions {
            level
            role
            type
            user
          }
          seccompProfile {
            localhostProfile
            type
          }
          windowsOptions {
            gmsaCredentialSpec
            gmsaCredentialSpecName
            hostProcess
            runAsUserName
          }
        }
        volumeMounts {
          mountPath
          mountPropagation
          name
          readOnly
          subPath
          subPathExpr
        }
      }
      primary {
        automaticFailover
        podIndex
      }
      recovery {
        clusterBootstrapTimeout
        clusterHealthyTimeout
        enabled
        podRecoveryTimeout
        podSyncTimeout
      }
      replicaThreads
      sst
      volumeClaimTemplate {
        accessModes
        dataSource {
          apiGroup
          kind
          name
        }
        dataSourceRef {
          apiGroup
          kind
          name
          namespace
        }
        resources {
          claims {
            name
          }
        }
        selector {
          matchExpressions {
            key
            operator
            values
          }
        }
        storageClassName
        volumeMode
        volumeName
      }
    }
    image
    imagePullPolicy
    imagePullSecrets {
      name
    }
    initContainers {
      args
      command
      env {
        name
        value
        valueFrom {
          configMapKeyRef {
            key
            name
            optional
          }
          fieldRef {
            apiVersion
            fieldPath
          }
          resourceFieldRef {
            containerName
            resource
          }
          secretKeyRef {
            key
            name
            optional
          }
        }
      }
      envFrom {
        configMapRef {
          name
          optional
        }
        prefix
        secretRef {
          name
          optional
        }
      }
      image
      imagePullPolicy
      livenessProbe {
        exec {
          command
        }
        failureThreshold
        grpc {
          port
          service
        }
        httpGet {
          host
          httpHeaders {
            name
            value
          }
          path
          scheme
        }
        initialDelaySeconds
        periodSeconds
        successThreshold
        tcpSocket {
          host
        }
        terminationGracePeriodSeconds
        timeoutSeconds
      }
      readinessProbe {
        exec {
          command
        }
        failureThreshold
        grpc {
          port
          service
        }
        httpGet {
          host
          httpHeaders {
            name
            value
          }
          path
          scheme
        }
        initialDelaySeconds
        periodSeconds
        successThreshold
        tcpSocket {
          host
        }
        terminationGracePeriodSeconds
        timeoutSeconds
      }
      resources {
        claims {
          name
        }
      }
      securityContext {
        allowPrivilegeEscalation
        capabilities {
          add
          drop
        }
        privileged
        procMount
        readOnlyRootFilesystem
        runAsGroup
        runAsNonRoot
        runAsUser
        seLinuxOptions {
          level
          role
          type
          user
        }
        seccompProfile {
          localhostProfile
          type
        }
        windowsOptions {
          gmsaCredentialSpec
          gmsaCredentialSpecName
          hostProcess
          runAsUserName
        }
      }
      volumeMounts {
        mountPath
        mountPropagation
        name
        readOnly
        subPath
        subPathExpr
      }
    }
    livenessProbe {
      exec {
        command
      }
      failureThreshold
      grpc {
        port
        service
      }
      httpGet {
        host
        httpHeaders {
          name
          value
        }
        path
        scheme
      }
      initialDelaySeconds
      periodSeconds
      successThreshold
      tcpSocket {
        host
      }
      terminationGracePeriodSeconds
      timeoutSeconds
    }
    metrics {
      exporter {
        args
        command
        env {
          name
          value
          valueFrom {
            configMapKeyRef {
              key
              name
              optional
            }
            fieldRef {
              apiVersion
              fieldPath
            }
            resourceFieldRef {
              containerName
              resource
            }
            secretKeyRef {
              key
              name
              optional
            }
          }
        }
        envFrom {
          configMapRef {
            name
            optional
          }
          prefix
          secretRef {
            name
            optional
          }
        }
        image
        imagePullPolicy
        livenessProbe {
          exec {
            command
          }
          failureThreshold
          grpc {
            port
            service
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          initialDelaySeconds
          periodSeconds
          successThreshold
          tcpSocket {
            host
          }
          terminationGracePeriodSeconds
          timeoutSeconds
        }
        port
        readinessProbe {
          exec {
            command
          }
          failureThreshold
          grpc {
            port
            service
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          initialDelaySeconds
          periodSeconds
          successThreshold
          tcpSocket {
            host
          }
          terminationGracePeriodSeconds
          timeoutSeconds
        }
        resources {
          claims {
            name
          }
        }
        securityContext {
          allowPrivilegeEscalation
          capabilities {
            add
            drop
          }
          privileged
          procMount
          readOnlyRootFilesystem
          runAsGroup
          runAsNonRoot
          runAsUser
          seLinuxOptions {
            level
            role
            type
            user
          }
          seccompProfile {
            localhostProfile
            type
          }
          windowsOptions {
            gmsaCredentialSpec
            gmsaCredentialSpecName
            hostProcess
            runAsUserName
          }
        }
        volumeMounts {
          mountPath
          mountPropagation
          name
          readOnly
          subPath
          subPathExpr
        }
      }
      serviceMonitor {
        interval
        prometheusRelease
        scrapeTimeout
      }
    }
    myCnf
    myCnfConfigMapKeyRef {
      key
      name
      optional
    }
    passwordSecretKeyRef {
      key
      name
      optional
    }
    podSecurityContext {
      fsGroup
      fsGroupChangePolicy
      runAsGroup
      runAsNonRoot
      runAsUser
      seLinuxOptions {
        level
        role
        type
        user
      }
      seccompProfile {
        localhostProfile
        type
      }
      supplementalGroups
      sysctls {
        name
        value
      }
      windowsOptions {
        gmsaCredentialSpec
        gmsaCredentialSpecName
        hostProcess
        runAsUserName
      }
    }
    port
    primaryConnection {
      healthCheck {
        interval
        retryInterval
      }
      secretName
      secretTemplate {
        databaseKey
        format
        hostKey
        key
        passwordKey
        portKey
        usernameKey
      }
      serviceName
    }
    primaryService {
      externalTrafficPolicy
      loadBalancerIP
      loadBalancerSourceRanges
      sessionAffinity
      type
    }
    readinessProbe {
      exec {
        command
      }
      failureThreshold
      grpc {
        port
        service
      }
      httpGet {
        host
        httpHeaders {
          name
          value
        }
        path
        scheme
      }
      initialDelaySeconds
      periodSeconds
      successThreshold
      tcpSocket {
        host
      }
      terminationGracePeriodSeconds
      timeoutSeconds
    }
    replicas
    replication {
      enabled
      primary {
        automaticFailover
        podIndex
      }
      replica {
        connectionRetries
        connectionTimeout
        gtid
        replPasswordSecretKeyRef {
          key
          name
          optional
        }
        syncTimeout
        waitPoint
      }
      syncBinlog
    }
    resources {
      claims {
        name
      }
    }
    rootPasswordSecretKeyRef {
      key
      name
      optional
    }
    secondaryConnection {
      healthCheck {
        interval
        retryInterval
      }
      secretName
      secretTemplate {
        databaseKey
        format
        hostKey
        key
        passwordKey
        portKey
        usernameKey
      }
      serviceName
    }
    secondaryService {
      externalTrafficPolicy
      loadBalancerIP
      loadBalancerSourceRanges
      sessionAffinity
      type
    }
    securityContext {
      allowPrivilegeEscalation
      capabilities {
        add
        drop
      }
      privileged
      procMount
      readOnlyRootFilesystem
      runAsGroup
      runAsNonRoot
      runAsUser
      seLinuxOptions {
        level
        role
        type
        user
      }
      seccompProfile {
        localhostProfile
        type
      }
      windowsOptions {
        gmsaCredentialSpec
        gmsaCredentialSpecName
        hostProcess
        runAsUserName
      }
    }
    service {
      externalTrafficPolicy
      loadBalancerIP
      loadBalancerSourceRanges
      sessionAffinity
      type
    }
    tolerations {
      effect
      key
      operator
      tolerationSeconds
      value
    }
    updateStrategy {
      rollingUpdate {
        partition
      }
      type
    }
    username
    volumeClaimTemplate {
      accessModes
      dataSource {
        apiGroup
        kind
        name
      }
      dataSourceRef {
        apiGroup
        kind
        name
        namespace
      }
      resources {
        claims {
          name
        }
      }
      selector {
        matchExpressions {
          key
          operator
          values
        }
      }
      storageClassName
      volumeMode
      volumeName
    }
    volumeMounts {
      mountPath
      mountPropagation
      name
      readOnly
      subPath
      subPathExpr
    }
    volumes {
      awsElasticBlockStore {
        fsType
        partition
        readOnly
        volumeID
      }
      azureDisk {
        cachingMode
        diskName
        diskURI
        fsType
        kind
        readOnly
      }
      azureFile {
        readOnly
        secretName
        shareName
      }
      cephfs {
        monitors
        path
        readOnly
        secretFile
        secretRef {
          name
        }
        user
      }
      cinder {
        fsType
        readOnly
        secretRef {
          name
        }
        volumeID
      }
      configMap {
        defaultMode
        items {
          key
          mode
          path
        }
        name
        optional
      }
      csi {
        driver
        fsType
        nodePublishSecretRef {
          name
        }
        readOnly
      }
      downwardAPI {
        defaultMode
        items {
          fieldRef {
            apiVersion
            fieldPath
          }
          mode
          path
          resourceFieldRef {
            containerName
            resource
          }
        }
      }
      emptyDir {
        medium
      }
      ephemeral {
        volumeClaimTemplate {
          spec {
            accessModes
            dataSource {
              apiGroup
              kind
              name
            }
            dataSourceRef {
              apiGroup
              kind
              name
              namespace
            }
            resources {
              claims {
                name
              }
            }
            selector {
              matchExpressions {
                key
                operator
                values
              }
            }
            storageClassName
            volumeMode
            volumeName
          }
        }
      }
      fc {
        fsType
        lun
        readOnly
        targetWWNs
        wwids
      }
      flexVolume {
        driver
        fsType
        readOnly
        secretRef {
          name
        }
      }
      flocker {
        datasetName
        datasetUUID
      }
      gcePersistentDisk {
        fsType
        partition
        pdName
        readOnly
      }
      gitRepo {
        directory
        repository
        revision
      }
      glusterfs {
        endpoints
        path
        readOnly
      }
      hostPath {
        path
        type
      }
      iscsi {
        chapAuthDiscovery
        chapAuthSession
        fsType
        initiatorName
        iqn
        iscsiInterface
        lun
        portals
        readOnly
        secretRef {
          name
        }
        targetPortal
      }
      name
      nfs {
        path
        readOnly
        server
      }
      persistentVolumeClaim {
        claimName
        readOnly
      }
      photonPersistentDisk {
        fsType
        pdID
      }
      portworxVolume {
        fsType
        readOnly
        volumeID
      }
      projected {
        defaultMode
        sources {
          configMap {
            items {
              key
              mode
              path
            }
            name
            optional
          }
          downwardAPI {
            items {
              fieldRef {
                apiVersion
                fieldPath
              }
              mode
              path
              resourceFieldRef {
                containerName
                resource
              }
            }
          }
          secret {
            items {
              key
              mode
              path
            }
            name
            optional
          }
          serviceAccountToken {
            audience
            expirationSeconds
            path
          }
        }
      }
      quobyte {
        group
        readOnly
        registry
        tenant
        user
        volume
      }
      rbd {
        fsType
        image
        keyring
        monitors
        pool
        readOnly
        secretRef {
          name
        }
        user
      }
      scaleIO {
        fsType
        gateway
        protectionDomain
        readOnly
        secretRef {
          name
        }
        sslEnabled
        storageMode
        storagePool
        system
        volumeName
      }
      secret {
        defaultMode
        items {
          key
          mode
          path
        }
        optional
        secretName
      }
      storageos {
        fsType
        readOnly
        secretRef {
          name
        }
        volumeName
        volumeNamespace
      }
      vsphereVolume {
        fsType
        storagePolicyID
        storagePolicyName
        volumePath
      }
    }
    status {
      conditions {
        lastTransitionTime
        message
        observedGeneration
        reason
        status
        type
      }
      currentPrimary
      currentPrimaryPodIndex
      galeraRecovery {
        bootstrap {
          pod
          time
        }
      }
    }
  }
 }
}
