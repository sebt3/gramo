
mutation MonitoringAlertmanager($namespace: String!, $name: String!, $spec: monitoringAlertmanagerSpec!) {
  createMonitoringAlertmanager(namespace: $namespace, name: $name, spec: $spec) {
    metadata {
      annotations {
        name
        value
      }
      labels {
        name
        value
      }
      name
      namespace
    }
    additionalPeers
    affinity {
      nodeAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          preference {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          nodeSelectorTerms {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
        }
      }
      podAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          podAffinityTerm {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaceSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaces
            topologyKey
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          labelSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaceSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaces
          topologyKey
        }
      }
      podAntiAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          podAffinityTerm {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaceSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaces
            topologyKey
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          labelSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaceSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaces
          topologyKey
        }
      }
    }
    alertmanagerConfigMatcherStrategy {
      type
    }
    alertmanagerConfigNamespaceSelector {
      matchExpressions {
        key
        operator
        values
      }
    }
    alertmanagerConfigSelector {
      matchExpressions {
        key
        operator
        values
      }
    }
    alertmanagerConfiguration {
      global {
        httpConfig {
          authorization {
            credentials {
              key
              name
              optional
            }
            type
          }
          basicAuth {
            password {
              key
              name
              optional
            }
            username {
              key
              name
              optional
            }
          }
          bearerTokenSecret {
            key
            name
            optional
          }
          followRedirects
          oauth2 {
            clientId {
              configMap {
                key
                name
                optional
              }
              secret {
                key
                name
                optional
              }
            }
            clientSecret {
              key
              name
              optional
            }
            scopes
            tokenUrl
          }
          proxyURL
          tlsConfig {
            ca {
              configMap {
                key
                name
                optional
              }
              secret {
                key
                name
                optional
              }
            }
            cert {
              configMap {
                key
                name
                optional
              }
              secret {
                key
                name
                optional
              }
            }
            insecureSkipVerify
            keySecret {
              key
              name
              optional
            }
            serverName
          }
        }
        opsGenieApiKey {
          key
          name
          optional
        }
        opsGenieApiUrl {
          key
          name
          optional
        }
        resolveTimeout
        slackApiUrl {
          key
          name
          optional
        }
      }
      name
      templates {
        configMap {
          key
          name
          optional
        }
        secret {
          key
          name
          optional
        }
      }
    }
    baseImage
    clusterAdvertiseAddress
    clusterGossipInterval
    clusterPeerTimeout
    clusterPushpullInterval
    configMaps
    configSecret
    containers {
      args
      command
      env {
        name
        value
        valueFrom {
          configMapKeyRef {
            key
            name
            optional
          }
          fieldRef {
            apiVersion
            fieldPath
          }
          resourceFieldRef {
            containerName
            resource
          }
          secretKeyRef {
            key
            name
            optional
          }
        }
      }
      envFrom {
        configMapRef {
          name
          optional
        }
        prefix
        secretRef {
          name
          optional
        }
      }
      image
      imagePullPolicy
      lifecycle {
        postStart {
          exec {
            command
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          tcpSocket {
            host
          }
        }
        preStop {
          exec {
            command
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          tcpSocket {
            host
          }
        }
      }
      livenessProbe {
        exec {
          command
        }
        failureThreshold
        grpc {
          port
          service
        }
        httpGet {
          host
          httpHeaders {
            name
            value
          }
          path
          scheme
        }
        initialDelaySeconds
        periodSeconds
        successThreshold
        tcpSocket {
          host
        }
        terminationGracePeriodSeconds
        timeoutSeconds
      }
      name
      ports {
        containerPort
        hostIP
        hostPort
        name
        protocol
      }
      readinessProbe {
        exec {
          command
        }
        failureThreshold
        grpc {
          port
          service
        }
        httpGet {
          host
          httpHeaders {
            name
            value
          }
          path
          scheme
        }
        initialDelaySeconds
        periodSeconds
        successThreshold
        tcpSocket {
          host
        }
        terminationGracePeriodSeconds
        timeoutSeconds
      }
      resizePolicy {
        resourceName
        restartPolicy
      }
      resources {
        claims {
          name
        }
      }
      securityContext {
        allowPrivilegeEscalation
        capabilities {
          add
          drop
        }
        privileged
        procMount
        readOnlyRootFilesystem
        runAsGroup
        runAsNonRoot
        runAsUser
        seLinuxOptions {
          level
          role
          type
          user
        }
        seccompProfile {
          localhostProfile
          type
        }
        windowsOptions {
          gmsaCredentialSpec
          gmsaCredentialSpecName
          hostProcess
          runAsUserName
        }
      }
      startupProbe {
        exec {
          command
        }
        failureThreshold
        grpc {
          port
          service
        }
        httpGet {
          host
          httpHeaders {
            name
            value
          }
          path
          scheme
        }
        initialDelaySeconds
        periodSeconds
        successThreshold
        tcpSocket {
          host
        }
        terminationGracePeriodSeconds
        timeoutSeconds
      }
      stdin
      stdinOnce
      terminationMessagePath
      terminationMessagePolicy
      tty
      volumeDevices {
        devicePath
        name
      }
      volumeMounts {
        mountPath
        mountPropagation
        name
        readOnly
        subPath
        subPathExpr
      }
      workingDir
    }
    externalUrl
    forceEnableClusterMode
    hostAliases {
      hostnames
      ip
    }
    image
    imagePullPolicy
    imagePullSecrets {
      name
    }
    initContainers {
      args
      command
      env {
        name
        value
        valueFrom {
          configMapKeyRef {
            key
            name
            optional
          }
          fieldRef {
            apiVersion
            fieldPath
          }
          resourceFieldRef {
            containerName
            resource
          }
          secretKeyRef {
            key
            name
            optional
          }
        }
      }
      envFrom {
        configMapRef {
          name
          optional
        }
        prefix
        secretRef {
          name
          optional
        }
      }
      image
      imagePullPolicy
      lifecycle {
        postStart {
          exec {
            command
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          tcpSocket {
            host
          }
        }
        preStop {
          exec {
            command
          }
          httpGet {
            host
            httpHeaders {
              name
              value
            }
            path
            scheme
          }
          tcpSocket {
            host
          }
        }
      }
      livenessProbe {
        exec {
          command
        }
        failureThreshold
        grpc {
          port
          service
        }
        httpGet {
          host
          httpHeaders {
            name
            value
          }
          path
          scheme
        }
        initialDelaySeconds
        periodSeconds
        successThreshold
        tcpSocket {
          host
        }
        terminationGracePeriodSeconds
        timeoutSeconds
      }
      name
      ports {
        containerPort
        hostIP
        hostPort
        name
        protocol
      }
      readinessProbe {
        exec {
          command
        }
        failureThreshold
        grpc {
          port
          service
        }
        httpGet {
          host
          httpHeaders {
            name
            value
          }
          path
          scheme
        }
        initialDelaySeconds
        periodSeconds
        successThreshold
        tcpSocket {
          host
        }
        terminationGracePeriodSeconds
        timeoutSeconds
      }
      resizePolicy {
        resourceName
        restartPolicy
      }
      resources {
        claims {
          name
        }
      }
      securityContext {
        allowPrivilegeEscalation
        capabilities {
          add
          drop
        }
        privileged
        procMount
        readOnlyRootFilesystem
        runAsGroup
        runAsNonRoot
        runAsUser
        seLinuxOptions {
          level
          role
          type
          user
        }
        seccompProfile {
          localhostProfile
          type
        }
        windowsOptions {
          gmsaCredentialSpec
          gmsaCredentialSpecName
          hostProcess
          runAsUserName
        }
      }
      startupProbe {
        exec {
          command
        }
        failureThreshold
        grpc {
          port
          service
        }
        httpGet {
          host
          httpHeaders {
            name
            value
          }
          path
          scheme
        }
        initialDelaySeconds
        periodSeconds
        successThreshold
        tcpSocket {
          host
        }
        terminationGracePeriodSeconds
        timeoutSeconds
      }
      stdin
      stdinOnce
      terminationMessagePath
      terminationMessagePolicy
      tty
      volumeDevices {
        devicePath
        name
      }
      volumeMounts {
        mountPath
        mountPropagation
        name
        readOnly
        subPath
        subPathExpr
      }
      workingDir
    }
    listenLocal
    logFormat
    logLevel
    minReadySeconds
    paused
    podMetadata {
      name
    }
    portName
    priorityClassName
    replicas
    resources {
      claims {
        name
      }
    }
    retention
    routePrefix
    secrets
    securityContext {
      fsGroup
      fsGroupChangePolicy
      runAsGroup
      runAsNonRoot
      runAsUser
      seLinuxOptions {
        level
        role
        type
        user
      }
      seccompProfile {
        localhostProfile
        type
      }
      supplementalGroups
      sysctls {
        name
        value
      }
      windowsOptions {
        gmsaCredentialSpec
        gmsaCredentialSpecName
        hostProcess
        runAsUserName
      }
    }
    serviceAccountName
    sha
    storage {
      disableMountSubPath
      emptyDir {
        medium
      }
      ephemeral {
        volumeClaimTemplate {
          spec {
            accessModes
            dataSource {
              apiGroup
              kind
              name
            }
            dataSourceRef {
              apiGroup
              kind
              name
              namespace
            }
            resources {
              claims {
                name
              }
            }
            selector {
              matchExpressions {
                key
                operator
                values
              }
            }
            storageClassName
            volumeMode
            volumeName
          }
        }
      }
      volumeClaimTemplate {
        apiVersion
        kind
        metadata {
          name
        }
        spec {
          accessModes
          dataSource {
            apiGroup
            kind
            name
          }
          dataSourceRef {
            apiGroup
            kind
            name
            namespace
          }
          resources {
            claims {
              name
            }
          }
          selector {
            matchExpressions {
              key
              operator
              values
            }
          }
          storageClassName
          volumeMode
          volumeName
        }
        status {
          accessModes
          conditions {
            lastProbeTime
            lastTransitionTime
            message
            reason
            status
            type
          }
          phase
          resizeStatus
        }
      }
    }
    tag
    tolerations {
      effect
      key
      operator
      tolerationSeconds
      value
    }
    topologySpreadConstraints {
      labelSelector {
        matchExpressions {
          key
          operator
          values
        }
      }
      matchLabelKeys
      maxSkew
      minDomains
      nodeAffinityPolicy
      nodeTaintsPolicy
      topologyKey
      whenUnsatisfiable
    }
    version
    volumeMounts {
      mountPath
      mountPropagation
      name
      readOnly
      subPath
      subPathExpr
    }
    volumes {
      awsElasticBlockStore {
        fsType
        partition
        readOnly
        volumeID
      }
      azureDisk {
        cachingMode
        diskName
        diskURI
        fsType
        kind
        readOnly
      }
      azureFile {
        readOnly
        secretName
        shareName
      }
      cephfs {
        monitors
        path
        readOnly
        secretFile
        secretRef {
          name
        }
        user
      }
      cinder {
        fsType
        readOnly
        secretRef {
          name
        }
        volumeID
      }
      configMap {
        defaultMode
        items {
          key
          mode
          path
        }
        name
        optional
      }
      csi {
        driver
        fsType
        nodePublishSecretRef {
          name
        }
        readOnly
      }
      downwardAPI {
        defaultMode
        items {
          fieldRef {
            apiVersion
            fieldPath
          }
          mode
          path
          resourceFieldRef {
            containerName
            resource
          }
        }
      }
      emptyDir {
        medium
      }
      ephemeral {
        volumeClaimTemplate {
          spec {
            accessModes
            dataSource {
              apiGroup
              kind
              name
            }
            dataSourceRef {
              apiGroup
              kind
              name
              namespace
            }
            resources {
              claims {
                name
              }
            }
            selector {
              matchExpressions {
                key
                operator
                values
              }
            }
            storageClassName
            volumeMode
            volumeName
          }
        }
      }
      fc {
        fsType
        lun
        readOnly
        targetWWNs
        wwids
      }
      flexVolume {
        driver
        fsType
        readOnly
        secretRef {
          name
        }
      }
      flocker {
        datasetName
        datasetUUID
      }
      gcePersistentDisk {
        fsType
        partition
        pdName
        readOnly
      }
      gitRepo {
        directory
        repository
        revision
      }
      glusterfs {
        endpoints
        path
        readOnly
      }
      hostPath {
        path
        type
      }
      iscsi {
        chapAuthDiscovery
        chapAuthSession
        fsType
        initiatorName
        iqn
        iscsiInterface
        lun
        portals
        readOnly
        secretRef {
          name
        }
        targetPortal
      }
      name
      nfs {
        path
        readOnly
        server
      }
      persistentVolumeClaim {
        claimName
        readOnly
      }
      photonPersistentDisk {
        fsType
        pdID
      }
      portworxVolume {
        fsType
        readOnly
        volumeID
      }
      projected {
        defaultMode
        sources {
          configMap {
            items {
              key
              mode
              path
            }
            name
            optional
          }
          downwardAPI {
            items {
              fieldRef {
                apiVersion
                fieldPath
              }
              mode
              path
              resourceFieldRef {
                containerName
                resource
              }
            }
          }
          secret {
            items {
              key
              mode
              path
            }
            name
            optional
          }
          serviceAccountToken {
            audience
            expirationSeconds
            path
          }
        }
      }
      quobyte {
        group
        readOnly
        registry
        tenant
        user
        volume
      }
      rbd {
        fsType
        image
        keyring
        monitors
        pool
        readOnly
        secretRef {
          name
        }
        user
      }
      scaleIO {
        fsType
        gateway
        protectionDomain
        readOnly
        secretRef {
          name
        }
        sslEnabled
        storageMode
        storagePool
        system
        volumeName
      }
      secret {
        defaultMode
        items {
          key
          mode
          path
        }
        optional
        secretName
      }
      storageos {
        fsType
        readOnly
        secretRef {
          name
        }
        volumeName
        volumeNamespace
      }
      vsphereVolume {
        fsType
        storagePolicyID
        storagePolicyName
        volumePath
      }
    }
    web {
      getConcurrency
      httpConfig {
        headers {
          contentSecurityPolicy
          strictTransportSecurity
          xContentTypeOptions
          xFrameOptions
          xXSSProtection
        }
        http2
      }
      timeout
      tlsConfig {
        cert {
          configMap {
            key
            name
            optional
          }
          secret {
            key
            name
            optional
          }
        }
        cipherSuites
        clientAuthType
        client_ca {
          configMap {
            key
            name
            optional
          }
          secret {
            key
            name
            optional
          }
        }
        curvePreferences
        keySecret {
          key
          name
          optional
        }
        maxVersion
        minVersion
        preferServerCipherSuites
      }
    }
    status {
      availableReplicas
      conditions {
        lastTransitionTime
        message
        observedGeneration
        reason
        status
        type
      }
      paused
      replicas
      unavailableReplicas
      updatedReplicas
    }
  }
}
