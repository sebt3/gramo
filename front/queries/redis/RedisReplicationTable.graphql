
query RedisRedisReplications($namespace: String!) {
 namespace(name: $namespace) {
  redisRedisReplications {
    metadata {
      annotations {
        name
        value
      }
      labels {
        name
        value
      }
      name
      namespace
    }
    TLS {
      ca
      cert
      key
      secret {
        defaultMode
        items {
          key
          mode
          path
        }
        optional
        secretName
      }
    }
    affinity {
      nodeAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          preference {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          nodeSelectorTerms {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
        }
      }
      podAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          podAffinityTerm {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaceSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaces
            topologyKey
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          labelSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaceSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaces
          topologyKey
        }
      }
      podAntiAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          podAffinityTerm {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaceSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaces
            topologyKey
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          labelSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaceSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaces
          topologyKey
        }
      }
    }
    clusterSize
    kubernetesConfig {
      image
      imagePullPolicy
      imagePullSecrets {
        name
      }
      redisSecret {
        key
        name
      }
      service {
        serviceType
      }
      updateStrategy {
        rollingUpdate {
          partition
        }
        type
      }
    }
    livenessProbe {
      failureThreshold
      initialDelaySeconds
      periodSeconds
      successThreshold
      timeoutSeconds
    }
    priorityClassName
    readinessProbe {
      failureThreshold
      initialDelaySeconds
      periodSeconds
      successThreshold
      timeoutSeconds
    }
    redisConfig {
      additionalRedisConfig
    }
    redisExporter {
      enabled
      env {
        name
        value
        valueFrom {
          configMapKeyRef {
            key
            name
            optional
          }
          fieldRef {
            apiVersion
            fieldPath
          }
          resourceFieldRef {
            containerName
            resource
          }
          secretKeyRef {
            key
            name
            optional
          }
        }
      }
      image
      imagePullPolicy
    }
    securityContext {
      fsGroup
      fsGroupChangePolicy
      runAsGroup
      runAsNonRoot
      runAsUser
      seLinuxOptions {
        level
        role
        type
        user
      }
      seccompProfile {
        localhostProfile
        type
      }
      supplementalGroups
      sysctls {
        name
        value
      }
      windowsOptions {
        gmsaCredentialSpec
        gmsaCredentialSpecName
        hostProcess
        runAsUserName
      }
    }
    serviceAccountName
    sidecars {
      env {
        name
        value
        valueFrom {
          configMapKeyRef {
            key
            name
            optional
          }
          fieldRef {
            apiVersion
            fieldPath
          }
          resourceFieldRef {
            containerName
            resource
          }
          secretKeyRef {
            key
            name
            optional
          }
        }
      }
      image
      imagePullPolicy
      name
    }
    storage {
      volumeClaimTemplate {
        apiVersion
        kind
        spec {
          accessModes
          dataSource {
            apiGroup
            kind
            name
          }
          dataSourceRef {
            apiGroup
            kind
            name
          }
          selector {
            matchExpressions {
              key
              operator
              values
            }
          }
          storageClassName
          volumeMode
          volumeName
        }
        status {
          accessModes
          conditions {
            lastProbeTime
            lastTransitionTime
            message
            reason
            status
            type
          }
          phase
          resizeStatus
        }
      }
      volumeMount {
        mountPath {
          mountPath
          mountPropagation
          name
          readOnly
          subPath
          subPathExpr
        }
        volume {
          awsElasticBlockStore {
            fsType
            partition
            readOnly
            volumeID
          }
          azureDisk {
            cachingMode
            diskName
            diskURI
            fsType
            kind
            readOnly
          }
          azureFile {
            readOnly
            secretName
            shareName
          }
          cephfs {
            monitors
            path
            readOnly
            secretFile
            secretRef {
              name
            }
            user
          }
          cinder {
            fsType
            readOnly
            secretRef {
              name
            }
            volumeID
          }
          configMap {
            defaultMode
            items {
              key
              mode
              path
            }
            name
            optional
          }
          csi {
            driver
            fsType
            nodePublishSecretRef {
              name
            }
            readOnly
          }
          downwardAPI {
            defaultMode
            items {
              fieldRef {
                apiVersion
                fieldPath
              }
              mode
              path
              resourceFieldRef {
                containerName
                resource
              }
            }
          }
          emptyDir {
            medium
          }
          ephemeral {
            volumeClaimTemplate {
              spec {
                accessModes
                dataSource {
                  apiGroup
                  kind
                  name
                }
                dataSourceRef {
                  apiGroup
                  kind
                  name
                }
                selector {
                  matchExpressions {
                    key
                    operator
                    values
                  }
                }
                storageClassName
                volumeMode
                volumeName
              }
            }
          }
          fc {
            fsType
            lun
            readOnly
            targetWWNs
            wwids
          }
          flexVolume {
            driver
            fsType
            readOnly
            secretRef {
              name
            }
          }
          flocker {
            datasetName
            datasetUUID
          }
          gcePersistentDisk {
            fsType
            partition
            pdName
            readOnly
          }
          gitRepo {
            directory
            repository
            revision
          }
          glusterfs {
            endpoints
            path
            readOnly
          }
          hostPath {
            path
            type
          }
          iscsi {
            chapAuthDiscovery
            chapAuthSession
            fsType
            initiatorName
            iqn
            iscsiInterface
            lun
            portals
            readOnly
            secretRef {
              name
            }
            targetPortal
          }
          name
          nfs {
            path
            readOnly
            server
          }
          persistentVolumeClaim {
            claimName
            readOnly
          }
          photonPersistentDisk {
            fsType
            pdID
          }
          portworxVolume {
            fsType
            readOnly
            volumeID
          }
          projected {
            defaultMode
            sources {
              configMap {
                items {
                  key
                  mode
                  path
                }
                name
                optional
              }
              downwardAPI {
                items {
                  fieldRef {
                    apiVersion
                    fieldPath
                  }
                  mode
                  path
                  resourceFieldRef {
                    containerName
                    resource
                  }
                }
              }
              secret {
                items {
                  key
                  mode
                  path
                }
                name
                optional
              }
              serviceAccountToken {
                audience
                expirationSeconds
                path
              }
            }
          }
          quobyte {
            group
            readOnly
            registry
            tenant
            user
            volume
          }
          rbd {
            fsType
            image
            keyring
            monitors
            pool
            readOnly
            secretRef {
              name
            }
            user
          }
          scaleIO {
            fsType
            gateway
            protectionDomain
            readOnly
            secretRef {
              name
            }
            sslEnabled
            storageMode
            storagePool
            system
            volumeName
          }
          secret {
            defaultMode
            items {
              key
              mode
              path
            }
            optional
            secretName
          }
          storageos {
            fsType
            readOnly
            secretRef {
              name
            }
            volumeName
            volumeNamespace
          }
          vsphereVolume {
            fsType
            storagePolicyID
            storagePolicyName
            volumePath
          }
        }
      }
    }
    tolerations {
      effect
      key
      operator
      tolerationSeconds
      value
    }
  }
 }
}
