
query RabbitmqRabbitmqCluster($namespace: String!, $name: String!) {
  customResourceDefinition(name: "rabbitmqclusters.rabbitmq.com") {
    versions {
      name
      served
      schema {
        openAPIV3Schema
      }
    }
    names {
      categories
      kind
      listKind
      plural
      singular
      shortNames
    }
    group
  }
  rabbitmqRabbitmqCluster(namespace: $namespace, name: $name) {
    metadata {
      annotations {
        name
        value
      }
      labels {
        name
        value
      }
      name
      namespace
      obj
    }
    affinity {
      nodeAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          preference {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          nodeSelectorTerms {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
        }
      }
      podAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          podAffinityTerm {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaceSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaces
            topologyKey
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          labelSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaceSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaces
          topologyKey
        }
      }
      podAntiAffinity {
        preferredDuringSchedulingIgnoredDuringExecution {
          podAffinityTerm {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaceSelector {
              matchExpressions {
                key
                operator
                values
              }
            }
            namespaces
            topologyKey
          }
          weight
        }
        requiredDuringSchedulingIgnoredDuringExecution {
          labelSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaceSelector {
            matchExpressions {
              key
              operator
              values
            }
          }
          namespaces
          topologyKey
        }
      }
    }
    delayStartSeconds
    image
    imagePullSecrets {
      name
    }
    override {
      service {
        spec {
          allocateLoadBalancerNodePorts
          clusterIP
          clusterIPs
          externalIPs
          externalName
          externalTrafficPolicy
          healthCheckNodePort
          internalTrafficPolicy
          ipFamilies
          ipFamilyPolicy
          loadBalancerClass
          loadBalancerIP
          loadBalancerSourceRanges
          ports {
            appProtocol
            name
            nodePort
            port
            protocol
          }
          publishNotReadyAddresses
          sessionAffinity
          sessionAffinityConfig {
            clientIP {
              timeoutSeconds
            }
          }
          type
        }
      }
      statefulSet {
        spec {
          minReadySeconds
          persistentVolumeClaimRetentionPolicy {
            whenDeleted
            whenScaled
          }
          podManagementPolicy
          replicas
          selector {
            matchExpressions {
              key
              operator
              values
            }
          }
          serviceName
          template {
            metadata {
              name
              namespace
            }
            spec {
              activeDeadlineSeconds
              affinity {
                nodeAffinity {
                  preferredDuringSchedulingIgnoredDuringExecution {
                    preference {
                      matchExpressions {
                        key
                        operator
                        values
                      }
                      matchFields {
                        key
                        operator
                        values
                      }
                    }
                    weight
                  }
                  requiredDuringSchedulingIgnoredDuringExecution {
                    nodeSelectorTerms {
                      matchExpressions {
                        key
                        operator
                        values
                      }
                      matchFields {
                        key
                        operator
                        values
                      }
                    }
                  }
                }
                podAffinity {
                  preferredDuringSchedulingIgnoredDuringExecution {
                    podAffinityTerm {
                      labelSelector {
                        matchExpressions {
                          key
                          operator
                          values
                        }
                      }
                      namespaceSelector {
                        matchExpressions {
                          key
                          operator
                          values
                        }
                      }
                      namespaces
                      topologyKey
                    }
                    weight
                  }
                  requiredDuringSchedulingIgnoredDuringExecution {
                    labelSelector {
                      matchExpressions {
                        key
                        operator
                        values
                      }
                    }
                    namespaceSelector {
                      matchExpressions {
                        key
                        operator
                        values
                      }
                    }
                    namespaces
                    topologyKey
                  }
                }
                podAntiAffinity {
                  preferredDuringSchedulingIgnoredDuringExecution {
                    podAffinityTerm {
                      labelSelector {
                        matchExpressions {
                          key
                          operator
                          values
                        }
                      }
                      namespaceSelector {
                        matchExpressions {
                          key
                          operator
                          values
                        }
                      }
                      namespaces
                      topologyKey
                    }
                    weight
                  }
                  requiredDuringSchedulingIgnoredDuringExecution {
                    labelSelector {
                      matchExpressions {
                        key
                        operator
                        values
                      }
                    }
                    namespaceSelector {
                      matchExpressions {
                        key
                        operator
                        values
                      }
                    }
                    namespaces
                    topologyKey
                  }
                }
              }
              automountServiceAccountToken
              containers {
                args
                command
                env {
                  name
                  value
                  valueFrom {
                    configMapKeyRef {
                      key
                      name
                      optional
                    }
                    fieldRef {
                      apiVersion
                      fieldPath
                    }
                    resourceFieldRef {
                      containerName
                      resource
                    }
                    secretKeyRef {
                      key
                      name
                      optional
                    }
                  }
                }
                envFrom {
                  configMapRef {
                    name
                    optional
                  }
                  prefix
                  secretRef {
                    name
                    optional
                  }
                }
                image
                imagePullPolicy
                lifecycle {
                  postStart {
                    exec {
                      command
                    }
                    httpGet {
                      host
                      httpHeaders {
                        name
                        value
                      }
                      path
                      scheme
                    }
                    tcpSocket {
                      host
                    }
                  }
                  preStop {
                    exec {
                      command
                    }
                    httpGet {
                      host
                      httpHeaders {
                        name
                        value
                      }
                      path
                      scheme
                    }
                    tcpSocket {
                      host
                    }
                  }
                }
                livenessProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                name
                ports {
                  containerPort
                  hostIP
                  hostPort
                  name
                  protocol
                }
                readinessProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                resources {
                  claims {
                    name
                  }
                }
                securityContext {
                  allowPrivilegeEscalation
                  capabilities {
                    add
                    drop
                  }
                  privileged
                  procMount
                  readOnlyRootFilesystem
                  runAsGroup
                  runAsNonRoot
                  runAsUser
                  seLinuxOptions {
                    level
                    role
                    type
                    user
                  }
                  seccompProfile {
                    localhostProfile
                    type
                  }
                  windowsOptions {
                    gmsaCredentialSpec
                    gmsaCredentialSpecName
                    hostProcess
                    runAsUserName
                  }
                }
                startupProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                stdin
                stdinOnce
                terminationMessagePath
                terminationMessagePolicy
                tty
                volumeDevices {
                  devicePath
                  name
                }
                volumeMounts {
                  mountPath
                  mountPropagation
                  name
                  readOnly
                  subPath
                  subPathExpr
                }
                workingDir
              }
              dnsConfig {
                nameservers
                options {
                  name
                  value
                }
                searches
              }
              dnsPolicy
              enableServiceLinks
              ephemeralContainers {
                args
                command
                env {
                  name
                  value
                  valueFrom {
                    configMapKeyRef {
                      key
                      name
                      optional
                    }
                    fieldRef {
                      apiVersion
                      fieldPath
                    }
                    resourceFieldRef {
                      containerName
                      resource
                    }
                    secretKeyRef {
                      key
                      name
                      optional
                    }
                  }
                }
                envFrom {
                  configMapRef {
                    name
                    optional
                  }
                  prefix
                  secretRef {
                    name
                    optional
                  }
                }
                image
                imagePullPolicy
                lifecycle {
                  postStart {
                    exec {
                      command
                    }
                    httpGet {
                      host
                      httpHeaders {
                        name
                        value
                      }
                      path
                      scheme
                    }
                    tcpSocket {
                      host
                    }
                  }
                  preStop {
                    exec {
                      command
                    }
                    httpGet {
                      host
                      httpHeaders {
                        name
                        value
                      }
                      path
                      scheme
                    }
                    tcpSocket {
                      host
                    }
                  }
                }
                livenessProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                name
                ports {
                  containerPort
                  hostIP
                  hostPort
                  name
                  protocol
                }
                readinessProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                resources {
                  claims {
                    name
                  }
                }
                securityContext {
                  allowPrivilegeEscalation
                  capabilities {
                    add
                    drop
                  }
                  privileged
                  procMount
                  readOnlyRootFilesystem
                  runAsGroup
                  runAsNonRoot
                  runAsUser
                  seLinuxOptions {
                    level
                    role
                    type
                    user
                  }
                  seccompProfile {
                    localhostProfile
                    type
                  }
                  windowsOptions {
                    gmsaCredentialSpec
                    gmsaCredentialSpecName
                    hostProcess
                    runAsUserName
                  }
                }
                startupProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                stdin
                stdinOnce
                targetContainerName
                terminationMessagePath
                terminationMessagePolicy
                tty
                volumeDevices {
                  devicePath
                  name
                }
                volumeMounts {
                  mountPath
                  mountPropagation
                  name
                  readOnly
                  subPath
                  subPathExpr
                }
                workingDir
              }
              hostAliases {
                hostnames
                ip
              }
              hostIPC
              hostNetwork
              hostPID
              hostUsers
              hostname
              imagePullSecrets {
                name
              }
              initContainers {
                args
                command
                env {
                  name
                  value
                  valueFrom {
                    configMapKeyRef {
                      key
                      name
                      optional
                    }
                    fieldRef {
                      apiVersion
                      fieldPath
                    }
                    resourceFieldRef {
                      containerName
                      resource
                    }
                    secretKeyRef {
                      key
                      name
                      optional
                    }
                  }
                }
                envFrom {
                  configMapRef {
                    name
                    optional
                  }
                  prefix
                  secretRef {
                    name
                    optional
                  }
                }
                image
                imagePullPolicy
                lifecycle {
                  postStart {
                    exec {
                      command
                    }
                    httpGet {
                      host
                      httpHeaders {
                        name
                        value
                      }
                      path
                      scheme
                    }
                    tcpSocket {
                      host
                    }
                  }
                  preStop {
                    exec {
                      command
                    }
                    httpGet {
                      host
                      httpHeaders {
                        name
                        value
                      }
                      path
                      scheme
                    }
                    tcpSocket {
                      host
                    }
                  }
                }
                livenessProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                name
                ports {
                  containerPort
                  hostIP
                  hostPort
                  name
                  protocol
                }
                readinessProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                resources {
                  claims {
                    name
                  }
                }
                securityContext {
                  allowPrivilegeEscalation
                  capabilities {
                    add
                    drop
                  }
                  privileged
                  procMount
                  readOnlyRootFilesystem
                  runAsGroup
                  runAsNonRoot
                  runAsUser
                  seLinuxOptions {
                    level
                    role
                    type
                    user
                  }
                  seccompProfile {
                    localhostProfile
                    type
                  }
                  windowsOptions {
                    gmsaCredentialSpec
                    gmsaCredentialSpecName
                    hostProcess
                    runAsUserName
                  }
                }
                startupProbe {
                  exec {
                    command
                  }
                  failureThreshold
                  grpc {
                    port
                    service
                  }
                  httpGet {
                    host
                    httpHeaders {
                      name
                      value
                    }
                    path
                    scheme
                  }
                  initialDelaySeconds
                  periodSeconds
                  successThreshold
                  tcpSocket {
                    host
                  }
                  terminationGracePeriodSeconds
                  timeoutSeconds
                }
                stdin
                stdinOnce
                terminationMessagePath
                terminationMessagePolicy
                tty
                volumeDevices {
                  devicePath
                  name
                }
                volumeMounts {
                  mountPath
                  mountPropagation
                  name
                  readOnly
                  subPath
                  subPathExpr
                }
                workingDir
              }
              nodeName
              os {
                name
              }
              preemptionPolicy
              priority
              priorityClassName
              readinessGates {
                conditionType
              }
              resourceClaims {
                name
                source {
                  resourceClaimName
                  resourceClaimTemplateName
                }
              }
              restartPolicy
              runtimeClassName
              schedulerName
              schedulingGates {
                name
              }
              securityContext {
                fsGroup
                fsGroupChangePolicy
                runAsGroup
                runAsNonRoot
                runAsUser
                seLinuxOptions {
                  level
                  role
                  type
                  user
                }
                seccompProfile {
                  localhostProfile
                  type
                }
                supplementalGroups
                sysctls {
                  name
                  value
                }
                windowsOptions {
                  gmsaCredentialSpec
                  gmsaCredentialSpecName
                  hostProcess
                  runAsUserName
                }
              }
              serviceAccount
              serviceAccountName
              setHostnameAsFQDN
              shareProcessNamespace
              subdomain
              terminationGracePeriodSeconds
              tolerations {
                effect
                key
                operator
                tolerationSeconds
                value
              }
              topologySpreadConstraints {
                labelSelector {
                  matchExpressions {
                    key
                    operator
                    values
                  }
                }
                matchLabelKeys
                maxSkew
                minDomains
                nodeAffinityPolicy
                nodeTaintsPolicy
                topologyKey
                whenUnsatisfiable
              }
              volumes {
                awsElasticBlockStore {
                  fsType
                  partition
                  readOnly
                  volumeID
                }
                azureDisk {
                  cachingMode
                  diskName
                  diskURI
                  fsType
                  kind
                  readOnly
                }
                azureFile {
                  readOnly
                  secretName
                  shareName
                }
                cephfs {
                  monitors
                  path
                  readOnly
                  secretFile
                  secretRef {
                    name
                  }
                  user
                }
                cinder {
                  fsType
                  readOnly
                  secretRef {
                    name
                  }
                  volumeID
                }
                configMap {
                  defaultMode
                  items {
                    key
                    mode
                    path
                  }
                  name
                  optional
                }
                csi {
                  driver
                  fsType
                  nodePublishSecretRef {
                    name
                  }
                  readOnly
                }
                downwardAPI {
                  defaultMode
                  items {
                    fieldRef {
                      apiVersion
                      fieldPath
                    }
                    mode
                    path
                    resourceFieldRef {
                      containerName
                      resource
                    }
                  }
                }
                emptyDir {
                  medium
                }
                ephemeral {
                  volumeClaimTemplate {
                    spec {
                      accessModes
                      dataSource {
                        apiGroup
                        kind
                        name
                      }
                      dataSourceRef {
                        apiGroup
                        kind
                        name
                        namespace
                      }
                      resources {
                        claims {
                          name
                        }
                      }
                      selector {
                        matchExpressions {
                          key
                          operator
                          values
                        }
                      }
                      storageClassName
                      volumeMode
                      volumeName
                    }
                  }
                }
                fc {
                  fsType
                  lun
                  readOnly
                  targetWWNs
                  wwids
                }
                flexVolume {
                  driver
                  fsType
                  readOnly
                  secretRef {
                    name
                  }
                }
                flocker {
                  datasetName
                  datasetUUID
                }
                gcePersistentDisk {
                  fsType
                  partition
                  pdName
                  readOnly
                }
                gitRepo {
                  directory
                  repository
                  revision
                }
                glusterfs {
                  endpoints
                  path
                  readOnly
                }
                hostPath {
                  path
                  type
                }
                iscsi {
                  chapAuthDiscovery
                  chapAuthSession
                  fsType
                  initiatorName
                  iqn
                  iscsiInterface
                  lun
                  portals
                  readOnly
                  secretRef {
                    name
                  }
                  targetPortal
                }
                name
                nfs {
                  path
                  readOnly
                  server
                }
                persistentVolumeClaim {
                  claimName
                  readOnly
                }
                photonPersistentDisk {
                  fsType
                  pdID
                }
                portworxVolume {
                  fsType
                  readOnly
                  volumeID
                }
                projected {
                  defaultMode
                  sources {
                    configMap {
                      items {
                        key
                        mode
                        path
                      }
                      name
                      optional
                    }
                    downwardAPI {
                      items {
                        fieldRef {
                          apiVersion
                          fieldPath
                        }
                        mode
                        path
                        resourceFieldRef {
                          containerName
                          resource
                        }
                      }
                    }
                    secret {
                      items {
                        key
                        mode
                        path
                      }
                      name
                      optional
                    }
                    serviceAccountToken {
                      audience
                      expirationSeconds
                      path
                    }
                  }
                }
                quobyte {
                  group
                  readOnly
                  registry
                  tenant
                  user
                  volume
                }
                rbd {
                  fsType
                  image
                  keyring
                  monitors
                  pool
                  readOnly
                  secretRef {
                    name
                  }
                  user
                }
                scaleIO {
                  fsType
                  gateway
                  protectionDomain
                  readOnly
                  secretRef {
                    name
                  }
                  sslEnabled
                  storageMode
                  storagePool
                  system
                  volumeName
                }
                secret {
                  defaultMode
                  items {
                    key
                    mode
                    path
                  }
                  optional
                  secretName
                }
                storageos {
                  fsType
                  readOnly
                  secretRef {
                    name
                  }
                  volumeName
                  volumeNamespace
                }
                vsphereVolume {
                  fsType
                  storagePolicyID
                  storagePolicyName
                  volumePath
                }
              }
            }
          }
          updateStrategy {
            rollingUpdate {
              partition
            }
            type
          }
          volumeClaimTemplates {
            apiVersion
            kind
            metadata {
              name
              namespace
            }
            spec {
              accessModes
              dataSource {
                apiGroup
                kind
                name
              }
              dataSourceRef {
                apiGroup
                kind
                name
                namespace
              }
              resources {
                claims {
                  name
                }
              }
              selector {
                matchExpressions {
                  key
                  operator
                  values
                }
              }
              storageClassName
              volumeMode
              volumeName
            }
          }
        }
      }
    }
    persistence {
      storageClassName
    }
    rabbitmq {
      additionalConfig
      additionalPlugins
      advancedConfig
      envConfig
    }
    replicas
    resources {
      claims {
        name
      }
    }
    secretBackend {
      externalSecret {
        name
      }
      vault {
        defaultUserPath
        defaultUserUpdaterImage
        role
        tls {
          altNames
          commonName
          ipSans
          pkiIssuerPath
        }
      }
    }
    service {
      type
    }
    skipPostDeploySteps
    terminationGracePeriodSeconds
    tls {
      caSecretName
      disableNonTLSListeners
      secretName
    }
    tolerations {
      effect
      key
      operator
      tolerationSeconds
      value
    }
    status {
      binding {
        name
      }
      conditions {
        lastTransitionTime
        message
        reason
        status
        type
      }
      defaultUser {
        secretReference {
          name
          namespace
        }
        serviceReference {
          name
          namespace
        }
      }
      observedGeneration
    }
  }
}
