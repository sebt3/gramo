import { QTableColumn } from 'quasar'
import { ref, gqlDataToYaml, tableColumnAlign, useCore, useNavigationStoreRef } from '../core'
export { ref, useCore, useQuery, useMutation, sanitizeData, getProperties } from '../core';
export { HorizontalPodAutoscalerListExcludes, HorizontalPodAutoscalerReadExcludes, HorizontalPodAutoscalerSimpleExcludes } from './custom.js'
import { extraHorizontalPodAutoscalerColumns } from './custom.js'
import { stringify, parse } from 'yaml'

export const HorizontalPodAutoscalerColumns:Array<QTableColumn> = ([
  {name: 'Name', label: 'Name', field: row => row.metadata.name, sortable: true, align: tableColumnAlign.left}
] as Array<QTableColumn>).concat(extraHorizontalPodAutoscalerColumns).concat([
  {name: 'Action', label: '', field: 'Action', sortable: false, align: tableColumnAlign.right}
]);
export const HorizontalPodAutoscalerAllColumns = ([
  {name: 'Namespace', label: 'Namespace', field: row => row.metadata.namespace, sortable: true, align: tableColumnAlign.left}
] as Array<QTableColumn>).concat(HorizontalPodAutoscalerColumns);

export const HorizontalPodAutoscalerDefinition = {"description":"HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.","type":"object","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"spec":{"description":"HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.","type":"object","required":["scaleTargetRef","maxReplicas"],"properties":{"behavior":{"description":"HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).","type":"object","properties":{"scaleDown":{"description":"HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.","type":"object","properties":{"policies":{"description":"policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid","type":"array","items":{"description":"HPAScalingPolicy is a single policy which must hold true for a specified past interval.","type":"object","required":["type","value","periodSeconds"],"properties":{"periodSeconds":{"description":"periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).","type":"integer","format":"int32"},"type":{"description":"type is used to specify the scaling policy.","type":"string"},"value":{"description":"value contains the amount of change which is permitted by the policy. It must be greater than zero","type":"integer","format":"int32"}}},"x-kubernetes-list-type":"atomic"},"selectPolicy":{"description":"selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.","type":"string"},"stabilizationWindowSeconds":{"description":"stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).","type":"integer","format":"int32"}}},"scaleUp":{"description":"HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.","type":"object","properties":{"policies":{"description":"policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid","type":"array","items":{"description":"HPAScalingPolicy is a single policy which must hold true for a specified past interval.","type":"object","required":["type","value","periodSeconds"],"properties":{"periodSeconds":{"description":"periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).","type":"integer","format":"int32"},"type":{"description":"type is used to specify the scaling policy.","type":"string"},"value":{"description":"value contains the amount of change which is permitted by the policy. It must be greater than zero","type":"integer","format":"int32"}}},"x-kubernetes-list-type":"atomic"},"selectPolicy":{"description":"selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.","type":"string"},"stabilizationWindowSeconds":{"description":"stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).","type":"integer","format":"int32"}}}}},"maxReplicas":{"description":"maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.","type":"integer","format":"int32"},"metrics":{"description":"metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.","type":"array","items":{"description":"MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).","type":"object","required":["type"],"properties":{"containerResource":{"description":"ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.","type":"object","required":["name","target","container"],"properties":{"container":{"description":"container is the name of the container in the pods of the scaling target","type":"string"},"name":{"description":"name is the name of the resource in question.","type":"string"},"target":{"description":"MetricTarget defines the target value, average value, or average utilization of a specific metric","type":"object","required":["type"],"properties":{"averageUtilization":{"description":"averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the target value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"type":{"description":"type represents whether the metric type is Utilization, Value, or AverageValue","type":"string"},"value":{"description":"value is the target value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}}}},"external":{"description":"ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).","type":"object","required":["metric","target"],"properties":{"metric":{"description":"MetricIdentifier defines the name and optionally selector for a metric","type":"object","required":["name"],"properties":{"name":{"description":"name is the name of the given metric","type":"string"},"selector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","type":"object","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string","x-kubernetes-patch-merge-key":"key","x-kubernetes-patch-strategy":"merge"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","type":"array","items":{"type":"string"}}}}},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}}},"x-kubernetes-map-type":"atomic"}}},"target":{"description":"MetricTarget defines the target value, average value, or average utilization of a specific metric","type":"object","required":["type"],"properties":{"averageUtilization":{"description":"averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the target value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"type":{"description":"type represents whether the metric type is Utilization, Value, or AverageValue","type":"string"},"value":{"description":"value is the target value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}}}},"object":{"description":"ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).","type":"object","required":["describedObject","target","metric"],"properties":{"describedObject":{"description":"CrossVersionObjectReference contains enough information to let you identify the referred resource.","type":"object","required":["kind","name"],"properties":{"apiVersion":{"description":"apiVersion is the API version of the referent","type":"string"},"kind":{"description":"kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"name":{"description":"name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}}},"metric":{"description":"MetricIdentifier defines the name and optionally selector for a metric","type":"object","required":["name"],"properties":{"name":{"description":"name is the name of the given metric","type":"string"},"selector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","type":"object","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string","x-kubernetes-patch-merge-key":"key","x-kubernetes-patch-strategy":"merge"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","type":"array","items":{"type":"string"}}}}},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}}},"x-kubernetes-map-type":"atomic"}}},"target":{"description":"MetricTarget defines the target value, average value, or average utilization of a specific metric","type":"object","required":["type"],"properties":{"averageUtilization":{"description":"averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the target value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"type":{"description":"type represents whether the metric type is Utilization, Value, or AverageValue","type":"string"},"value":{"description":"value is the target value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}}}},"pods":{"description":"PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.","type":"object","required":["metric","target"],"properties":{"metric":{"description":"MetricIdentifier defines the name and optionally selector for a metric","type":"object","required":["name"],"properties":{"name":{"description":"name is the name of the given metric","type":"string"},"selector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","type":"object","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string","x-kubernetes-patch-merge-key":"key","x-kubernetes-patch-strategy":"merge"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","type":"array","items":{"type":"string"}}}}},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}}},"x-kubernetes-map-type":"atomic"}}},"target":{"description":"MetricTarget defines the target value, average value, or average utilization of a specific metric","type":"object","required":["type"],"properties":{"averageUtilization":{"description":"averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the target value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"type":{"description":"type represents whether the metric type is Utilization, Value, or AverageValue","type":"string"},"value":{"description":"value is the target value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}}}},"resource":{"description":"ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.","type":"object","required":["name","target"],"properties":{"name":{"description":"name is the name of the resource in question.","type":"string"},"target":{"description":"MetricTarget defines the target value, average value, or average utilization of a specific metric","type":"object","required":["type"],"properties":{"averageUtilization":{"description":"averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the target value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"type":{"description":"type represents whether the metric type is Utilization, Value, or AverageValue","type":"string"},"value":{"description":"value is the target value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}}}},"type":{"description":"type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled","type":"string"}}},"x-kubernetes-list-type":"atomic"},"minReplicas":{"description":"minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.","type":"integer","format":"int32"},"scaleTargetRef":{"description":"CrossVersionObjectReference contains enough information to let you identify the referred resource.","type":"object","required":["kind","name"],"properties":{"apiVersion":{"description":"apiVersion is the API version of the referent","type":"string"},"kind":{"description":"kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"name":{"description":"name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}}}}},"status":{"description":"HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.","type":"object","required":["desiredReplicas"],"properties":{"conditions":{"description":"conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.","type":"array","items":{"description":"HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.","type":"object","required":["type","status"],"properties":{"lastTransitionTime":{"description":"lastTransitionTime is the last time the condition transitioned from one status to another","$ref":"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"},"message":{"description":"message is a human-readable explanation containing details about the transition","type":"string"},"reason":{"description":"reason is the reason for the condition's last transition.","type":"string"},"status":{"description":"status is the status of the condition (True, False, Unknown)","type":"string"},"type":{"description":"type describes the current condition","type":"string"}}},"x-kubernetes-list-map-keys":["type"],"x-kubernetes-list-type":"map","x-kubernetes-patch-merge-key":"type","x-kubernetes-patch-strategy":"merge"},"currentMetrics":{"description":"currentMetrics is the last read state of the metrics used by this autoscaler.","type":"array","items":{"description":"MetricStatus describes the last-read state of a single metric.","type":"object","required":["type"],"properties":{"containerResource":{"description":"ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.","type":"object","required":["name","current","container"],"properties":{"container":{"description":"container is the name of the container in the pods of the scaling target","type":"string"},"current":{"description":"MetricValueStatus holds the current value for a metric","type":"object","properties":{"averageUtilization":{"description":"currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the current value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"value":{"description":"value is the current value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}},"name":{"description":"name is the name of the resource in question.","type":"string"}}},"external":{"description":"ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.","type":"object","required":["metric","current"],"properties":{"current":{"description":"MetricValueStatus holds the current value for a metric","type":"object","properties":{"averageUtilization":{"description":"currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the current value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"value":{"description":"value is the current value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}},"metric":{"description":"MetricIdentifier defines the name and optionally selector for a metric","type":"object","required":["name"],"properties":{"name":{"description":"name is the name of the given metric","type":"string"},"selector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","type":"object","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string","x-kubernetes-patch-merge-key":"key","x-kubernetes-patch-strategy":"merge"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","type":"array","items":{"type":"string"}}}}},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}}},"x-kubernetes-map-type":"atomic"}}}}},"object":{"description":"ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).","type":"object","required":["metric","current","describedObject"],"properties":{"current":{"description":"MetricValueStatus holds the current value for a metric","type":"object","properties":{"averageUtilization":{"description":"currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the current value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"value":{"description":"value is the current value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}},"describedObject":{"description":"CrossVersionObjectReference contains enough information to let you identify the referred resource.","type":"object","required":["kind","name"],"properties":{"apiVersion":{"description":"apiVersion is the API version of the referent","type":"string"},"kind":{"description":"kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"name":{"description":"name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string"}}},"metric":{"description":"MetricIdentifier defines the name and optionally selector for a metric","type":"object","required":["name"],"properties":{"name":{"description":"name is the name of the given metric","type":"string"},"selector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","type":"object","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string","x-kubernetes-patch-merge-key":"key","x-kubernetes-patch-strategy":"merge"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","type":"array","items":{"type":"string"}}}}},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}}},"x-kubernetes-map-type":"atomic"}}}}},"pods":{"description":"PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).","type":"object","required":["metric","current"],"properties":{"current":{"description":"MetricValueStatus holds the current value for a metric","type":"object","properties":{"averageUtilization":{"description":"currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the current value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"value":{"description":"value is the current value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}},"metric":{"description":"MetricIdentifier defines the name and optionally selector for a metric","type":"object","required":["name"],"properties":{"name":{"description":"name is the name of the given metric","type":"string"},"selector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","type":"object","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string","x-kubernetes-patch-merge-key":"key","x-kubernetes-patch-strategy":"merge"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","type":"array","items":{"type":"string"}}}}},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}}},"x-kubernetes-map-type":"atomic"}}}}},"resource":{"description":"ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.","type":"object","required":["name","current"],"properties":{"current":{"description":"MetricValueStatus holds the current value for a metric","type":"object","properties":{"averageUtilization":{"description":"currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.","type":"integer","format":"int32"},"averageValue":{"description":"averageValue is the current value of the average of the metric across all relevant pods (as a quantity)","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"},"value":{"description":"value is the current value of the metric (as a quantity).","$ref":"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"}}},"name":{"description":"name is the name of the resource in question.","type":"string"}}},"type":{"description":"type is the type of metric source.  It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled","type":"string"}}},"x-kubernetes-list-type":"atomic"},"currentReplicas":{"description":"currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.","type":"integer","format":"int32"},"desiredReplicas":{"description":"desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.","type":"integer","format":"int32"},"lastScaleTime":{"description":"lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.","$ref":"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"},"observedGeneration":{"description":"observedGeneration is the most recent generation observed by this autoscaler.","type":"integer","format":"int64"}}}},"x-kubernetes-group-version-kind":[{"group":"autoscaling","kind":"HorizontalPodAutoscaler","version":"v2"}]};

export function useHorizontalPodAutoscaler() {
  const { router, $q, pagination, setItemFromRoute, onErrorHandler, notify, notifySuccess, notifyError, notifyWorking, isNamespaced, setNamespaceFromRoute, setNamespacedItemFromRoute } = useCore();
  const viewer = ref({
      tab: 'simple',
      full: '',
      props: {
        "spec": '',
      }
  });
  const onlyReadProperties = (obj) => {
      const res = {}
      Object.keys(obj).forEach(k=>{
        if (["spec","status"].includes(k)||k=='metadata')
          res[k] = obj[k];
      })
      return res
    };
  const onlyWriteProperties = (obj) => {
      const res = {}
      Object.keys(obj).forEach(k=>{
        if (["spec"].includes(k))
          res[k] = obj[k];
      })
      return res
    };
  const editor = ref({
      tab: 'simple',
      yaml: '',
      obj: {},
      setKey: (key, o) => {editor.value.obj[key] = o;editor.value.yaml = stringify(editor.value.obj)},
      ready: false,
      setYaml: (y) => {editor.value.yaml = y;editor.value.obj = parse(y);},
      updateFromQuery: (res: object, obj: object) => {editor.value.ready=false;if(!res['loading']){editor.value.obj = onlyWriteProperties(obj);editor.value.yaml = stringify(editor.value.obj);editor.value.ready=true;}},
  });
  return {
    onlyReadProperties, onlyWriteProperties, editor, viewer, viewerUpdate: (obj) => {
      viewer.value.full=gqlDataToYaml(obj)
      viewer.value.props["spec"]=gqlDataToYaml({"spec": obj["spec"]})
    },
    navigation: useNavigationStoreRef(),
    isNamespaced, setNamespaceFromRoute, setNamespacedItemFromRoute,
    router, pagination, setItemFromRoute, notify, notifySuccess, notifyError, notifyWorking, onErrorHandler,
    onNotHorizontalPodAutoscalerFound: (res) => {
    if ( !res.loading && res.data.k8sNamespace[0].k8sHorizontalPodAutoscaler == null) {
        const matched = router.currentRoute.value.matched
        notifyError('HorizontalPodAutoscaler not found');
        router.push({
          path: matched[matched.length>1?matched.length-2:matched.length-1].path,
          replace: true
        })
      }
    },
    toView: (namespace, name) => router.push({ name: 'k8sHorizontalPodAutoscalerView', params: {name, namespace}}),
    toViewReloaded: async (namespace, name) => {await router.push({ name: 'k8sHorizontalPodAutoscalerView', params: {name, namespace}});router.go(0);},
    toEdit: (namespace, name) => router.push({ name: 'k8sHorizontalPodAutoscalerEdit', params: {name, namespace}}),
    deleteDone: () => notifySuccess('Deletion proceded'),
    deleteError: (err) => {
      notifyError('Deletion failed');
      console.log('deletion error',err);
    },
    patchDone: () => {
      notifySuccess('Modification applied');
      router.go(-1);
    },
    patchError: (err) => {
      notifyError('Modification failed');
      console.log('mutation error', err)
    },
    actionNew: (namespace)    => router.push({ name: 'k8sHorizontalPodAutoscalerCreate', params: {namespace}}),
    actionDelete: (deletor, meta) => {
      $q.dialog({
        title: 'Confirm <span class="text-red">delete</span>',
        message: `<em>You are</em> about to <span class="text-red">delete</span> HorizontalPodAutoscaler <strong>${meta.name}</strong>`,
        persistent: true, cancel: true, html: true, ok: {color: 'negative'}
      }).onOk(() => {
        notifyWorking('Delete in progress');
        deletor({"name": meta.name, "namespace":meta.namespace});
      })
    },
  }
}