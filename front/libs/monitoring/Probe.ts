import { QTableColumn } from 'quasar'
import { ref, gqlDataToYaml, tableColumnAlign, useCore, useNavigationStoreRef } from '../core'
export { ref, useCore, useQuery, useMutation, sanitizeData, getProperties } from '../core';
export { ProbeListExcludes, ProbeReadExcludes, ProbeSimpleExcludes } from './custom.js'
import { extraProbeColumns } from './custom.js'
import { stringify, parse } from 'yaml'

export const ProbeColumns:Array<QTableColumn> = ([
  {name: 'Name', label: 'Name', field: row => row.metadata.name, sortable: true, align: tableColumnAlign.left}
] as Array<QTableColumn>).concat(extraProbeColumns).concat([
  {name: 'Action', label: '', field: 'Action', sortable: false, align: tableColumnAlign.right}
]);
export const ProbeAllColumns = ([
  {name: 'Namespace', label: 'Namespace', field: row => row.metadata.namespace, sortable: true, align: tableColumnAlign.left}
] as Array<QTableColumn>).concat(ProbeColumns);

export const ProbeDefinition = {"description":"Probe defines monitoring for a set of static targets or ingresses.","type":"object","required":["spec"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"spec":{"description":"Specification of desired Ingress selection for target discovery by Prometheus.","type":"object","properties":{"authorization":{"description":"Authorization section for this endpoint","type":"object","properties":{"credentials":{"description":"Selects a key of a Secret in the namespace that contains the credentials for authentication.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"},"type":{"description":"Defines the authentication type. The value is case-insensitive. \n \"Basic\" is not a supported value. \n Default: \"Bearer\"","type":"string"}}},"basicAuth":{"description":"BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint","type":"object","properties":{"password":{"description":"`password` specifies a key of a Secret containing the password for authentication.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"},"username":{"description":"`username` specifies a key of a Secret containing the username for authentication.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"}}},"bearerTokenSecret":{"description":"Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"},"interval":{"description":"Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.","type":"string","pattern":"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"},"jobName":{"description":"The job name assigned to scraped metrics by default.","type":"string"},"keepDroppedTargets":{"description":"Per-scrape limit on the number of targets dropped by relabeling that will be kept in memory. 0 means no limit. \n It requires Prometheus >= v2.47.0.","type":"integer","format":"int64"},"labelLimit":{"description":"Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.","type":"integer","format":"int64"},"labelNameLengthLimit":{"description":"Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.","type":"integer","format":"int64"},"labelValueLengthLimit":{"description":"Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.","type":"integer","format":"int64"},"metricRelabelings":{"description":"MetricRelabelConfigs to apply to samples before ingestion.","type":"array","items":{"description":"RelabelConfig allows dynamic rewriting of the label set for targets, alerts, scraped samples and remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config","type":"object","properties":{"action":{"description":"Action to perform based on the regex matching. \n `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0. `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0. \n Default: \"Replace\"","type":"string","enum":["replace","Replace","keep","Keep","drop","Drop","hashmod","HashMod","labelmap","LabelMap","labeldrop","LabelDrop","labelkeep","LabelKeep","lowercase","Lowercase","uppercase","Uppercase","keepequal","KeepEqual","dropequal","DropEqual"]},"modulus":{"description":"Modulus to take of the hash of the source label values. \n Only applicable when the action is `HashMod`.","type":"integer","format":"int64"},"regex":{"description":"Regular expression against which the extracted value is matched.","type":"string"},"replacement":{"description":"Replacement value against which a Replace action is performed if the regular expression matches. \n Regex capture groups are available.","type":"string"},"separator":{"description":"Separator is the string between concatenated SourceLabels.","type":"string"},"sourceLabels":{"description":"The source labels select values from existing labels. Their content is concatenated using the configured Separator and matched against the configured regular expression.","type":"array","items":{"description":"LabelName is a valid Prometheus label name which may only contain ASCII letters, numbers, as well as underscores.","type":"string","pattern":"^[a-zA-Z_][a-zA-Z0-9_]*$"}},"targetLabel":{"description":"Label to which the resulting string is written in a replacement. \n It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and `DropEqual` actions. \n Regex capture groups are available.","type":"string"}}}},"module":{"description":"The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml","type":"string"},"oauth2":{"description":"OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.","type":"object","required":["clientId","clientSecret","tokenUrl"],"properties":{"clientId":{"description":"`clientId` specifies a key of a Secret or ConfigMap containing the OAuth2 client's ID.","type":"object","properties":{"configMap":{"description":"ConfigMap containing data to use for the targets.","type":"object","required":["key"],"properties":{"key":{"description":"The key to select.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the ConfigMap or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"},"secret":{"description":"Secret containing data to use for the targets.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"}}},"clientSecret":{"description":"`clientSecret` specifies a key of a Secret containing the OAuth2 client's secret.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"},"endpointParams":{"description":"`endpointParams` configures the HTTP parameters to append to the token URL.","type":"object","additionalProperties":{"type":"string"}},"scopes":{"description":"`scopes` defines the OAuth2 scopes used for the token request.","type":"array","items":{"type":"string"}},"tokenUrl":{"description":"`tokenURL` configures the URL to fetch the token from.","type":"string","minLength":1}}},"prober":{"description":"Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.","type":"object","required":["url"],"properties":{"path":{"description":"Path to collect metrics from. Defaults to `/probe`.","type":"string"},"proxyUrl":{"description":"Optional ProxyURL.","type":"string"},"scheme":{"description":"HTTP scheme to use for scraping. `http` and `https` are the expected values unless you rewrite the `__scheme__` label via relabeling. If empty, Prometheus uses the default value `http`.","type":"string","enum":["http","https"]},"url":{"description":"Mandatory URL of the prober.","type":"string"}}},"sampleLimit":{"description":"SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.","type":"integer","format":"int64"},"scrapeTimeout":{"description":"Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape timeout is used.","type":"string","pattern":"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$"},"targetLimit":{"description":"TargetLimit defines a limit on the number of scraped targets that will be accepted.","type":"integer","format":"int64"},"targets":{"description":"Targets defines a set of static or dynamically discovered targets to probe.","type":"object","properties":{"ingress":{"description":"ingress defines the Ingress objects to probe and the relabeling configuration. If `staticConfig` is also defined, `staticConfig` takes precedence.","type":"object","properties":{"namespaceSelector":{"description":"From which namespaces to select Ingress objects.","type":"object","properties":{"any":{"description":"Boolean describing whether all namespaces are selected in contrast to a list restricting them.","type":"boolean"},"matchNames":{"description":"List of namespace names to select from.","type":"array","items":{"type":"string"}}}},"relabelingConfigs":{"description":"RelabelConfigs to apply to the label set of the target before it gets scraped. The original ingress address is available via the `__tmp_prometheus_ingress_address` label. It can be used to customize the probed URL. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config","type":"array","items":{"description":"RelabelConfig allows dynamic rewriting of the label set for targets, alerts, scraped samples and remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config","type":"object","properties":{"action":{"description":"Action to perform based on the regex matching. \n `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0. `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0. \n Default: \"Replace\"","type":"string","enum":["replace","Replace","keep","Keep","drop","Drop","hashmod","HashMod","labelmap","LabelMap","labeldrop","LabelDrop","labelkeep","LabelKeep","lowercase","Lowercase","uppercase","Uppercase","keepequal","KeepEqual","dropequal","DropEqual"]},"modulus":{"description":"Modulus to take of the hash of the source label values. \n Only applicable when the action is `HashMod`.","type":"integer","format":"int64"},"regex":{"description":"Regular expression against which the extracted value is matched.","type":"string"},"replacement":{"description":"Replacement value against which a Replace action is performed if the regular expression matches. \n Regex capture groups are available.","type":"string"},"separator":{"description":"Separator is the string between concatenated SourceLabels.","type":"string"},"sourceLabels":{"description":"The source labels select values from existing labels. Their content is concatenated using the configured Separator and matched against the configured regular expression.","type":"array","items":{"description":"LabelName is a valid Prometheus label name which may only contain ASCII letters, numbers, as well as underscores.","type":"string","pattern":"^[a-zA-Z_][a-zA-Z0-9_]*$"}},"targetLabel":{"description":"Label to which the resulting string is written in a replacement. \n It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and `DropEqual` actions. \n Regex capture groups are available.","type":"string"}}}},"selector":{"description":"Selector to select the Ingress objects.","type":"object","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","type":"array","items":{"type":"string"}}}}},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}}},"x-kubernetes-map-type":"atomic"}}},"staticConfig":{"description":"staticConfig defines the static list of targets to probe and the relabeling configuration. If `ingress` is also defined, `staticConfig` takes precedence. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.","type":"object","properties":{"labels":{"description":"Labels assigned to all metrics scraped from the targets.","type":"object","additionalProperties":{"type":"string"}},"relabelingConfigs":{"description":"RelabelConfigs to apply to the label set of the targets before it gets scraped. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config","type":"array","items":{"description":"RelabelConfig allows dynamic rewriting of the label set for targets, alerts, scraped samples and remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config","type":"object","properties":{"action":{"description":"Action to perform based on the regex matching. \n `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0. `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0. \n Default: \"Replace\"","type":"string","enum":["replace","Replace","keep","Keep","drop","Drop","hashmod","HashMod","labelmap","LabelMap","labeldrop","LabelDrop","labelkeep","LabelKeep","lowercase","Lowercase","uppercase","Uppercase","keepequal","KeepEqual","dropequal","DropEqual"]},"modulus":{"description":"Modulus to take of the hash of the source label values. \n Only applicable when the action is `HashMod`.","type":"integer","format":"int64"},"regex":{"description":"Regular expression against which the extracted value is matched.","type":"string"},"replacement":{"description":"Replacement value against which a Replace action is performed if the regular expression matches. \n Regex capture groups are available.","type":"string"},"separator":{"description":"Separator is the string between concatenated SourceLabels.","type":"string"},"sourceLabels":{"description":"The source labels select values from existing labels. Their content is concatenated using the configured Separator and matched against the configured regular expression.","type":"array","items":{"description":"LabelName is a valid Prometheus label name which may only contain ASCII letters, numbers, as well as underscores.","type":"string","pattern":"^[a-zA-Z_][a-zA-Z0-9_]*$"}},"targetLabel":{"description":"Label to which the resulting string is written in a replacement. \n It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and `DropEqual` actions. \n Regex capture groups are available.","type":"string"}}}},"static":{"description":"The list of hosts to probe.","type":"array","items":{"type":"string"}}}}}},"tlsConfig":{"description":"TLS configuration to use when scraping the endpoint.","type":"object","properties":{"ca":{"description":"Certificate authority used when verifying server certificates.","type":"object","properties":{"configMap":{"description":"ConfigMap containing data to use for the targets.","type":"object","required":["key"],"properties":{"key":{"description":"The key to select.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the ConfigMap or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"},"secret":{"description":"Secret containing data to use for the targets.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"}}},"cert":{"description":"Client certificate to present when doing client-authentication.","type":"object","properties":{"configMap":{"description":"ConfigMap containing data to use for the targets.","type":"object","required":["key"],"properties":{"key":{"description":"The key to select.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the ConfigMap or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"},"secret":{"description":"Secret containing data to use for the targets.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"}}},"insecureSkipVerify":{"description":"Disable target certificate validation.","type":"boolean"},"keySecret":{"description":"Secret containing the client key file for the targets.","type":"object","required":["key"],"properties":{"key":{"description":"The key of the secret to select from.  Must be a valid secret key.","type":"string"},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?","type":"string"},"optional":{"description":"Specify whether the Secret or its key must be defined","type":"boolean"}},"x-kubernetes-map-type":"atomic"},"serverName":{"description":"Used to verify the hostname for the targets.","type":"string"}}}}}},"x-kubernetes-group-version-kind":[{"group":"monitoring.coreos.com","kind":"Probe","version":"v1"}]};

export function useProbe() {
  const { router, $q, pagination, setItemFromRoute, onErrorHandler, notify, notifySuccess, notifyError, notifyWorking, isNamespaced, setNamespaceFromRoute, setNamespacedItemFromRoute } = useCore();
  const viewer = ref({
      tab: 'simple',
      full: '',
      props: {
        "spec": '',
      }
  });
  const editor = ref({
      tab: 'simple',
      yaml: '',
      obj: {},
      setKey: (key, o) => {editor.value.obj[key] = o;editor.value.yaml = stringify(editor.value.obj)},
      ready: false,
      setYaml: (y) => {editor.value.yaml = y;editor.value.obj = parse(y);},
//      updateFromQuery: (res: object, obj: object) => {editor.value.ready=false;if(!res['loading']){editor.value.setSpec(obj);editor.value.ready=true;}},
  });
  return {
    editor, viewer, viewerUpdate: (obj) => {
      viewer.value.full=gqlDataToYaml(obj)
      viewer.value.props["spec"]=gqlDataToYaml({"spec": obj["spec"]})
    },
    navigation: useNavigationStoreRef(),
    onlyReadProperties: (obj) => {
      const res = {}
      Object.keys(obj).forEach(k=>{
        if (["spec"].includes(k)||k=='metadata')
          res[k] = obj[k];
      })
      return res
    },
    onlyWriteProperties: (obj) => {
      const res = {}
      Object.keys(obj).forEach(k=>{
        if (["spec"].includes(k))
          res[k] = obj[k];
      })
      return res
    },
    isNamespaced, setNamespaceFromRoute, setNamespacedItemFromRoute,
    router, pagination, setItemFromRoute, notify, notifySuccess, notifyError, notifyWorking, onErrorHandler,
    onNotProbeFound: (res) => {
    if ( !res.loading && res.data.k8sNamespace[0].monitoringProbe == null) {
        const matched = router.currentRoute.value.matched
        notifyError('Probe not found');
        router.push({
          path: matched[matched.length>1?matched.length-2:matched.length-1].path,
          replace: true
        })
      }
    },
    toView: (namespace, name) => router.push({ name: 'monitoringProbeView', params: {name, namespace}}),
    toViewReloaded: async (namespace, name) => {await router.push({ name: 'monitoringProbeView', params: {name, namespace}});router.go(0);},
    toEdit: (namespace, name) => router.push({ name: 'monitoringProbeEdit', params: {name, namespace}}),
    deleteDone: () => notifySuccess('Deletion proceded'),
    deleteError: (err) => {
      notifyError('Deletion failed');
      console.log('deletion error',err);
    },
    patchDone: () => {
      notifySuccess('Modification applied');
      router.go(-1);
    },
    patchError: (err) => {
      notifyError('Modification failed');
      console.log('mutation error', err)
    },
    actionNew: (namespace)    => router.push({ name: 'monitoringProbeCreate', params: {namespace}}),
    actionDelete: (deletor, meta) => {
      $q.dialog({
        title: 'Confirm <span class="text-red">delete</span>',
        message: `<em>You are</em> about to <span class="text-red">delete</span> Probe <strong>${meta.name}</strong>`,
        persistent: true, cancel: true, html: true, ok: {color: 'negative'}
      }).onOk(() => {
        notifyWorking('Delete in progress');
        deletor({"name": meta.name, "namespace":meta.namespace});
      })
    },
  }
}