type redisRedis {
    metadata: metadata!
    spec: JSONObject
    status: JSONObject
    childService(params: queryParameters): [k8sService]
    childStatefulSet(params: queryParameters): [k8sStatefulSet]
}
type redisRedisCluster {
    metadata: metadata!
    spec: JSONObject
    status: JSONObject
}
type redisRedisReplication {
    metadata: metadata!
    spec: JSONObject
    status: JSONObject
}
type redisRedisSentinel {
    metadata: metadata!
    spec: JSONObject
    status: JSONObject
}
type Mutation {
    redisRedisCreate(namespace: String!, name: String!, spec: JSONObject, metadata: metadataMore): redisRedis
    redisRedisPatch(namespace: String!, name: String!, spec: JSONObject, metadata: metadataMore): redisRedis
    redisRedisDelete(namespace: String!, name: String!): redisRedis
    redisRedisClusterCreate(namespace: String!, name: String!, spec: JSONObject, metadata: metadataMore): redisRedisCluster
    redisRedisClusterPatch(namespace: String!, name: String!, spec: JSONObject, metadata: metadataMore): redisRedisCluster
    redisRedisClusterDelete(namespace: String!, name: String!): redisRedisCluster
    redisRedisReplicationCreate(namespace: String!, name: String!, spec: JSONObject, metadata: metadataMore): redisRedisReplication
    redisRedisReplicationPatch(namespace: String!, name: String!, spec: JSONObject, metadata: metadataMore): redisRedisReplication
    redisRedisReplicationDelete(namespace: String!, name: String!): redisRedisReplication
    redisRedisSentinelCreate(namespace: String!, name: String!, spec: JSONObject, metadata: metadataMore): redisRedisSentinel
    redisRedisSentinelPatch(namespace: String!, name: String!, spec: JSONObject, metadata: metadataMore): redisRedisSentinel
    redisRedisSentinelDelete(namespace: String!, name: String!): redisRedisSentinel
}
