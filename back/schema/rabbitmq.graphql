
type rabbitmqRabbitmqClusterStatusBinding {
  name: String
}
type rabbitmqRabbitmqClusterStatusConditionsItem {
  lastTransitionTime: String
  message: String
  reason: String
  status: String!
  type: String!
}
type rabbitmqRabbitmqClusterStatusDefaultUserSecretReference {
  keys: JSONObject!
  name: String!
  namespace: String!
}
type rabbitmqRabbitmqClusterStatusDefaultUserServiceReference {
  name: String!
  namespace: String!
}
type rabbitmqRabbitmqClusterStatusDefaultUser {
  secretReference: rabbitmqRabbitmqClusterStatusDefaultUserSecretReference
  serviceReference: rabbitmqRabbitmqClusterStatusDefaultUserServiceReference
}
type rabbitmqRabbitmqClusterStatus {
  binding: rabbitmqRabbitmqClusterStatusBinding
  conditions: [rabbitmqRabbitmqClusterStatusConditionsItem]!
  defaultUser: rabbitmqRabbitmqClusterStatusDefaultUser
  observedGeneration: Int
}
input rabbitmqRabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
input rabbitmqRabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference {
  matchExpressions: [rabbitmqRabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem]
  matchFields: [rabbitmqRabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem]
}
input rabbitmqRabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  preference: rabbitmqRabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!
  weight: Int!
}
input rabbitmqRabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  nodeSelectorTerms: [rabbitmqRabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!]
}
input rabbitmqRabbitmqClusterSpecAffinityNodeAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: rabbitmqRabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
}
input rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
input rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
  matchExpressions: [rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem]
  matchLabels: JSONObject
}
input rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm {
  labelSelector: rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  namespaceSelector: rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  namespaces: [String]
  topologyKey: String!
}
input rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  podAffinityTerm: rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm!
  weight: Int!
}
input rabbitmqRabbitmqClusterSpecAffinityPodAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
input rabbitmqRabbitmqClusterSpecAffinityPodAntiAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
input rabbitmqRabbitmqClusterSpecAffinity {
  nodeAffinity: rabbitmqRabbitmqClusterSpecAffinityNodeAffinity
  podAffinity: rabbitmqRabbitmqClusterSpecAffinityPodAffinity
  podAntiAffinity: rabbitmqRabbitmqClusterSpecAffinityPodAntiAffinity
}
input rabbitmqRabbitmqClusterSpecImagePullSecretsItem {
  name: String
}
input rabbitmqRabbitmqClusterSpecOverrideServiceSpecPortsItem {
  appProtocol: String
  name: String
  nodePort: Int
  port: Int!
  protocol: String
  targetPort: JSONObject
}
input rabbitmqRabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIP {
  timeoutSeconds: Int
}
input rabbitmqRabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig {
  clientIP: rabbitmqRabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIP
}
input rabbitmqRabbitmqClusterSpecOverrideServiceSpec {
  allocateLoadBalancerNodePorts: Boolean
  clusterIP: String
  clusterIPs: [String]
  externalIPs: [String]
  externalName: String
  externalTrafficPolicy: String
  healthCheckNodePort: Int
  internalTrafficPolicy: String
  ipFamilies: [String]
  ipFamilyPolicy: String
  loadBalancerClass: String
  loadBalancerIP: String
  loadBalancerSourceRanges: [String]
  ports: [rabbitmqRabbitmqClusterSpecOverrideServiceSpecPortsItem]
  publishNotReadyAddresses: Boolean
  selector: JSONObject
  sessionAffinity: String
  sessionAffinityConfig: rabbitmqRabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig
  type: String
}
input rabbitmqRabbitmqClusterSpecOverrideService {
  metadata: JSONObject
  spec: rabbitmqRabbitmqClusterSpecOverrideServiceSpec
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy {
  whenDeleted: String
  whenScaled: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelector {
  matchExpressions: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressionsItem]
  matchLabels: JSONObject
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata {
  annotations: JSONObject
  labels: JSONObject
  name: String
  namespace: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference {
  matchExpressions: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressionsItem]
  matchFields: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressionsItem]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  preference: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!
  weight: Int!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  nodeSelectorTerms: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm {
  labelSelector: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelector
  namespaceSelector: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelector
  namespaces: [String]
  topologyKey: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  podAffinityTerm: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm!
  weight: Int!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity {
  nodeAffinity: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity
  podAffinity: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity
  podAntiAffinity: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromConfigMapKeyRef {
  key: String!
  name: String
  optional: Boolean
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromFieldRef {
  apiVersion: String
  fieldPath: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromResourceFieldRef {
  containerName: String
  divisor: JSONObject
  resource: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFrom {
  configMapKeyRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromConfigMapKeyRef
  fieldRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromFieldRef
  resourceFieldRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromResourceFieldRef
  secretKeyRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromConfigMapKeyRef
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItem {
  name: String!
  value: String
  valueFrom: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFrom
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItemConfigMapRef {
  name: String
  optional: Boolean
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItem {
  configMapRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItemConfigMapRef
  prefix: String
  secretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItemConfigMapRef
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartExec {
  command: [String]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGetHttpHeadersItem {
  name: String!
  value: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGet {
  host: String
  httpHeaders: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGetHttpHeadersItem]
  path: String
  port: JSONObject!
  scheme: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartTcpSocket {
  host: String
  port: JSONObject!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStart {
  exec: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartExec
  httpGet: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGet
  tcpSocket: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartTcpSocket
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecycle {
  postStart: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStart
  preStop: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStart
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbeGrpc {
  port: Int!
  service: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe {
  exec: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartExec
  failureThreshold: Int
  grpc: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbeGrpc
  httpGet: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGet
  initialDelaySeconds: Int
  periodSeconds: Int
  successThreshold: Int
  tcpSocket: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartTcpSocket
  terminationGracePeriodSeconds: Int
  timeoutSeconds: Int
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemPortsItem {
  containerPort: Int!
  hostIP: String
  hostPort: Int
  name: String
  protocol: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem {
  name: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResources {
  claims: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem]
  limits: JSONObject
  requests: JSONObject
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextCapabilities {
  add: [String]
  drop: [String]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeLinuxOptions {
  level: String
  role: String
  type: String
  user: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeccompProfile {
  localhostProfile: String
  type: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextWindowsOptions {
  gmsaCredentialSpec: String
  gmsaCredentialSpecName: String
  hostProcess: Boolean
  runAsUserName: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContext {
  allowPrivilegeEscalation: Boolean
  capabilities: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextCapabilities
  privileged: Boolean
  procMount: String
  readOnlyRootFilesystem: Boolean
  runAsGroup: Int
  runAsNonRoot: Boolean
  runAsUser: Int
  seLinuxOptions: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeLinuxOptions
  seccompProfile: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeccompProfile
  windowsOptions: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextWindowsOptions
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemVolumeDevicesItem {
  devicePath: String!
  name: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemVolumeMountsItem {
  mountPath: String!
  mountPropagation: String
  name: String!
  readOnly: Boolean
  subPath: String
  subPathExpr: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItem {
  args: [String]
  command: [String]
  env: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItem]
  envFrom: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItem]
  image: String
  imagePullPolicy: String
  lifecycle: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecycle
  livenessProbe: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  name: String!
  ports: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemPortsItem]
  readinessProbe: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  resources: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResources
  securityContext: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContext
  startupProbe: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  stdin: Boolean
  stdinOnce: Boolean
  terminationMessagePath: String
  terminationMessagePolicy: String
  tty: Boolean
  volumeDevices: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemVolumeDevicesItem]
  volumeMounts: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemVolumeMountsItem]
  workingDir: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig {
  nameservers: [String]
  options: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGetHttpHeadersItem]
  searches: [String]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersItem {
  args: [String]
  command: [String]
  env: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItem]
  envFrom: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItem]
  image: String
  imagePullPolicy: String
  lifecycle: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecycle
  livenessProbe: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  name: String!
  ports: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemPortsItem]
  readinessProbe: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  resources: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResources
  securityContext: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContext
  startupProbe: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  stdin: Boolean
  stdinOnce: Boolean
  targetContainerName: String
  terminationMessagePath: String
  terminationMessagePolicy: String
  tty: Boolean
  volumeDevices: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemVolumeDevicesItem]
  volumeMounts: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemVolumeMountsItem]
  workingDir: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliasesItem {
  hostnames: [String]
  ip: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGatesItem {
  conditionType: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaimsItemSource {
  resourceClaimName: String
  resourceClaimTemplateName: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaimsItem {
  name: String!
  source: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaimsItemSource
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext {
  fsGroup: Int
  fsGroupChangePolicy: String
  runAsGroup: Int
  runAsNonRoot: Boolean
  runAsUser: Int
  seLinuxOptions: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeLinuxOptions
  seccompProfile: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeccompProfile
  supplementalGroups: [Int]
  sysctls: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGetHttpHeadersItem]
  windowsOptions: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextWindowsOptions
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerationsItem {
  effect: String
  key: String
  operator: String
  tolerationSeconds: Int
  value: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsItem {
  labelSelector: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelector
  matchLabelKeys: [String]
  maxSkew: Int!
  minDomains: Int
  nodeAffinityPolicy: String
  nodeTaintsPolicy: String
  topologyKey: String!
  whenUnsatisfiable: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemAwsElasticBlockStore {
  fsType: String
  partition: Int
  readOnly: Boolean
  volumeID: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemAzureDisk {
  cachingMode: String
  diskName: String!
  diskURI: String!
  fsType: String
  kind: String
  readOnly: Boolean
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemAzureFile {
  readOnly: Boolean
  secretName: String!
  shareName: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemCephfs {
  monitors: [String]!
  path: String
  readOnly: Boolean
  secretFile: String
  secretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  user: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemCinder {
  fsType: String
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  volumeID: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMapItemsItem {
  key: String!
  mode: Int
  path: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMap {
  defaultMode: Int
  items: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMapItemsItem]
  name: String
  optional: Boolean
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemCsi {
  driver: String!
  fsType: String
  nodePublishSecretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  readOnly: Boolean
  volumeAttributes: JSONObject
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPIItemsItem {
  fieldRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromFieldRef
  mode: Int
  path: String!
  resourceFieldRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromResourceFieldRef
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPI {
  defaultMode: Int
  items: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPIItemsItem]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEmptyDir {
  medium: String
  sizeLimit: JSONObject
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpecDataSource {
  apiGroup: String
  kind: String!
  name: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpecDataSourceRef {
  apiGroup: String
  kind: String!
  name: String!
  namespace: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpec {
  accessModes: [String]
  dataSource: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpecDataSource
  dataSourceRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpecDataSourceRef
  resources: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResources
  selector: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelector
  storageClassName: String
  volumeMode: String
  volumeName: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplate {
  metadata: JSONObject
  spec: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpec!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeral {
  volumeClaimTemplate: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplate
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemFc {
  fsType: String
  lun: Int
  readOnly: Boolean
  targetWWNs: [String]
  wwids: [String]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemFlexVolume {
  driver: String!
  fsType: String
  options: JSONObject
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemFlocker {
  datasetName: String
  datasetUUID: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemGcePersistentDisk {
  fsType: String
  partition: Int
  pdName: String!
  readOnly: Boolean
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemGitRepo {
  directory: String
  repository: String!
  revision: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemGlusterfs {
  endpoints: String!
  path: String!
  readOnly: Boolean
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemHostPath {
  path: String!
  type: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemIscsi {
  chapAuthDiscovery: Boolean
  chapAuthSession: Boolean
  fsType: String
  initiatorName: String
  iqn: String!
  iscsiInterface: String
  lun: Int!
  portals: [String]
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  targetPortal: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemNfs {
  path: String!
  readOnly: Boolean
  server: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemPersistentVolumeClaim {
  claimName: String!
  readOnly: Boolean
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemPhotonPersistentDisk {
  fsType: String
  pdID: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemPortworxVolume {
  fsType: String
  readOnly: Boolean
  volumeID: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemConfigMap {
  items: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMapItemsItem]
  name: String
  optional: Boolean
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemDownwardAPI {
  items: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPIItemsItem]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemServiceAccountToken {
  audience: String
  expirationSeconds: Int
  path: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItem {
  configMap: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemConfigMap
  downwardAPI: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemDownwardAPI
  secret: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemConfigMap
  serviceAccountToken: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemServiceAccountToken
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjected {
  defaultMode: Int
  sources: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItem]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemQuobyte {
  group: String
  readOnly: Boolean
  registry: String!
  tenant: String
  user: String
  volume: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemRbd {
  fsType: String
  image: String!
  keyring: String
  monitors: [String]!
  pool: String
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  user: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemScaleIO {
  fsType: String
  gateway: String!
  protectionDomain: String
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem!
  sslEnabled: Boolean
  storageMode: String
  storagePool: String
  system: String!
  volumeName: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemSecret {
  defaultMode: Int
  items: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMapItemsItem]
  optional: Boolean
  secretName: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemStorageos {
  fsType: String
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  volumeName: String
  volumeNamespace: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemVsphereVolume {
  fsType: String
  storagePolicyID: String
  storagePolicyName: String
  volumePath: String!
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItem {
  awsElasticBlockStore: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemAwsElasticBlockStore
  azureDisk: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemAzureDisk
  azureFile: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemAzureFile
  cephfs: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemCephfs
  cinder: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemCinder
  configMap: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMap
  csi: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemCsi
  downwardAPI: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPI
  emptyDir: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEmptyDir
  ephemeral: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeral
  fc: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemFc
  flexVolume: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemFlexVolume
  flocker: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemFlocker
  gcePersistentDisk: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemGcePersistentDisk
  gitRepo: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemGitRepo
  glusterfs: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemGlusterfs
  hostPath: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemHostPath
  iscsi: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemIscsi
  name: String!
  nfs: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemNfs
  persistentVolumeClaim: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemPersistentVolumeClaim
  photonPersistentDisk: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemPhotonPersistentDisk
  portworxVolume: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemPortworxVolume
  projected: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemProjected
  quobyte: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemQuobyte
  rbd: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemRbd
  scaleIO: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemScaleIO
  secret: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemSecret
  storageos: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemStorageos
  vsphereVolume: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemVsphereVolume
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec {
  activeDeadlineSeconds: Int
  affinity: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity
  automountServiceAccountToken: Boolean
  containers: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItem]!
  dnsConfig: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig
  dnsPolicy: String
  enableServiceLinks: Boolean
  ephemeralContainers: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersItem]
  hostAliases: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliasesItem]
  hostIPC: Boolean
  hostNetwork: Boolean
  hostPID: Boolean
  hostUsers: Boolean
  hostname: String
  imagePullSecrets: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem]
  initContainers: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItem]
  nodeName: String
  nodeSelector: JSONObject
  os: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  overhead: JSONObject
  preemptionPolicy: String
  priority: Int
  priorityClassName: String
  readinessGates: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGatesItem]
  resourceClaims: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecResourceClaimsItem]
  restartPolicy: String
  runtimeClassName: String
  schedulerName: String
  schedulingGates: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem]
  securityContext: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext
  serviceAccount: String
  serviceAccountName: String
  setHostnameAsFQDN: Boolean
  shareProcessNamespace: Boolean
  subdomain: String
  terminationGracePeriodSeconds: Int
  tolerations: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerationsItem]
  topologySpreadConstraints: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsItem]
  volumes: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItem]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplate {
  metadata: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata
  spec: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate {
  maxUnavailable: JSONObject
  partition: Int
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy {
  rollingUpdate: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate
  type: String
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesItem {
  apiVersion: String
  kind: String
  metadata: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata
  spec: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpec
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpec {
  minReadySeconds: Int
  persistentVolumeClaimRetentionPolicy: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy
  podManagementPolicy: String
  replicas: Int
  selector: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecSelector
  serviceName: String
  template: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecTemplate
  updateStrategy: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy
  volumeClaimTemplates: [rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesItem]
}
input rabbitmqRabbitmqClusterSpecOverrideStatefulSet {
  metadata: JSONObject
  spec: rabbitmqRabbitmqClusterSpecOverrideStatefulSetSpec
}
input rabbitmqRabbitmqClusterSpecOverride {
  service: rabbitmqRabbitmqClusterSpecOverrideService
  statefulSet: rabbitmqRabbitmqClusterSpecOverrideStatefulSet
}
input rabbitmqRabbitmqClusterSpecPersistence {
  storage: JSONObject
  storageClassName: String
}
input rabbitmqRabbitmqClusterSpecRabbitmq {
  additionalConfig: String
  additionalPlugins: [String]
  advancedConfig: String
  envConfig: String
}
input rabbitmqRabbitmqClusterSpecResourcesClaimsItem {
  name: String!
}
input rabbitmqRabbitmqClusterSpecResources {
  claims: [rabbitmqRabbitmqClusterSpecResourcesClaimsItem]
  limits: JSONObject
  requests: JSONObject
}
input rabbitmqRabbitmqClusterSpecSecretBackendVaultTls {
  altNames: String
  commonName: String
  ipSans: String
  pkiIssuerPath: String
}
input rabbitmqRabbitmqClusterSpecSecretBackendVault {
  annotations: JSONObject
  defaultUserPath: String
  defaultUserUpdaterImage: String
  role: String
  tls: rabbitmqRabbitmqClusterSpecSecretBackendVaultTls
}
input rabbitmqRabbitmqClusterSpecSecretBackend {
  externalSecret: rabbitmqRabbitmqClusterSpecImagePullSecretsItem
  vault: rabbitmqRabbitmqClusterSpecSecretBackendVault
}
input rabbitmqRabbitmqClusterSpecService {
  annotations: JSONObject
  type: String
}
input rabbitmqRabbitmqClusterSpecTls {
  caSecretName: String
  disableNonTLSListeners: Boolean
  secretName: String
}
input rabbitmqRabbitmqClusterSpecTolerationsItem {
  effect: String
  key: String
  operator: String
  tolerationSeconds: Int
  value: String
}
input rabbitmqRabbitmqClusterSpec {
  affinity: rabbitmqRabbitmqClusterSpecAffinity
  delayStartSeconds: Int
  image: String
  imagePullSecrets: [rabbitmqRabbitmqClusterSpecImagePullSecretsItem]
  override: rabbitmqRabbitmqClusterSpecOverride
  persistence: rabbitmqRabbitmqClusterSpecPersistence
  rabbitmq: rabbitmqRabbitmqClusterSpecRabbitmq
  replicas: Int
  resources: rabbitmqRabbitmqClusterSpecResources
  secretBackend: rabbitmqRabbitmqClusterSpecSecretBackend
  service: rabbitmqRabbitmqClusterSpecService
  skipPostDeploySteps: Boolean
  terminationGracePeriodSeconds: Int
  tls: rabbitmqRabbitmqClusterSpecTls
  tolerations: [rabbitmqRabbitmqClusterSpecTolerationsItem]
}
type rabbitmqRabbitmqClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
type rabbitmqRabbitmqClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference {
  matchExpressions: [rabbitmqRabbitmqClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem]
  matchFields: [rabbitmqRabbitmqClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem]
}
type rabbitmqRabbitmqClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  preference: rabbitmqRabbitmqClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!
  weight: Int!
}
type rabbitmqRabbitmqClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  nodeSelectorTerms: [rabbitmqRabbitmqClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!]
}
type rabbitmqRabbitmqClusterAffinityNodeAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: rabbitmqRabbitmqClusterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
}
type rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
type rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
  matchExpressions: [rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem]
  matchLabels: JSONObject
}
type rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm {
  labelSelector: rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  namespaceSelector: rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  namespaces: [String]
  topologyKey: String!
}
type rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  podAffinityTerm: rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm!
  weight: Int!
}
type rabbitmqRabbitmqClusterAffinityPodAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
type rabbitmqRabbitmqClusterAffinityPodAntiAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
type rabbitmqRabbitmqClusterAffinity {
  nodeAffinity: rabbitmqRabbitmqClusterAffinityNodeAffinity
  podAffinity: rabbitmqRabbitmqClusterAffinityPodAffinity
  podAntiAffinity: rabbitmqRabbitmqClusterAffinityPodAntiAffinity
}
type rabbitmqRabbitmqClusterOverrideServiceSpecPortsItem {
  appProtocol: String
  name: String
  nodePort: Int
  port: Int!
  protocol: String
  targetPort: JSONObject
}
type rabbitmqRabbitmqClusterOverrideServiceSpecSessionAffinityConfigClientIP {
  timeoutSeconds: Int
}
type rabbitmqRabbitmqClusterOverrideServiceSpecSessionAffinityConfig {
  clientIP: rabbitmqRabbitmqClusterOverrideServiceSpecSessionAffinityConfigClientIP
}
type rabbitmqRabbitmqClusterOverrideServiceSpec {
  allocateLoadBalancerNodePorts: Boolean
  clusterIP: String
  clusterIPs: [String]
  externalIPs: [String]
  externalName: String
  externalTrafficPolicy: String
  healthCheckNodePort: Int
  internalTrafficPolicy: String
  ipFamilies: [String]
  ipFamilyPolicy: String
  loadBalancerClass: String
  loadBalancerIP: String
  loadBalancerSourceRanges: [String]
  ports: [rabbitmqRabbitmqClusterOverrideServiceSpecPortsItem]
  publishNotReadyAddresses: Boolean
  selector: JSONObject
  sessionAffinity: String
  sessionAffinityConfig: rabbitmqRabbitmqClusterOverrideServiceSpecSessionAffinityConfig
  type: String
}
type rabbitmqRabbitmqClusterOverrideService {
  metadata: JSONObject
  spec: rabbitmqRabbitmqClusterOverrideServiceSpec
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy {
  whenDeleted: String
  whenScaled: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelectorMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelector {
  matchExpressions: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelectorMatchExpressionsItem]
  matchLabels: JSONObject
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateMetadata {
  annotations: JSONObject
  labels: JSONObject
  name: String
  namespace: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference {
  matchExpressions: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelectorMatchExpressionsItem]
  matchFields: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelectorMatchExpressionsItem]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  preference: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!
  weight: Int!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  nodeSelectorTerms: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm {
  labelSelector: rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelector
  namespaceSelector: rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelector
  namespaces: [String]
  topologyKey: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  podAffinityTerm: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm!
  weight: Int!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinity {
  nodeAffinity: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity
  podAffinity: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity
  podAntiAffinity: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromConfigMapKeyRef {
  key: String!
  name: String
  optional: Boolean
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromFieldRef {
  apiVersion: String
  fieldPath: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromResourceFieldRef {
  containerName: String
  divisor: JSONObject
  resource: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFrom {
  configMapKeyRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromConfigMapKeyRef
  fieldRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromFieldRef
  resourceFieldRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromResourceFieldRef
  secretKeyRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromConfigMapKeyRef
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItem {
  name: String!
  value: String
  valueFrom: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFrom
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItemConfigMapRef {
  name: String
  optional: Boolean
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItem {
  configMapRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItemConfigMapRef
  prefix: String
  secretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItemConfigMapRef
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartExec {
  command: [String]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGetHttpHeadersItem {
  name: String!
  value: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGet {
  host: String
  httpHeaders: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGetHttpHeadersItem]
  path: String
  port: JSONObject!
  scheme: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartTcpSocket {
  host: String
  port: JSONObject!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStart {
  exec: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartExec
  httpGet: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGet
  tcpSocket: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartTcpSocket
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecycle {
  postStart: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStart
  preStop: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStart
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbeGrpc {
  port: Int!
  service: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe {
  exec: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartExec
  failureThreshold: Int
  grpc: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbeGrpc
  httpGet: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGet
  initialDelaySeconds: Int
  periodSeconds: Int
  successThreshold: Int
  tcpSocket: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartTcpSocket
  terminationGracePeriodSeconds: Int
  timeoutSeconds: Int
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemPortsItem {
  containerPort: Int!
  hostIP: String
  hostPort: Int
  name: String
  protocol: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem {
  name: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResources {
  claims: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem]
  limits: JSONObject
  requests: JSONObject
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextCapabilities {
  add: [String]
  drop: [String]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeLinuxOptions {
  level: String
  role: String
  type: String
  user: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeccompProfile {
  localhostProfile: String
  type: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextWindowsOptions {
  gmsaCredentialSpec: String
  gmsaCredentialSpecName: String
  hostProcess: Boolean
  runAsUserName: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContext {
  allowPrivilegeEscalation: Boolean
  capabilities: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextCapabilities
  privileged: Boolean
  procMount: String
  readOnlyRootFilesystem: Boolean
  runAsGroup: Int
  runAsNonRoot: Boolean
  runAsUser: Int
  seLinuxOptions: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeLinuxOptions
  seccompProfile: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeccompProfile
  windowsOptions: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextWindowsOptions
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemVolumeDevicesItem {
  devicePath: String!
  name: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemVolumeMountsItem {
  mountPath: String!
  mountPropagation: String
  name: String!
  readOnly: Boolean
  subPath: String
  subPathExpr: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItem {
  args: [String]
  command: [String]
  env: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItem]
  envFrom: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItem]
  image: String
  imagePullPolicy: String
  lifecycle: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecycle
  livenessProbe: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  name: String!
  ports: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemPortsItem]
  readinessProbe: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  resources: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResources
  securityContext: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContext
  startupProbe: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  stdin: Boolean
  stdinOnce: Boolean
  terminationMessagePath: String
  terminationMessagePolicy: String
  tty: Boolean
  volumeDevices: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemVolumeDevicesItem]
  volumeMounts: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemVolumeMountsItem]
  workingDir: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecDnsConfig {
  nameservers: [String]
  options: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGetHttpHeadersItem]
  searches: [String]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecEphemeralContainersItem {
  args: [String]
  command: [String]
  env: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItem]
  envFrom: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvFromItem]
  image: String
  imagePullPolicy: String
  lifecycle: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecycle
  livenessProbe: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  name: String!
  ports: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemPortsItem]
  readinessProbe: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  resources: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResources
  securityContext: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContext
  startupProbe: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLivenessProbe
  stdin: Boolean
  stdinOnce: Boolean
  targetContainerName: String
  terminationMessagePath: String
  terminationMessagePolicy: String
  tty: Boolean
  volumeDevices: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemVolumeDevicesItem]
  volumeMounts: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemVolumeMountsItem]
  workingDir: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecHostAliasesItem {
  hostnames: [String]
  ip: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecReadinessGatesItem {
  conditionType: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecResourceClaimsItemSource {
  resourceClaimName: String
  resourceClaimTemplateName: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecResourceClaimsItem {
  name: String!
  source: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecResourceClaimsItemSource
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecSecurityContext {
  fsGroup: Int
  fsGroupChangePolicy: String
  runAsGroup: Int
  runAsNonRoot: Boolean
  runAsUser: Int
  seLinuxOptions: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeLinuxOptions
  seccompProfile: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextSeccompProfile
  supplementalGroups: [Int]
  sysctls: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemLifecyclePostStartHttpGetHttpHeadersItem]
  windowsOptions: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemSecurityContextWindowsOptions
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecTolerationsItem {
  effect: String
  key: String
  operator: String
  tolerationSeconds: Int
  value: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsItem {
  labelSelector: rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelector
  matchLabelKeys: [String]
  maxSkew: Int!
  minDomains: Int
  nodeAffinityPolicy: String
  nodeTaintsPolicy: String
  topologyKey: String!
  whenUnsatisfiable: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemAwsElasticBlockStore {
  fsType: String
  partition: Int
  readOnly: Boolean
  volumeID: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemAzureDisk {
  cachingMode: String
  diskName: String!
  diskURI: String!
  fsType: String
  kind: String
  readOnly: Boolean
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemAzureFile {
  readOnly: Boolean
  secretName: String!
  shareName: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemCephfs {
  monitors: [String]!
  path: String
  readOnly: Boolean
  secretFile: String
  secretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  user: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemCinder {
  fsType: String
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  volumeID: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMapItemsItem {
  key: String!
  mode: Int
  path: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMap {
  defaultMode: Int
  items: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMapItemsItem]
  name: String
  optional: Boolean
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemCsi {
  driver: String!
  fsType: String
  nodePublishSecretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  readOnly: Boolean
  volumeAttributes: JSONObject
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPIItemsItem {
  fieldRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromFieldRef
  mode: Int
  path: String!
  resourceFieldRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemEnvItemValueFromResourceFieldRef
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPI {
  defaultMode: Int
  items: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPIItemsItem]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEmptyDir {
  medium: String
  sizeLimit: JSONObject
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpecDataSource {
  apiGroup: String
  kind: String!
  name: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpecDataSourceRef {
  apiGroup: String
  kind: String!
  name: String!
  namespace: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpec {
  accessModes: [String]
  dataSource: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpecDataSource
  dataSourceRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpecDataSourceRef
  resources: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResources
  selector: rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelector
  storageClassName: String
  volumeMode: String
  volumeName: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplate {
  metadata: JSONObject
  spec: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpec!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeral {
  volumeClaimTemplate: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplate
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemFc {
  fsType: String
  lun: Int
  readOnly: Boolean
  targetWWNs: [String]
  wwids: [String]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemFlexVolume {
  driver: String!
  fsType: String
  options: JSONObject
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemFlocker {
  datasetName: String
  datasetUUID: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemGcePersistentDisk {
  fsType: String
  partition: Int
  pdName: String!
  readOnly: Boolean
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemGitRepo {
  directory: String
  repository: String!
  revision: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemGlusterfs {
  endpoints: String!
  path: String!
  readOnly: Boolean
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemHostPath {
  path: String!
  type: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemIscsi {
  chapAuthDiscovery: Boolean
  chapAuthSession: Boolean
  fsType: String
  initiatorName: String
  iqn: String!
  iscsiInterface: String
  lun: Int!
  portals: [String]
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  targetPortal: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemNfs {
  path: String!
  readOnly: Boolean
  server: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemPersistentVolumeClaim {
  claimName: String!
  readOnly: Boolean
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemPhotonPersistentDisk {
  fsType: String
  pdID: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemPortworxVolume {
  fsType: String
  readOnly: Boolean
  volumeID: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemConfigMap {
  items: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMapItemsItem]
  name: String
  optional: Boolean
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemDownwardAPI {
  items: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPIItemsItem]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemServiceAccountToken {
  audience: String
  expirationSeconds: Int
  path: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItem {
  configMap: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemConfigMap
  downwardAPI: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemDownwardAPI
  secret: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemConfigMap
  serviceAccountToken: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItemServiceAccountToken
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjected {
  defaultMode: Int
  sources: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjectedSourcesItem]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemQuobyte {
  group: String
  readOnly: Boolean
  registry: String!
  tenant: String
  user: String
  volume: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemRbd {
  fsType: String
  image: String!
  keyring: String
  monitors: [String]!
  pool: String
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  user: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemScaleIO {
  fsType: String
  gateway: String!
  protectionDomain: String
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem!
  sslEnabled: Boolean
  storageMode: String
  storagePool: String
  system: String!
  volumeName: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemSecret {
  defaultMode: Int
  items: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMapItemsItem]
  optional: Boolean
  secretName: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemStorageos {
  fsType: String
  readOnly: Boolean
  secretRef: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  volumeName: String
  volumeNamespace: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemVsphereVolume {
  fsType: String
  storagePolicyID: String
  storagePolicyName: String
  volumePath: String!
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItem {
  awsElasticBlockStore: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemAwsElasticBlockStore
  azureDisk: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemAzureDisk
  azureFile: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemAzureFile
  cephfs: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemCephfs
  cinder: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemCinder
  configMap: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemConfigMap
  csi: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemCsi
  downwardAPI: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemDownwardAPI
  emptyDir: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEmptyDir
  ephemeral: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeral
  fc: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemFc
  flexVolume: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemFlexVolume
  flocker: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemFlocker
  gcePersistentDisk: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemGcePersistentDisk
  gitRepo: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemGitRepo
  glusterfs: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemGlusterfs
  hostPath: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemHostPath
  iscsi: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemIscsi
  name: String!
  nfs: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemNfs
  persistentVolumeClaim: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemPersistentVolumeClaim
  photonPersistentDisk: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemPhotonPersistentDisk
  portworxVolume: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemPortworxVolume
  projected: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemProjected
  quobyte: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemQuobyte
  rbd: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemRbd
  scaleIO: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemScaleIO
  secret: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemSecret
  storageos: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemStorageos
  vsphereVolume: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemVsphereVolume
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpec {
  activeDeadlineSeconds: Int
  affinity: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecAffinity
  automountServiceAccountToken: Boolean
  containers: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItem]!
  dnsConfig: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecDnsConfig
  dnsPolicy: String
  enableServiceLinks: Boolean
  ephemeralContainers: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecEphemeralContainersItem]
  hostAliases: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecHostAliasesItem]
  hostIPC: Boolean
  hostNetwork: Boolean
  hostPID: Boolean
  hostUsers: Boolean
  hostname: String
  imagePullSecrets: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem]
  initContainers: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItem]
  nodeName: String
  nodeSelector: JSONObject
  os: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem
  overhead: JSONObject
  preemptionPolicy: String
  priority: Int
  priorityClassName: String
  readinessGates: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecReadinessGatesItem]
  resourceClaims: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecResourceClaimsItem]
  restartPolicy: String
  runtimeClassName: String
  schedulerName: String
  schedulingGates: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecContainersItemResourcesClaimsItem]
  securityContext: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecSecurityContext
  serviceAccount: String
  serviceAccountName: String
  setHostnameAsFQDN: Boolean
  shareProcessNamespace: Boolean
  subdomain: String
  terminationGracePeriodSeconds: Int
  tolerations: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecTolerationsItem]
  topologySpreadConstraints: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsItem]
  volumes: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItem]
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplate {
  metadata: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateMetadata
  spec: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpec
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecUpdateStrategyRollingUpdate {
  maxUnavailable: JSONObject
  partition: Int
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecUpdateStrategy {
  rollingUpdate: rabbitmqRabbitmqClusterOverrideStatefulSetSpecUpdateStrategyRollingUpdate
  type: String
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpecVolumeClaimTemplatesItem {
  apiVersion: String
  kind: String
  metadata: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateMetadata
  spec: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplateSpecVolumesItemEphemeralVolumeClaimTemplateSpec
}
type rabbitmqRabbitmqClusterOverrideStatefulSetSpec {
  minReadySeconds: Int
  persistentVolumeClaimRetentionPolicy: rabbitmqRabbitmqClusterOverrideStatefulSetSpecPersistentVolumeClaimRetentionPolicy
  podManagementPolicy: String
  replicas: Int
  selector: rabbitmqRabbitmqClusterOverrideStatefulSetSpecSelector
  serviceName: String
  template: rabbitmqRabbitmqClusterOverrideStatefulSetSpecTemplate
  updateStrategy: rabbitmqRabbitmqClusterOverrideStatefulSetSpecUpdateStrategy
  volumeClaimTemplates: [rabbitmqRabbitmqClusterOverrideStatefulSetSpecVolumeClaimTemplatesItem]
}
type rabbitmqRabbitmqClusterOverrideStatefulSet {
  metadata: JSONObject
  spec: rabbitmqRabbitmqClusterOverrideStatefulSetSpec
}
type rabbitmqRabbitmqClusterOverride {
  service: rabbitmqRabbitmqClusterOverrideService
  statefulSet: rabbitmqRabbitmqClusterOverrideStatefulSet
}
type rabbitmqRabbitmqClusterPersistence {
  storage: JSONObject
  storageClassName: String
}
type rabbitmqRabbitmqClusterRabbitmq {
  additionalConfig: String
  additionalPlugins: [String]
  advancedConfig: String
  envConfig: String
}
type rabbitmqRabbitmqClusterResourcesClaimsItem {
  name: String!
}
type rabbitmqRabbitmqClusterResources {
  claims: [rabbitmqRabbitmqClusterResourcesClaimsItem]
  limits: JSONObject
  requests: JSONObject
}
type rabbitmqRabbitmqClusterSecretBackendVaultTls {
  altNames: String
  commonName: String
  ipSans: String
  pkiIssuerPath: String
}
type rabbitmqRabbitmqClusterSecretBackendVault {
  annotations: JSONObject
  defaultUserPath: String
  defaultUserUpdaterImage: String
  role: String
  tls: rabbitmqRabbitmqClusterSecretBackendVaultTls
}
type rabbitmqRabbitmqClusterSecretBackend {
  externalSecret: rabbitmqRabbitmqClusterStatusBinding
  vault: rabbitmqRabbitmqClusterSecretBackendVault
}
type rabbitmqRabbitmqClusterService {
  annotations: JSONObject
  type: String
}
type rabbitmqRabbitmqClusterTls {
  caSecretName: String
  disableNonTLSListeners: Boolean
  secretName: String
}
type rabbitmqRabbitmqClusterTolerationsItem {
  effect: String
  key: String
  operator: String
  tolerationSeconds: Int
  value: String
}
type rabbitmqRabbitmqCluster {
  metadata: metadata
  affinity: rabbitmqRabbitmqClusterAffinity
  delayStartSeconds: Int
  image: String
  imagePullSecrets: [rabbitmqRabbitmqClusterStatusBinding]
  override: rabbitmqRabbitmqClusterOverride
  persistence: rabbitmqRabbitmqClusterPersistence
  rabbitmq: rabbitmqRabbitmqClusterRabbitmq
  replicas: Int
  resources: rabbitmqRabbitmqClusterResources
  secretBackend: rabbitmqRabbitmqClusterSecretBackend
  service: rabbitmqRabbitmqClusterService
  skipPostDeploySteps: Boolean
  terminationGracePeriodSeconds: Int
  tls: rabbitmqRabbitmqClusterTls
  tolerations: [rabbitmqRabbitmqClusterTolerationsItem]
  status: rabbitmqRabbitmqClusterStatus
}
type Query {
  rabbitmqRabbitmqCluster(namespace: String!, name: String!): rabbitmqRabbitmqCluster
}
type Mutation {
  createRabbitmqRabbitmqCluster(namespace: String!, name: String!, spec: rabbitmqRabbitmqClusterSpec!): rabbitmqRabbitmqCluster
  patchRabbitmqRabbitmqCluster(namespace: String!, name: String!, spec: rabbitmqRabbitmqClusterSpec!): rabbitmqRabbitmqCluster
  deleteRabbitmqRabbitmqCluster(namespace: String!, name: String!): rabbitmqRabbitmqCluster
}