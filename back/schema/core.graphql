scalar JSON
scalar JSONObject

type GramoConfig {
  defaultNamespace: String!
  defaultRoute: String!
  enableGraphQLClient: Boolean!
  limitVynilCategory: String!
  limitVynilDistrib: String!
  limitNamespaceKey: String!
  limitNamespaceValue: String!
  limitNamespaceHave: String!
}

type label {
  name: String!
  value: String!
}

type metadata {
  name: String!
  namespace: String
  annotations: [label!]!
  labels: [label!]!
  obj: JSONObject
}

type namespaceStatus {
  phase: String
}
type namespace {
  metadata: metadata
  vynilInstalls: [vynilInstall]
  fluxcdGitRepositorys: [fluxcdGitRepository]
  fluxcdBuckets: [fluxcdBucket]
  fluxcdHelmCharts: [fluxcdHelmChart]
  fluxcdHelmRepositorys: [fluxcdHelmRepository]
  fluxcdOCIRepositorys: [fluxcdOCIRepository]
  fluxcdReceivers: [fluxcdReceiver]
  fluxcdAlerts: [fluxcdAlert]
  fluxcdProviders: [fluxcdProvider]
  fluxcdKustomizations: [fluxcdKustomization]
  fluxcdImagePolicys: [fluxcdImagePolicy]
  fluxcdImageRepositorys: [fluxcdImageRepository]
  fluxcdImageUpdateAutomations: [fluxcdImageUpdateAutomation]
  fluxcdHelmReleases: [fluxcdHelmRelease]
  secretgeneratorBasicAuths: [secretgeneratorBasicAuth]
  secretgeneratorSSHKeyPairs: [secretgeneratorSSHKeyPair]
  secretgeneratorStringSecrets: [secretgeneratorStringSecret]
  k8upArchives: [k8upArchive]
  k8upBackups: [k8upBackup]
  k8upChecks: [k8upCheck]
  k8upPreBackupPods: [k8upPreBackupPod]
  k8upPrunes: [k8upPrune]
  k8upRestores: [k8upRestore]
  k8upSchedules: [k8upSchedule]
  k8upSnapshots: [k8upSnapshot]
  mariadbBackups: [mariadbBackup]
  mariadbConnections: [mariadbConnection]
  mariadbDatabases: [mariadbDatabase]
  mariadbGrants: [mariadbGrant]
  mariadbMariaDBs: [mariadbMariaDB]
  mariadbRestores: [mariadbRestore]
  mariadbSqlJobs: [mariadbSqlJob]
  mariadbUsers: [mariadbUser]
  mongodbcommunityMongoDBCommunitys: [mongodbcommunityMongoDBCommunity]
  monitoringAlertmanagers: [monitoringAlertmanager]
  monitoringAlertmanagerConfigs: [monitoringAlertmanagerConfig]
  monitoringPodMonitors: [monitoringPodMonitor]
  monitoringProbes: [monitoringProbe]
  monitoringPrometheuss: [monitoringPrometheus]
  monitoringPrometheusAgents: [monitoringPrometheusAgent]
  monitoringPrometheusRules: [monitoringPrometheusRule]
  monitoringServiceMonitors: [monitoringServiceMonitor]
  monitoringThanosRulers: [monitoringThanosRuler]
  postgresqlBackups: [postgresqlBackup]
  postgresqlClusters: [postgresqlCluster]
  postgresqlPoolers: [postgresqlPooler]
  postgresqlScheduledBackups: [postgresqlScheduledBackup]
  redisRediss: [redisRedis]
  redisRedisClusters: [redisRedisCluster]
  redisRedisReplications: [redisRedisReplication]
  redisRedisSentinels: [redisRedisSentinel]
  rabbitmqRabbitmqClusters: [rabbitmqRabbitmqCluster]
  mysqlInnoDBClusters: [mysqlInnoDBCluster]
  mysqlMySQLBackups: [mysqlMySQLBackup]
  projectcalicoNetworkPolicys: [projectcalicoNetworkPolicy]
  projectcalicoNetworkSets: [projectcalicoNetworkSet]

  permissions: permissionReview
  status: namespaceStatus
}

type apiVersion {
  name: String
  versions: [apiVersionVersion]
  preferredVersion: apiVersionVersion
}
type apiVersionVersion {
  groupVersion: String
  version: String
}
type customResourceDefinitionName {
  categories: [String]
  listKind: String
  kind: String
  plural: String
  singular: String
  shortNames: [String]
}
type customResourceDefinitionColumn {
  name: String!
  type: String!
  jsonPath: String!
  description: String
  format: String
  priority: Float
}
type customResourceDefinitionSchema {
  openAPIV3Schema: JSONObject
}
type customResourceDefinitionVersion {
  name: String!
  served: Boolean!
  storage: Boolean!
  additionalPrinterColumns: [customResourceDefinitionColumn]
  deprecated: Boolean
  deprecationWarning: String
  schema: customResourceDefinitionSchema
}
type customResourceDefinition {
  metadata: metadata
  group: String!
  scope: String!
  names: customResourceDefinitionName
  versions: [customResourceDefinitionVersion]
  acceptedNames: customResourceDefinitionName
}

type permissionReviewNonResourceRules {
  nonResourceURLs: [String]
  verbs: [String]
}
type permissionReviewResourceRules {
  apiGroups: [String]
  resourceNames: [String]
  resources: [String]
  verbs: [String]
}
type permissionReview {
  evaluationError: String
  incomplete: Boolean
  nonResourceRules: [permissionReviewNonResourceRules]
  resourceRules: [permissionReviewResourceRules]
}
type Query {
  gramoConfig: GramoConfig
  namespaces: [namespace]
  namespace(name: String!): namespace
  permissions(group: String, resource: String, subresource: String, namespace: String, name: String, verb: String, version: String): Boolean
  apiVersions: [apiVersion]
  permissionReview(namespace: String!): permissionReview
  customResourceDefinitions: [customResourceDefinition]
  customResourceDefinition(name: String!): customResourceDefinition
}
