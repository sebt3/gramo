scalar JSON
scalar JSONObject

type GramoConfig {
  defaultNamespace: String!
  defaultRoute: String!
  enableGraphQLClient: Boolean!
  limitVynilCategory: String!
  limitVynilDistrib: String!
  limitNamespaceKey: String!
  limitNamespaceValue: String!
  limitNamespaceHave: String!
}

input Label {
  name: String!
  value: String!
}
input Filter {
  path: String!
  op: String!
  value: JSON
}
input ExcludeInclude {
  path: String!
  include: Boolean
}
input queryParameters {
  filters: [Filter!]
  excludes: [ExcludeInclude!]
}
input metadataMore {
  labels: [Label!]
  annotations: [Label!]
}
type ownerReference {
  apiVersion: String!
  blockOwnerDeletion: Boolean
  controller: Boolean
  kind: String!
  name: String!
  uid: String!
}

type metadata {
  name: String!
  namespace: String
  annotations: JSONObject
  labels: JSONObject
  creationTimestamp: String
  ownerReferences: [ownerReference]
  resourceVersion: String
  uid: String
}

type permissionReviewNonResourceRules {
  nonResourceURLs: [String]
  verbs: [String]
}
type permissionReviewResourceRules {
  apiGroups: [String]
  resourceNames: [String]
  resources: [String]
  verbs: [String]
}
type permissionReview {
  evaluationError: String
  incomplete: Boolean
  nonResourceRules: [permissionReviewNonResourceRules]
  resourceRules: [permissionReviewResourceRules]
}
type vynilCategory {
  name: String!
  providePackage(params: queryParameters): [vynilPackage!]
}
type vynilPackage {
  name: String!
  commit_id: ID!
  description: String
  providedByCategory: vynilCategory!
  providedByDistrib: vynilDistrib!
  options: JSONObject!
}
type Query {
  gramoConfig: GramoConfig
  vynilCategory(params: queryParameters): [vynilCategory]
  vynilPackage(params: queryParameters): [vynilPackage]
}

