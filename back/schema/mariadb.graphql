
type mariadbBackupStatusConditionsItem {
  lastTransitionTime: String!
  message: String!
  observedGeneration: Int
  reason: String!
  status: String!
  type: String!
}
type mariadbBackupStatus {
  conditions: [mariadbBackupStatusConditionsItem]
}
input mariadbBackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
input mariadbBackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference {
  matchExpressions: [mariadbBackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem]
  matchFields: [mariadbBackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem]
}
input mariadbBackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  preference: mariadbBackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!
  weight: Int!
}
input mariadbBackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  nodeSelectorTerms: [mariadbBackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!]
}
input mariadbBackupSpecAffinityNodeAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [mariadbBackupSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: mariadbBackupSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
}
input mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
input mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
  matchExpressions: [mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem]
  matchLabels: JSONObject
}
input mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm {
  labelSelector: mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  namespaceSelector: mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  namespaces: [String]
  topologyKey: String!
}
input mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  podAffinityTerm: mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm!
  weight: Int!
}
input mariadbBackupSpecAffinityPodAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
input mariadbBackupSpecAffinityPodAntiAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
input mariadbBackupSpecAffinity {
  nodeAffinity: mariadbBackupSpecAffinityNodeAffinity
  podAffinity: mariadbBackupSpecAffinityPodAffinity
  podAntiAffinity: mariadbBackupSpecAffinityPodAntiAffinity
}
input mariadbBackupSpecMariaDbRef {
  apiVersion: String
  fieldPath: String
  kind: String
  name: String
  namespace: String
  resourceVersion: String
  uid: String
  waitForIt: Boolean
}
input mariadbBackupSpecResourcesClaimsItem {
  name: String!
}
input mariadbBackupSpecResources {
  claims: [mariadbBackupSpecResourcesClaimsItem]
  limits: JSONObject
  requests: JSONObject
}
input mariadbBackupSpecSchedule {
  cron: String!
  suspend: Boolean
}
input mariadbBackupSpecStoragePersistentVolumeClaimDataSource {
  apiGroup: String
  kind: String!
  name: String!
}
input mariadbBackupSpecStoragePersistentVolumeClaimDataSourceRef {
  apiGroup: String
  kind: String!
  name: String!
  namespace: String
}
input mariadbBackupSpecStoragePersistentVolumeClaim {
  accessModes: [String]
  dataSource: mariadbBackupSpecStoragePersistentVolumeClaimDataSource
  dataSourceRef: mariadbBackupSpecStoragePersistentVolumeClaimDataSourceRef
  resources: mariadbBackupSpecResources
  selector: mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  storageClassName: String
  volumeMode: String
  volumeName: String
}
input mariadbBackupSpecStorageVolumeAwsElasticBlockStore {
  fsType: String
  partition: Int
  readOnly: Boolean
  volumeID: String!
}
input mariadbBackupSpecStorageVolumeAzureDisk {
  cachingMode: String
  diskName: String!
  diskURI: String!
  fsType: String
  kind: String
  readOnly: Boolean
}
input mariadbBackupSpecStorageVolumeAzureFile {
  readOnly: Boolean
  secretName: String!
  shareName: String!
}
input mariadbBackupSpecStorageVolumeCephfsSecretRef {
  name: String
}
input mariadbBackupSpecStorageVolumeCephfs {
  monitors: [String]!
  path: String
  readOnly: Boolean
  secretFile: String
  secretRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
  user: String
}
input mariadbBackupSpecStorageVolumeCinder {
  fsType: String
  readOnly: Boolean
  secretRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
  volumeID: String!
}
input mariadbBackupSpecStorageVolumeConfigMapItemsItem {
  key: String!
  mode: Int
  path: String!
}
input mariadbBackupSpecStorageVolumeConfigMap {
  defaultMode: Int
  items: [mariadbBackupSpecStorageVolumeConfigMapItemsItem]
  name: String
  optional: Boolean
}
input mariadbBackupSpecStorageVolumeCsi {
  driver: String!
  fsType: String
  nodePublishSecretRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
  readOnly: Boolean
  volumeAttributes: JSONObject
}
input mariadbBackupSpecStorageVolumeDownwardAPIItemsItemFieldRef {
  apiVersion: String
  fieldPath: String!
}
input mariadbBackupSpecStorageVolumeDownwardAPIItemsItemResourceFieldRef {
  containerName: String
  divisor: JSONObject
  resource: String!
}
input mariadbBackupSpecStorageVolumeDownwardAPIItemsItem {
  fieldRef: mariadbBackupSpecStorageVolumeDownwardAPIItemsItemFieldRef
  mode: Int
  path: String!
  resourceFieldRef: mariadbBackupSpecStorageVolumeDownwardAPIItemsItemResourceFieldRef
}
input mariadbBackupSpecStorageVolumeDownwardAPI {
  defaultMode: Int
  items: [mariadbBackupSpecStorageVolumeDownwardAPIItemsItem]
}
input mariadbBackupSpecStorageVolumeEmptyDir {
  medium: String
  sizeLimit: JSONObject
}
input mariadbBackupSpecStorageVolumeEphemeralVolumeClaimTemplate {
  metadata: JSONObject
  spec: mariadbBackupSpecStoragePersistentVolumeClaim!
}
input mariadbBackupSpecStorageVolumeEphemeral {
  volumeClaimTemplate: mariadbBackupSpecStorageVolumeEphemeralVolumeClaimTemplate
}
input mariadbBackupSpecStorageVolumeFc {
  fsType: String
  lun: Int
  readOnly: Boolean
  targetWWNs: [String]
  wwids: [String]
}
input mariadbBackupSpecStorageVolumeFlexVolume {
  driver: String!
  fsType: String
  options: JSONObject
  readOnly: Boolean
  secretRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
}
input mariadbBackupSpecStorageVolumeFlocker {
  datasetName: String
  datasetUUID: String
}
input mariadbBackupSpecStorageVolumeGcePersistentDisk {
  fsType: String
  partition: Int
  pdName: String!
  readOnly: Boolean
}
input mariadbBackupSpecStorageVolumeGitRepo {
  directory: String
  repository: String!
  revision: String
}
input mariadbBackupSpecStorageVolumeGlusterfs {
  endpoints: String!
  path: String!
  readOnly: Boolean
}
input mariadbBackupSpecStorageVolumeHostPath {
  path: String!
  type: String
}
input mariadbBackupSpecStorageVolumeIscsi {
  chapAuthDiscovery: Boolean
  chapAuthSession: Boolean
  fsType: String
  initiatorName: String
  iqn: String!
  iscsiInterface: String
  lun: Int!
  portals: [String]
  readOnly: Boolean
  secretRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
  targetPortal: String!
}
input mariadbBackupSpecStorageVolumeNfs {
  path: String!
  readOnly: Boolean
  server: String!
}
input mariadbBackupSpecStorageVolumePersistentVolumeClaim {
  claimName: String!
  readOnly: Boolean
}
input mariadbBackupSpecStorageVolumePhotonPersistentDisk {
  fsType: String
  pdID: String!
}
input mariadbBackupSpecStorageVolumePortworxVolume {
  fsType: String
  readOnly: Boolean
  volumeID: String!
}
input mariadbBackupSpecStorageVolumeProjectedSourcesItemConfigMap {
  items: [mariadbBackupSpecStorageVolumeConfigMapItemsItem]
  name: String
  optional: Boolean
}
input mariadbBackupSpecStorageVolumeProjectedSourcesItemDownwardAPI {
  items: [mariadbBackupSpecStorageVolumeDownwardAPIItemsItem]
}
input mariadbBackupSpecStorageVolumeProjectedSourcesItemSecret {
  items: [mariadbBackupSpecStorageVolumeConfigMapItemsItem]
  name: String
  optional: Boolean
}
input mariadbBackupSpecStorageVolumeProjectedSourcesItemServiceAccountToken {
  audience: String
  expirationSeconds: Int
  path: String!
}
input mariadbBackupSpecStorageVolumeProjectedSourcesItem {
  configMap: mariadbBackupSpecStorageVolumeProjectedSourcesItemConfigMap
  downwardAPI: mariadbBackupSpecStorageVolumeProjectedSourcesItemDownwardAPI
  secret: mariadbBackupSpecStorageVolumeProjectedSourcesItemSecret
  serviceAccountToken: mariadbBackupSpecStorageVolumeProjectedSourcesItemServiceAccountToken
}
input mariadbBackupSpecStorageVolumeProjected {
  defaultMode: Int
  sources: [mariadbBackupSpecStorageVolumeProjectedSourcesItem]
}
input mariadbBackupSpecStorageVolumeQuobyte {
  group: String
  readOnly: Boolean
  registry: String!
  tenant: String
  user: String
  volume: String!
}
input mariadbBackupSpecStorageVolumeRbd {
  fsType: String
  image: String!
  keyring: String
  monitors: [String]!
  pool: String
  readOnly: Boolean
  secretRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
  user: String
}
input mariadbBackupSpecStorageVolumeScaleIO {
  fsType: String
  gateway: String!
  protectionDomain: String
  readOnly: Boolean
  secretRef: mariadbBackupSpecStorageVolumeCephfsSecretRef!
  sslEnabled: Boolean
  storageMode: String
  storagePool: String
  system: String!
  volumeName: String
}
input mariadbBackupSpecStorageVolumeSecret {
  defaultMode: Int
  items: [mariadbBackupSpecStorageVolumeConfigMapItemsItem]
  optional: Boolean
  secretName: String
}
input mariadbBackupSpecStorageVolumeStorageos {
  fsType: String
  readOnly: Boolean
  secretRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
  volumeName: String
  volumeNamespace: String
}
input mariadbBackupSpecStorageVolumeVsphereVolume {
  fsType: String
  storagePolicyID: String
  storagePolicyName: String
  volumePath: String!
}
input mariadbBackupSpecStorageVolume {
  awsElasticBlockStore: mariadbBackupSpecStorageVolumeAwsElasticBlockStore
  azureDisk: mariadbBackupSpecStorageVolumeAzureDisk
  azureFile: mariadbBackupSpecStorageVolumeAzureFile
  cephfs: mariadbBackupSpecStorageVolumeCephfs
  cinder: mariadbBackupSpecStorageVolumeCinder
  configMap: mariadbBackupSpecStorageVolumeConfigMap
  csi: mariadbBackupSpecStorageVolumeCsi
  downwardAPI: mariadbBackupSpecStorageVolumeDownwardAPI
  emptyDir: mariadbBackupSpecStorageVolumeEmptyDir
  ephemeral: mariadbBackupSpecStorageVolumeEphemeral
  fc: mariadbBackupSpecStorageVolumeFc
  flexVolume: mariadbBackupSpecStorageVolumeFlexVolume
  flocker: mariadbBackupSpecStorageVolumeFlocker
  gcePersistentDisk: mariadbBackupSpecStorageVolumeGcePersistentDisk
  gitRepo: mariadbBackupSpecStorageVolumeGitRepo
  glusterfs: mariadbBackupSpecStorageVolumeGlusterfs
  hostPath: mariadbBackupSpecStorageVolumeHostPath
  iscsi: mariadbBackupSpecStorageVolumeIscsi
  nfs: mariadbBackupSpecStorageVolumeNfs
  persistentVolumeClaim: mariadbBackupSpecStorageVolumePersistentVolumeClaim
  photonPersistentDisk: mariadbBackupSpecStorageVolumePhotonPersistentDisk
  portworxVolume: mariadbBackupSpecStorageVolumePortworxVolume
  projected: mariadbBackupSpecStorageVolumeProjected
  quobyte: mariadbBackupSpecStorageVolumeQuobyte
  rbd: mariadbBackupSpecStorageVolumeRbd
  scaleIO: mariadbBackupSpecStorageVolumeScaleIO
  secret: mariadbBackupSpecStorageVolumeSecret
  storageos: mariadbBackupSpecStorageVolumeStorageos
  vsphereVolume: mariadbBackupSpecStorageVolumeVsphereVolume
}
input mariadbBackupSpecStorage {
  persistentVolumeClaim: mariadbBackupSpecStoragePersistentVolumeClaim
  volume: mariadbBackupSpecStorageVolume
}
input mariadbBackupSpecTolerationsItem {
  effect: String
  key: String
  operator: String
  tolerationSeconds: Int
  value: String
}
input mariadbBackupSpec {
  affinity: mariadbBackupSpecAffinity
  args: [String]
  backoffLimit: Int
  mariaDbRef: mariadbBackupSpecMariaDbRef!
  maxRetentionDays: Int
  nodeSelector: JSONObject
  resources: mariadbBackupSpecResources
  restartPolicy: String
  schedule: mariadbBackupSpecSchedule
  storage: mariadbBackupSpecStorage!
  tolerations: [mariadbBackupSpecTolerationsItem]
}
type mariadbBackupAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
type mariadbBackupAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference {
  matchExpressions: [mariadbBackupAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem]
  matchFields: [mariadbBackupAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreferenceMatchExpressionsItem]
}
type mariadbBackupAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  preference: mariadbBackupAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!
  weight: Int!
}
type mariadbBackupAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  nodeSelectorTerms: [mariadbBackupAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference!]
}
type mariadbBackupAffinityNodeAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [mariadbBackupAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: mariadbBackupAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
}
type mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem {
  key: String!
  operator: String!
  values: [String]
}
type mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector {
  matchExpressions: [mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelectorMatchExpressionsItem]
  matchLabels: JSONObject
}
type mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm {
  labelSelector: mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  namespaceSelector: mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  namespaces: [String]
  topologyKey: String!
}
type mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem {
  podAffinityTerm: mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm!
  weight: Int!
}
type mariadbBackupAffinityPodAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
type mariadbBackupAffinityPodAntiAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
  requiredDuringSchedulingIgnoredDuringExecution: [mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm]
}
type mariadbBackupAffinity {
  nodeAffinity: mariadbBackupAffinityNodeAffinity
  podAffinity: mariadbBackupAffinityPodAffinity
  podAntiAffinity: mariadbBackupAffinityPodAntiAffinity
}
type mariadbBackupMariaDbRef {
  apiVersion: String
  fieldPath: String
  kind: String
  name: String
  namespace: String
  resourceVersion: String
  uid: String
  waitForIt: Boolean
}
type mariadbBackupResourcesClaimsItem {
  name: String!
}
type mariadbBackupResources {
  claims: [mariadbBackupResourcesClaimsItem]
  limits: JSONObject
  requests: JSONObject
}
type mariadbBackupSchedule {
  cron: String!
  suspend: Boolean
}
type mariadbBackupStoragePersistentVolumeClaimDataSource {
  apiGroup: String
  kind: String!
  name: String!
}
type mariadbBackupStoragePersistentVolumeClaimDataSourceRef {
  apiGroup: String
  kind: String!
  name: String!
  namespace: String
}
type mariadbBackupStoragePersistentVolumeClaim {
  accessModes: [String]
  dataSource: mariadbBackupStoragePersistentVolumeClaimDataSource
  dataSourceRef: mariadbBackupStoragePersistentVolumeClaimDataSourceRef
  resources: mariadbBackupResources
  selector: mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  storageClassName: String
  volumeMode: String
  volumeName: String
}
type mariadbBackupStorageVolumeAwsElasticBlockStore {
  fsType: String
  partition: Int
  readOnly: Boolean
  volumeID: String!
}
type mariadbBackupStorageVolumeAzureDisk {
  cachingMode: String
  diskName: String!
  diskURI: String!
  fsType: String
  kind: String
  readOnly: Boolean
}
type mariadbBackupStorageVolumeAzureFile {
  readOnly: Boolean
  secretName: String!
  shareName: String!
}
type mariadbBackupStorageVolumeCephfsSecretRef {
  name: String
}
type mariadbBackupStorageVolumeCephfs {
  monitors: [String]!
  path: String
  readOnly: Boolean
  secretFile: String
  secretRef: mariadbBackupStorageVolumeCephfsSecretRef
  user: String
}
type mariadbBackupStorageVolumeCinder {
  fsType: String
  readOnly: Boolean
  secretRef: mariadbBackupStorageVolumeCephfsSecretRef
  volumeID: String!
}
type mariadbBackupStorageVolumeConfigMapItemsItem {
  key: String!
  mode: Int
  path: String!
}
type mariadbBackupStorageVolumeConfigMap {
  defaultMode: Int
  items: [mariadbBackupStorageVolumeConfigMapItemsItem]
  name: String
  optional: Boolean
}
type mariadbBackupStorageVolumeCsi {
  driver: String!
  fsType: String
  nodePublishSecretRef: mariadbBackupStorageVolumeCephfsSecretRef
  readOnly: Boolean
  volumeAttributes: JSONObject
}
type mariadbBackupStorageVolumeDownwardAPIItemsItemFieldRef {
  apiVersion: String
  fieldPath: String!
}
type mariadbBackupStorageVolumeDownwardAPIItemsItemResourceFieldRef {
  containerName: String
  divisor: JSONObject
  resource: String!
}
type mariadbBackupStorageVolumeDownwardAPIItemsItem {
  fieldRef: mariadbBackupStorageVolumeDownwardAPIItemsItemFieldRef
  mode: Int
  path: String!
  resourceFieldRef: mariadbBackupStorageVolumeDownwardAPIItemsItemResourceFieldRef
}
type mariadbBackupStorageVolumeDownwardAPI {
  defaultMode: Int
  items: [mariadbBackupStorageVolumeDownwardAPIItemsItem]
}
type mariadbBackupStorageVolumeEmptyDir {
  medium: String
  sizeLimit: JSONObject
}
type mariadbBackupStorageVolumeEphemeralVolumeClaimTemplate {
  metadata: JSONObject
  spec: mariadbBackupStoragePersistentVolumeClaim!
}
type mariadbBackupStorageVolumeEphemeral {
  volumeClaimTemplate: mariadbBackupStorageVolumeEphemeralVolumeClaimTemplate
}
type mariadbBackupStorageVolumeFc {
  fsType: String
  lun: Int
  readOnly: Boolean
  targetWWNs: [String]
  wwids: [String]
}
type mariadbBackupStorageVolumeFlexVolume {
  driver: String!
  fsType: String
  options: JSONObject
  readOnly: Boolean
  secretRef: mariadbBackupStorageVolumeCephfsSecretRef
}
type mariadbBackupStorageVolumeFlocker {
  datasetName: String
  datasetUUID: String
}
type mariadbBackupStorageVolumeGcePersistentDisk {
  fsType: String
  partition: Int
  pdName: String!
  readOnly: Boolean
}
type mariadbBackupStorageVolumeGitRepo {
  directory: String
  repository: String!
  revision: String
}
type mariadbBackupStorageVolumeGlusterfs {
  endpoints: String!
  path: String!
  readOnly: Boolean
}
type mariadbBackupStorageVolumeHostPath {
  path: String!
  type: String
}
type mariadbBackupStorageVolumeIscsi {
  chapAuthDiscovery: Boolean
  chapAuthSession: Boolean
  fsType: String
  initiatorName: String
  iqn: String!
  iscsiInterface: String
  lun: Int!
  portals: [String]
  readOnly: Boolean
  secretRef: mariadbBackupStorageVolumeCephfsSecretRef
  targetPortal: String!
}
type mariadbBackupStorageVolumeNfs {
  path: String!
  readOnly: Boolean
  server: String!
}
type mariadbBackupStorageVolumePersistentVolumeClaim {
  claimName: String!
  readOnly: Boolean
}
type mariadbBackupStorageVolumePhotonPersistentDisk {
  fsType: String
  pdID: String!
}
type mariadbBackupStorageVolumePortworxVolume {
  fsType: String
  readOnly: Boolean
  volumeID: String!
}
type mariadbBackupStorageVolumeProjectedSourcesItemConfigMap {
  items: [mariadbBackupStorageVolumeConfigMapItemsItem]
  name: String
  optional: Boolean
}
type mariadbBackupStorageVolumeProjectedSourcesItemDownwardAPI {
  items: [mariadbBackupStorageVolumeDownwardAPIItemsItem]
}
type mariadbBackupStorageVolumeProjectedSourcesItemSecret {
  items: [mariadbBackupStorageVolumeConfigMapItemsItem]
  name: String
  optional: Boolean
}
type mariadbBackupStorageVolumeProjectedSourcesItemServiceAccountToken {
  audience: String
  expirationSeconds: Int
  path: String!
}
type mariadbBackupStorageVolumeProjectedSourcesItem {
  configMap: mariadbBackupStorageVolumeProjectedSourcesItemConfigMap
  downwardAPI: mariadbBackupStorageVolumeProjectedSourcesItemDownwardAPI
  secret: mariadbBackupStorageVolumeProjectedSourcesItemSecret
  serviceAccountToken: mariadbBackupStorageVolumeProjectedSourcesItemServiceAccountToken
}
type mariadbBackupStorageVolumeProjected {
  defaultMode: Int
  sources: [mariadbBackupStorageVolumeProjectedSourcesItem]
}
type mariadbBackupStorageVolumeQuobyte {
  group: String
  readOnly: Boolean
  registry: String!
  tenant: String
  user: String
  volume: String!
}
type mariadbBackupStorageVolumeRbd {
  fsType: String
  image: String!
  keyring: String
  monitors: [String]!
  pool: String
  readOnly: Boolean
  secretRef: mariadbBackupStorageVolumeCephfsSecretRef
  user: String
}
type mariadbBackupStorageVolumeScaleIO {
  fsType: String
  gateway: String!
  protectionDomain: String
  readOnly: Boolean
  secretRef: mariadbBackupStorageVolumeCephfsSecretRef!
  sslEnabled: Boolean
  storageMode: String
  storagePool: String
  system: String!
  volumeName: String
}
type mariadbBackupStorageVolumeSecret {
  defaultMode: Int
  items: [mariadbBackupStorageVolumeConfigMapItemsItem]
  optional: Boolean
  secretName: String
}
type mariadbBackupStorageVolumeStorageos {
  fsType: String
  readOnly: Boolean
  secretRef: mariadbBackupStorageVolumeCephfsSecretRef
  volumeName: String
  volumeNamespace: String
}
type mariadbBackupStorageVolumeVsphereVolume {
  fsType: String
  storagePolicyID: String
  storagePolicyName: String
  volumePath: String!
}
type mariadbBackupStorageVolume {
  awsElasticBlockStore: mariadbBackupStorageVolumeAwsElasticBlockStore
  azureDisk: mariadbBackupStorageVolumeAzureDisk
  azureFile: mariadbBackupStorageVolumeAzureFile
  cephfs: mariadbBackupStorageVolumeCephfs
  cinder: mariadbBackupStorageVolumeCinder
  configMap: mariadbBackupStorageVolumeConfigMap
  csi: mariadbBackupStorageVolumeCsi
  downwardAPI: mariadbBackupStorageVolumeDownwardAPI
  emptyDir: mariadbBackupStorageVolumeEmptyDir
  ephemeral: mariadbBackupStorageVolumeEphemeral
  fc: mariadbBackupStorageVolumeFc
  flexVolume: mariadbBackupStorageVolumeFlexVolume
  flocker: mariadbBackupStorageVolumeFlocker
  gcePersistentDisk: mariadbBackupStorageVolumeGcePersistentDisk
  gitRepo: mariadbBackupStorageVolumeGitRepo
  glusterfs: mariadbBackupStorageVolumeGlusterfs
  hostPath: mariadbBackupStorageVolumeHostPath
  iscsi: mariadbBackupStorageVolumeIscsi
  nfs: mariadbBackupStorageVolumeNfs
  persistentVolumeClaim: mariadbBackupStorageVolumePersistentVolumeClaim
  photonPersistentDisk: mariadbBackupStorageVolumePhotonPersistentDisk
  portworxVolume: mariadbBackupStorageVolumePortworxVolume
  projected: mariadbBackupStorageVolumeProjected
  quobyte: mariadbBackupStorageVolumeQuobyte
  rbd: mariadbBackupStorageVolumeRbd
  scaleIO: mariadbBackupStorageVolumeScaleIO
  secret: mariadbBackupStorageVolumeSecret
  storageos: mariadbBackupStorageVolumeStorageos
  vsphereVolume: mariadbBackupStorageVolumeVsphereVolume
}
type mariadbBackupStorage {
  persistentVolumeClaim: mariadbBackupStoragePersistentVolumeClaim
  volume: mariadbBackupStorageVolume
}
type mariadbBackupTolerationsItem {
  effect: String
  key: String
  operator: String
  tolerationSeconds: Int
  value: String
}
type mariadbBackup {
  metadata: metadata
  affinity: mariadbBackupAffinity
  args: [String]
  backoffLimit: Int
  mariaDbRef: mariadbBackupMariaDbRef!
  maxRetentionDays: Int
  nodeSelector: JSONObject
  resources: mariadbBackupResources
  restartPolicy: String
  schedule: mariadbBackupSchedule
  storage: mariadbBackupStorage!
  tolerations: [mariadbBackupTolerationsItem]
  status: mariadbBackupStatus
}
type mariadbConnectionStatus {
  conditions: [mariadbBackupStatusConditionsItem]
}
input mariadbConnectionSpecHealthCheck {
  interval: String
  retryInterval: String
}
input mariadbConnectionSpecPasswordSecretKeyRef {
  key: String!
  name: String
  optional: Boolean
}
input mariadbConnectionSpecSecretTemplate {
  annotations: JSONObject
  databaseKey: String
  format: String
  hostKey: String
  key: String
  labels: JSONObject
  passwordKey: String
  portKey: String
  usernameKey: String
}
input mariadbConnectionSpec {
  database: String
  healthCheck: mariadbConnectionSpecHealthCheck
  mariaDbRef: mariadbBackupSpecMariaDbRef!
  params: JSONObject
  passwordSecretKeyRef: mariadbConnectionSpecPasswordSecretKeyRef!
  secretName: String
  secretTemplate: mariadbConnectionSpecSecretTemplate
  serviceName: String
  username: String!
}
type mariadbConnectionHealthCheck {
  interval: String
  retryInterval: String
}
type mariadbConnectionPasswordSecretKeyRef {
  key: String!
  name: String
  optional: Boolean
}
type mariadbConnectionSecretTemplate {
  annotations: JSONObject
  databaseKey: String
  format: String
  hostKey: String
  key: String
  labels: JSONObject
  passwordKey: String
  portKey: String
  usernameKey: String
}
type mariadbConnection {
  metadata: metadata
  database: String
  healthCheck: mariadbConnectionHealthCheck
  mariaDbRef: mariadbBackupMariaDbRef!
  params: JSONObject
  passwordSecretKeyRef: mariadbConnectionPasswordSecretKeyRef!
  secretName: String
  secretTemplate: mariadbConnectionSecretTemplate
  serviceName: String
  username: String!
  status: mariadbConnectionStatus
}
type mariadbDatabaseStatus {
  conditions: [mariadbBackupStatusConditionsItem]
}
input mariadbDatabaseSpec {
  characterSet: String
  collate: String
  mariaDbRef: mariadbBackupSpecMariaDbRef!
  name: String
  retryInterval: String
}
type mariadbDatabase {
  metadata: metadata
  characterSet: String
  collate: String
  mariaDbRef: mariadbBackupMariaDbRef!
  name: String
  retryInterval: String
  status: mariadbDatabaseStatus
}
type mariadbGrantStatus {
  conditions: [mariadbBackupStatusConditionsItem]
}
input mariadbGrantSpec {
  database: String
  grantOption: Boolean
  host: String
  mariaDbRef: mariadbBackupSpecMariaDbRef!
  privileges: [String]!
  retryInterval: String
  table: String
  username: String!
}
type mariadbGrant {
  metadata: metadata
  database: String
  grantOption: Boolean
  host: String
  mariaDbRef: mariadbBackupMariaDbRef!
  privileges: [String]!
  retryInterval: String
  table: String
  username: String!
  status: mariadbGrantStatus
}
type mariadbMariaDBStatusGaleraRecoveryBootstrap {
  pod: String
  time: String
}
type mariadbMariaDBStatusGaleraRecovery {
  bootstrap: mariadbMariaDBStatusGaleraRecoveryBootstrap
  recovered: JSONObject
  state: JSONObject
}
type mariadbMariaDBStatus {
  conditions: [mariadbBackupStatusConditionsItem]
  currentPrimary: String
  currentPrimaryPodIndex: Int
  galeraRecovery: mariadbMariaDBStatusGaleraRecovery
}
input mariadbMariaDBSpecBootstrapFrom {
  backupRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
  fileName: String
  volume: mariadbBackupSpecStorageVolume
}
input mariadbMariaDBSpecConnection {
  healthCheck: mariadbConnectionSpecHealthCheck
  params: JSONObject
  secretName: String
  secretTemplate: mariadbConnectionSpecSecretTemplate
  serviceName: String
}
input mariadbMariaDBSpecEnvItemValueFromConfigMapKeyRef {
  key: String!
  name: String
  optional: Boolean
}
input mariadbMariaDBSpecEnvItemValueFrom {
  configMapKeyRef: mariadbMariaDBSpecEnvItemValueFromConfigMapKeyRef
  fieldRef: mariadbBackupSpecStorageVolumeDownwardAPIItemsItemFieldRef
  resourceFieldRef: mariadbBackupSpecStorageVolumeDownwardAPIItemsItemResourceFieldRef
  secretKeyRef: mariadbConnectionSpecPasswordSecretKeyRef
}
input mariadbMariaDBSpecEnvItem {
  name: String!
  value: String
  valueFrom: mariadbMariaDBSpecEnvItemValueFrom
}
input mariadbMariaDBSpecEnvFromItemConfigMapRef {
  name: String
  optional: Boolean
}
input mariadbMariaDBSpecEnvFromItemSecretRef {
  name: String
  optional: Boolean
}
input mariadbMariaDBSpecEnvFromItem {
  configMapRef: mariadbMariaDBSpecEnvFromItemConfigMapRef
  prefix: String
  secretRef: mariadbMariaDBSpecEnvFromItemSecretRef
}
input mariadbMariaDBSpecGaleraAgentKubernetesAuth {
  authDelegatorRoleName: String
  enabled: Boolean
}
input mariadbMariaDBSpecGaleraAgentLivenessProbeExec {
  command: [String]
}
input mariadbMariaDBSpecGaleraAgentLivenessProbeGrpc {
  port: Int!
  service: String
}
input mariadbMariaDBSpecGaleraAgentLivenessProbeHttpGetHttpHeadersItem {
  name: String!
  value: String!
}
input mariadbMariaDBSpecGaleraAgentLivenessProbeHttpGet {
  host: String
  httpHeaders: [mariadbMariaDBSpecGaleraAgentLivenessProbeHttpGetHttpHeadersItem]
  path: String
  port: JSONObject!
  scheme: String
}
input mariadbMariaDBSpecGaleraAgentLivenessProbeTcpSocket {
  host: String
  port: JSONObject!
}
input mariadbMariaDBSpecGaleraAgentLivenessProbe {
  exec: mariadbMariaDBSpecGaleraAgentLivenessProbeExec
  failureThreshold: Int
  grpc: mariadbMariaDBSpecGaleraAgentLivenessProbeGrpc
  httpGet: mariadbMariaDBSpecGaleraAgentLivenessProbeHttpGet
  initialDelaySeconds: Int
  periodSeconds: Int
  successThreshold: Int
  tcpSocket: mariadbMariaDBSpecGaleraAgentLivenessProbeTcpSocket
  terminationGracePeriodSeconds: Int
  timeoutSeconds: Int
}
input mariadbMariaDBSpecGaleraAgentSecurityContextCapabilities {
  add: [String]
  drop: [String]
}
input mariadbMariaDBSpecGaleraAgentSecurityContextSeLinuxOptions {
  level: String
  role: String
  type: String
  user: String
}
input mariadbMariaDBSpecGaleraAgentSecurityContextSeccompProfile {
  localhostProfile: String
  type: String!
}
input mariadbMariaDBSpecGaleraAgentSecurityContextWindowsOptions {
  gmsaCredentialSpec: String
  gmsaCredentialSpecName: String
  hostProcess: Boolean
  runAsUserName: String
}
input mariadbMariaDBSpecGaleraAgentSecurityContext {
  allowPrivilegeEscalation: Boolean
  capabilities: mariadbMariaDBSpecGaleraAgentSecurityContextCapabilities
  privileged: Boolean
  procMount: String
  readOnlyRootFilesystem: Boolean
  runAsGroup: Int
  runAsNonRoot: Boolean
  runAsUser: Int
  seLinuxOptions: mariadbMariaDBSpecGaleraAgentSecurityContextSeLinuxOptions
  seccompProfile: mariadbMariaDBSpecGaleraAgentSecurityContextSeccompProfile
  windowsOptions: mariadbMariaDBSpecGaleraAgentSecurityContextWindowsOptions
}
input mariadbMariaDBSpecGaleraAgentVolumeMountsItem {
  mountPath: String!
  mountPropagation: String
  name: String!
  readOnly: Boolean
  subPath: String
  subPathExpr: String
}
input mariadbMariaDBSpecGaleraAgent {
  args: [String]
  command: [String]
  env: [mariadbMariaDBSpecEnvItem]
  envFrom: [mariadbMariaDBSpecEnvFromItem]
  gracefulShutdownTimeout: String
  image: String!
  imagePullPolicy: String
  kubernetesAuth: mariadbMariaDBSpecGaleraAgentKubernetesAuth
  livenessProbe: mariadbMariaDBSpecGaleraAgentLivenessProbe
  port: Int
  readinessProbe: mariadbMariaDBSpecGaleraAgentLivenessProbe
  resources: mariadbBackupSpecResources
  securityContext: mariadbMariaDBSpecGaleraAgentSecurityContext
  volumeMounts: [mariadbMariaDBSpecGaleraAgentVolumeMountsItem]
}
input mariadbMariaDBSpecGaleraInitContainer {
  args: [String]
  command: [String]
  env: [mariadbMariaDBSpecEnvItem]
  envFrom: [mariadbMariaDBSpecEnvFromItem]
  image: String!
  imagePullPolicy: String
  livenessProbe: mariadbMariaDBSpecGaleraAgentLivenessProbe
  readinessProbe: mariadbMariaDBSpecGaleraAgentLivenessProbe
  resources: mariadbBackupSpecResources
  securityContext: mariadbMariaDBSpecGaleraAgentSecurityContext
  volumeMounts: [mariadbMariaDBSpecGaleraAgentVolumeMountsItem]
}
input mariadbMariaDBSpecGaleraPrimary {
  automaticFailover: Boolean
  podIndex: Int
}
input mariadbMariaDBSpecGaleraRecovery {
  clusterBootstrapTimeout: String
  clusterHealthyTimeout: String
  enabled: Boolean
  podRecoveryTimeout: String
  podSyncTimeout: String
}
input mariadbMariaDBSpecGaleraVolumeClaimTemplate {
  accessModes: [String]
  annotations: JSONObject
  dataSource: mariadbBackupSpecStoragePersistentVolumeClaimDataSource
  dataSourceRef: mariadbBackupSpecStoragePersistentVolumeClaimDataSourceRef
  labels: JSONObject
  resources: mariadbBackupSpecResources
  selector: mariadbBackupSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  storageClassName: String
  volumeMode: String
  volumeName: String
}
input mariadbMariaDBSpecGalera {
  agent: mariadbMariaDBSpecGaleraAgent
  enabled: Boolean
  initContainer: mariadbMariaDBSpecGaleraInitContainer
  primary: mariadbMariaDBSpecGaleraPrimary
  recovery: mariadbMariaDBSpecGaleraRecovery
  replicaThreads: Int
  sst: String
  volumeClaimTemplate: mariadbMariaDBSpecGaleraVolumeClaimTemplate
}
input mariadbMariaDBSpecMetricsExporter {
  args: [String]
  command: [String]
  env: [mariadbMariaDBSpecEnvItem]
  envFrom: [mariadbMariaDBSpecEnvFromItem]
  image: String!
  imagePullPolicy: String
  livenessProbe: mariadbMariaDBSpecGaleraAgentLivenessProbe
  port: Int
  readinessProbe: mariadbMariaDBSpecGaleraAgentLivenessProbe
  resources: mariadbBackupSpecResources
  securityContext: mariadbMariaDBSpecGaleraAgentSecurityContext
  volumeMounts: [mariadbMariaDBSpecGaleraAgentVolumeMountsItem]
}
input mariadbMariaDBSpecMetricsServiceMonitor {
  interval: String
  prometheusRelease: String!
  scrapeTimeout: String
}
input mariadbMariaDBSpecMetrics {
  exporter: mariadbMariaDBSpecMetricsExporter!
  serviceMonitor: mariadbMariaDBSpecMetricsServiceMonitor!
}
input mariadbMariaDBSpecPodSecurityContextSysctlsItem {
  name: String!
  value: String!
}
input mariadbMariaDBSpecPodSecurityContext {
  fsGroup: Int
  fsGroupChangePolicy: String
  runAsGroup: Int
  runAsNonRoot: Boolean
  runAsUser: Int
  seLinuxOptions: mariadbMariaDBSpecGaleraAgentSecurityContextSeLinuxOptions
  seccompProfile: mariadbMariaDBSpecGaleraAgentSecurityContextSeccompProfile
  supplementalGroups: [Int]
  sysctls: [mariadbMariaDBSpecPodSecurityContextSysctlsItem]
  windowsOptions: mariadbMariaDBSpecGaleraAgentSecurityContextWindowsOptions
}
input mariadbMariaDBSpecPrimaryService {
  annotations: JSONObject
  externalTrafficPolicy: String
  labels: JSONObject
  loadBalancerIP: String
  loadBalancerSourceRanges: [String]
  sessionAffinity: String
  type: String
}
input mariadbMariaDBSpecReplicationReplica {
  connectionRetries: Int
  connectionTimeout: String
  gtid: String
  replPasswordSecretKeyRef: mariadbConnectionSpecPasswordSecretKeyRef
  syncTimeout: String
  waitPoint: String
}
input mariadbMariaDBSpecReplication {
  enabled: Boolean
  primary: mariadbMariaDBSpecGaleraPrimary
  replica: mariadbMariaDBSpecReplicationReplica
  syncBinlog: Boolean
}
input mariadbMariaDBSpecUpdateStrategyRollingUpdate {
  maxUnavailable: JSONObject
  partition: Int
}
input mariadbMariaDBSpecUpdateStrategy {
  rollingUpdate: mariadbMariaDBSpecUpdateStrategyRollingUpdate
  type: String
}
input mariadbMariaDBSpecVolumesItem {
  awsElasticBlockStore: mariadbBackupSpecStorageVolumeAwsElasticBlockStore
  azureDisk: mariadbBackupSpecStorageVolumeAzureDisk
  azureFile: mariadbBackupSpecStorageVolumeAzureFile
  cephfs: mariadbBackupSpecStorageVolumeCephfs
  cinder: mariadbBackupSpecStorageVolumeCinder
  configMap: mariadbBackupSpecStorageVolumeConfigMap
  csi: mariadbBackupSpecStorageVolumeCsi
  downwardAPI: mariadbBackupSpecStorageVolumeDownwardAPI
  emptyDir: mariadbBackupSpecStorageVolumeEmptyDir
  ephemeral: mariadbBackupSpecStorageVolumeEphemeral
  fc: mariadbBackupSpecStorageVolumeFc
  flexVolume: mariadbBackupSpecStorageVolumeFlexVolume
  flocker: mariadbBackupSpecStorageVolumeFlocker
  gcePersistentDisk: mariadbBackupSpecStorageVolumeGcePersistentDisk
  gitRepo: mariadbBackupSpecStorageVolumeGitRepo
  glusterfs: mariadbBackupSpecStorageVolumeGlusterfs
  hostPath: mariadbBackupSpecStorageVolumeHostPath
  iscsi: mariadbBackupSpecStorageVolumeIscsi
  name: String!
  nfs: mariadbBackupSpecStorageVolumeNfs
  persistentVolumeClaim: mariadbBackupSpecStorageVolumePersistentVolumeClaim
  photonPersistentDisk: mariadbBackupSpecStorageVolumePhotonPersistentDisk
  portworxVolume: mariadbBackupSpecStorageVolumePortworxVolume
  projected: mariadbBackupSpecStorageVolumeProjected
  quobyte: mariadbBackupSpecStorageVolumeQuobyte
  rbd: mariadbBackupSpecStorageVolumeRbd
  scaleIO: mariadbBackupSpecStorageVolumeScaleIO
  secret: mariadbBackupSpecStorageVolumeSecret
  storageos: mariadbBackupSpecStorageVolumeStorageos
  vsphereVolume: mariadbBackupSpecStorageVolumeVsphereVolume
}
input mariadbMariaDBSpec {
  affinity: mariadbBackupSpecAffinity
  args: [String]
  bootstrapFrom: mariadbMariaDBSpecBootstrapFrom
  command: [String]
  connection: mariadbMariaDBSpecConnection
  database: String
  env: [mariadbMariaDBSpecEnvItem]
  envFrom: [mariadbMariaDBSpecEnvFromItem]
  galera: mariadbMariaDBSpecGalera
  image: String!
  imagePullPolicy: String
  imagePullSecrets: [mariadbBackupSpecStorageVolumeCephfsSecretRef]
  inheritMetadata: JSONObject
  initContainers: [mariadbMariaDBSpecGaleraInitContainer]
  livenessProbe: mariadbMariaDBSpecGaleraAgentLivenessProbe
  metrics: mariadbMariaDBSpecMetrics
  myCnf: String
  myCnfConfigMapKeyRef: mariadbMariaDBSpecEnvItemValueFromConfigMapKeyRef
  nodeSelector: JSONObject
  passwordSecretKeyRef: mariadbConnectionSpecPasswordSecretKeyRef
  podAnnotations: JSONObject
  podDisruptionBudget: JSONObject
  podSecurityContext: mariadbMariaDBSpecPodSecurityContext
  port: Int
  primaryConnection: mariadbMariaDBSpecConnection
  primaryService: mariadbMariaDBSpecPrimaryService
  readinessProbe: mariadbMariaDBSpecGaleraAgentLivenessProbe
  replicas: Int
  replication: mariadbMariaDBSpecReplication
  resources: mariadbBackupSpecResources
  rootPasswordSecretKeyRef: mariadbConnectionSpecPasswordSecretKeyRef!
  secondaryConnection: mariadbMariaDBSpecConnection
  secondaryService: mariadbMariaDBSpecPrimaryService
  securityContext: mariadbMariaDBSpecGaleraAgentSecurityContext
  service: mariadbMariaDBSpecPrimaryService
  tolerations: [mariadbBackupSpecTolerationsItem]
  updateStrategy: mariadbMariaDBSpecUpdateStrategy
  username: String
  volumeClaimTemplate: mariadbMariaDBSpecGaleraVolumeClaimTemplate!
  volumeMounts: [mariadbMariaDBSpecGaleraAgentVolumeMountsItem]
  volumes: [mariadbMariaDBSpecVolumesItem]
}
type mariadbMariaDBBootstrapFrom {
  backupRef: mariadbBackupStorageVolumeCephfsSecretRef
  fileName: String
  volume: mariadbBackupStorageVolume
}
type mariadbMariaDBConnection {
  healthCheck: mariadbConnectionHealthCheck
  params: JSONObject
  secretName: String
  secretTemplate: mariadbConnectionSecretTemplate
  serviceName: String
}
type mariadbMariaDBEnvItemValueFromConfigMapKeyRef {
  key: String!
  name: String
  optional: Boolean
}
type mariadbMariaDBEnvItemValueFrom {
  configMapKeyRef: mariadbMariaDBEnvItemValueFromConfigMapKeyRef
  fieldRef: mariadbBackupStorageVolumeDownwardAPIItemsItemFieldRef
  resourceFieldRef: mariadbBackupStorageVolumeDownwardAPIItemsItemResourceFieldRef
  secretKeyRef: mariadbConnectionPasswordSecretKeyRef
}
type mariadbMariaDBEnvItem {
  name: String!
  value: String
  valueFrom: mariadbMariaDBEnvItemValueFrom
}
type mariadbMariaDBEnvFromItemConfigMapRef {
  name: String
  optional: Boolean
}
type mariadbMariaDBEnvFromItemSecretRef {
  name: String
  optional: Boolean
}
type mariadbMariaDBEnvFromItem {
  configMapRef: mariadbMariaDBEnvFromItemConfigMapRef
  prefix: String
  secretRef: mariadbMariaDBEnvFromItemSecretRef
}
type mariadbMariaDBGaleraAgentKubernetesAuth {
  authDelegatorRoleName: String
  enabled: Boolean
}
type mariadbMariaDBGaleraAgentLivenessProbeExec {
  command: [String]
}
type mariadbMariaDBGaleraAgentLivenessProbeGrpc {
  port: Int!
  service: String
}
type mariadbMariaDBGaleraAgentLivenessProbeHttpGetHttpHeadersItem {
  name: String!
  value: String!
}
type mariadbMariaDBGaleraAgentLivenessProbeHttpGet {
  host: String
  httpHeaders: [mariadbMariaDBGaleraAgentLivenessProbeHttpGetHttpHeadersItem]
  path: String
  port: JSONObject!
  scheme: String
}
type mariadbMariaDBGaleraAgentLivenessProbeTcpSocket {
  host: String
  port: JSONObject!
}
type mariadbMariaDBGaleraAgentLivenessProbe {
  exec: mariadbMariaDBGaleraAgentLivenessProbeExec
  failureThreshold: Int
  grpc: mariadbMariaDBGaleraAgentLivenessProbeGrpc
  httpGet: mariadbMariaDBGaleraAgentLivenessProbeHttpGet
  initialDelaySeconds: Int
  periodSeconds: Int
  successThreshold: Int
  tcpSocket: mariadbMariaDBGaleraAgentLivenessProbeTcpSocket
  terminationGracePeriodSeconds: Int
  timeoutSeconds: Int
}
type mariadbMariaDBGaleraAgentSecurityContextCapabilities {
  add: [String]
  drop: [String]
}
type mariadbMariaDBGaleraAgentSecurityContextSeLinuxOptions {
  level: String
  role: String
  type: String
  user: String
}
type mariadbMariaDBGaleraAgentSecurityContextSeccompProfile {
  localhostProfile: String
  type: String!
}
type mariadbMariaDBGaleraAgentSecurityContextWindowsOptions {
  gmsaCredentialSpec: String
  gmsaCredentialSpecName: String
  hostProcess: Boolean
  runAsUserName: String
}
type mariadbMariaDBGaleraAgentSecurityContext {
  allowPrivilegeEscalation: Boolean
  capabilities: mariadbMariaDBGaleraAgentSecurityContextCapabilities
  privileged: Boolean
  procMount: String
  readOnlyRootFilesystem: Boolean
  runAsGroup: Int
  runAsNonRoot: Boolean
  runAsUser: Int
  seLinuxOptions: mariadbMariaDBGaleraAgentSecurityContextSeLinuxOptions
  seccompProfile: mariadbMariaDBGaleraAgentSecurityContextSeccompProfile
  windowsOptions: mariadbMariaDBGaleraAgentSecurityContextWindowsOptions
}
type mariadbMariaDBGaleraAgentVolumeMountsItem {
  mountPath: String!
  mountPropagation: String
  name: String!
  readOnly: Boolean
  subPath: String
  subPathExpr: String
}
type mariadbMariaDBGaleraAgent {
  args: [String]
  command: [String]
  env: [mariadbMariaDBEnvItem]
  envFrom: [mariadbMariaDBEnvFromItem]
  gracefulShutdownTimeout: String
  image: String!
  imagePullPolicy: String
  kubernetesAuth: mariadbMariaDBGaleraAgentKubernetesAuth
  livenessProbe: mariadbMariaDBGaleraAgentLivenessProbe
  port: Int
  readinessProbe: mariadbMariaDBGaleraAgentLivenessProbe
  resources: mariadbBackupResources
  securityContext: mariadbMariaDBGaleraAgentSecurityContext
  volumeMounts: [mariadbMariaDBGaleraAgentVolumeMountsItem]
}
type mariadbMariaDBGaleraInitContainer {
  args: [String]
  command: [String]
  env: [mariadbMariaDBEnvItem]
  envFrom: [mariadbMariaDBEnvFromItem]
  image: String!
  imagePullPolicy: String
  livenessProbe: mariadbMariaDBGaleraAgentLivenessProbe
  readinessProbe: mariadbMariaDBGaleraAgentLivenessProbe
  resources: mariadbBackupResources
  securityContext: mariadbMariaDBGaleraAgentSecurityContext
  volumeMounts: [mariadbMariaDBGaleraAgentVolumeMountsItem]
}
type mariadbMariaDBGaleraPrimary {
  automaticFailover: Boolean
  podIndex: Int
}
type mariadbMariaDBGaleraRecovery {
  clusterBootstrapTimeout: String
  clusterHealthyTimeout: String
  enabled: Boolean
  podRecoveryTimeout: String
  podSyncTimeout: String
}
type mariadbMariaDBGaleraVolumeClaimTemplate {
  accessModes: [String]
  annotations: JSONObject
  dataSource: mariadbBackupStoragePersistentVolumeClaimDataSource
  dataSourceRef: mariadbBackupStoragePersistentVolumeClaimDataSourceRef
  labels: JSONObject
  resources: mariadbBackupResources
  selector: mariadbBackupAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTermLabelSelector
  storageClassName: String
  volumeMode: String
  volumeName: String
}
type mariadbMariaDBGalera {
  agent: mariadbMariaDBGaleraAgent
  enabled: Boolean
  initContainer: mariadbMariaDBGaleraInitContainer
  primary: mariadbMariaDBGaleraPrimary
  recovery: mariadbMariaDBGaleraRecovery
  replicaThreads: Int
  sst: String
  volumeClaimTemplate: mariadbMariaDBGaleraVolumeClaimTemplate
}
type mariadbMariaDBMetricsExporter {
  args: [String]
  command: [String]
  env: [mariadbMariaDBEnvItem]
  envFrom: [mariadbMariaDBEnvFromItem]
  image: String!
  imagePullPolicy: String
  livenessProbe: mariadbMariaDBGaleraAgentLivenessProbe
  port: Int
  readinessProbe: mariadbMariaDBGaleraAgentLivenessProbe
  resources: mariadbBackupResources
  securityContext: mariadbMariaDBGaleraAgentSecurityContext
  volumeMounts: [mariadbMariaDBGaleraAgentVolumeMountsItem]
}
type mariadbMariaDBMetricsServiceMonitor {
  interval: String
  prometheusRelease: String!
  scrapeTimeout: String
}
type mariadbMariaDBMetrics {
  exporter: mariadbMariaDBMetricsExporter!
  serviceMonitor: mariadbMariaDBMetricsServiceMonitor!
}
type mariadbMariaDBPodSecurityContextSysctlsItem {
  name: String!
  value: String!
}
type mariadbMariaDBPodSecurityContext {
  fsGroup: Int
  fsGroupChangePolicy: String
  runAsGroup: Int
  runAsNonRoot: Boolean
  runAsUser: Int
  seLinuxOptions: mariadbMariaDBGaleraAgentSecurityContextSeLinuxOptions
  seccompProfile: mariadbMariaDBGaleraAgentSecurityContextSeccompProfile
  supplementalGroups: [Int]
  sysctls: [mariadbMariaDBPodSecurityContextSysctlsItem]
  windowsOptions: mariadbMariaDBGaleraAgentSecurityContextWindowsOptions
}
type mariadbMariaDBPrimaryService {
  annotations: JSONObject
  externalTrafficPolicy: String
  labels: JSONObject
  loadBalancerIP: String
  loadBalancerSourceRanges: [String]
  sessionAffinity: String
  type: String
}
type mariadbMariaDBReplicationReplica {
  connectionRetries: Int
  connectionTimeout: String
  gtid: String
  replPasswordSecretKeyRef: mariadbConnectionPasswordSecretKeyRef
  syncTimeout: String
  waitPoint: String
}
type mariadbMariaDBReplication {
  enabled: Boolean
  primary: mariadbMariaDBGaleraPrimary
  replica: mariadbMariaDBReplicationReplica
  syncBinlog: Boolean
}
type mariadbMariaDBUpdateStrategyRollingUpdate {
  maxUnavailable: JSONObject
  partition: Int
}
type mariadbMariaDBUpdateStrategy {
  rollingUpdate: mariadbMariaDBUpdateStrategyRollingUpdate
  type: String
}
type mariadbMariaDBVolumesItem {
  awsElasticBlockStore: mariadbBackupStorageVolumeAwsElasticBlockStore
  azureDisk: mariadbBackupStorageVolumeAzureDisk
  azureFile: mariadbBackupStorageVolumeAzureFile
  cephfs: mariadbBackupStorageVolumeCephfs
  cinder: mariadbBackupStorageVolumeCinder
  configMap: mariadbBackupStorageVolumeConfigMap
  csi: mariadbBackupStorageVolumeCsi
  downwardAPI: mariadbBackupStorageVolumeDownwardAPI
  emptyDir: mariadbBackupStorageVolumeEmptyDir
  ephemeral: mariadbBackupStorageVolumeEphemeral
  fc: mariadbBackupStorageVolumeFc
  flexVolume: mariadbBackupStorageVolumeFlexVolume
  flocker: mariadbBackupStorageVolumeFlocker
  gcePersistentDisk: mariadbBackupStorageVolumeGcePersistentDisk
  gitRepo: mariadbBackupStorageVolumeGitRepo
  glusterfs: mariadbBackupStorageVolumeGlusterfs
  hostPath: mariadbBackupStorageVolumeHostPath
  iscsi: mariadbBackupStorageVolumeIscsi
  name: String!
  nfs: mariadbBackupStorageVolumeNfs
  persistentVolumeClaim: mariadbBackupStorageVolumePersistentVolumeClaim
  photonPersistentDisk: mariadbBackupStorageVolumePhotonPersistentDisk
  portworxVolume: mariadbBackupStorageVolumePortworxVolume
  projected: mariadbBackupStorageVolumeProjected
  quobyte: mariadbBackupStorageVolumeQuobyte
  rbd: mariadbBackupStorageVolumeRbd
  scaleIO: mariadbBackupStorageVolumeScaleIO
  secret: mariadbBackupStorageVolumeSecret
  storageos: mariadbBackupStorageVolumeStorageos
  vsphereVolume: mariadbBackupStorageVolumeVsphereVolume
}
type mariadbMariaDB {
  metadata: metadata
  affinity: mariadbBackupAffinity
  args: [String]
  bootstrapFrom: mariadbMariaDBBootstrapFrom
  command: [String]
  connection: mariadbMariaDBConnection
  database: String
  env: [mariadbMariaDBEnvItem]
  envFrom: [mariadbMariaDBEnvFromItem]
  galera: mariadbMariaDBGalera
  image: String!
  imagePullPolicy: String
  imagePullSecrets: [mariadbBackupStorageVolumeCephfsSecretRef]
  inheritMetadata: JSONObject
  initContainers: [mariadbMariaDBGaleraInitContainer]
  livenessProbe: mariadbMariaDBGaleraAgentLivenessProbe
  metrics: mariadbMariaDBMetrics
  myCnf: String
  myCnfConfigMapKeyRef: mariadbMariaDBEnvItemValueFromConfigMapKeyRef
  nodeSelector: JSONObject
  passwordSecretKeyRef: mariadbConnectionPasswordSecretKeyRef
  podAnnotations: JSONObject
  podDisruptionBudget: JSONObject
  podSecurityContext: mariadbMariaDBPodSecurityContext
  port: Int
  primaryConnection: mariadbMariaDBConnection
  primaryService: mariadbMariaDBPrimaryService
  readinessProbe: mariadbMariaDBGaleraAgentLivenessProbe
  replicas: Int
  replication: mariadbMariaDBReplication
  resources: mariadbBackupResources
  rootPasswordSecretKeyRef: mariadbConnectionPasswordSecretKeyRef!
  secondaryConnection: mariadbMariaDBConnection
  secondaryService: mariadbMariaDBPrimaryService
  securityContext: mariadbMariaDBGaleraAgentSecurityContext
  service: mariadbMariaDBPrimaryService
  tolerations: [mariadbBackupTolerationsItem]
  updateStrategy: mariadbMariaDBUpdateStrategy
  username: String
  volumeClaimTemplate: mariadbMariaDBGaleraVolumeClaimTemplate!
  volumeMounts: [mariadbMariaDBGaleraAgentVolumeMountsItem]
  volumes: [mariadbMariaDBVolumesItem]
  status: mariadbMariaDBStatus
}
type mariadbRestoreStatus {
  conditions: [mariadbBackupStatusConditionsItem]
}
input mariadbRestoreSpec {
  affinity: mariadbBackupSpecAffinity
  backoffLimit: Int
  backupRef: mariadbBackupSpecStorageVolumeCephfsSecretRef
  fileName: String
  mariaDbRef: mariadbBackupSpecMariaDbRef!
  nodeSelector: JSONObject
  resources: mariadbBackupSpecResources
  restartPolicy: String
  tolerations: [mariadbBackupSpecTolerationsItem]
  volume: mariadbBackupSpecStorageVolume
}
type mariadbRestore {
  metadata: metadata
  affinity: mariadbBackupAffinity
  backoffLimit: Int
  backupRef: mariadbBackupStorageVolumeCephfsSecretRef
  fileName: String
  mariaDbRef: mariadbBackupMariaDbRef!
  nodeSelector: JSONObject
  resources: mariadbBackupResources
  restartPolicy: String
  tolerations: [mariadbBackupTolerationsItem]
  volume: mariadbBackupStorageVolume
  status: mariadbRestoreStatus
}
type mariadbSqlJobStatus {
  conditions: [mariadbBackupStatusConditionsItem]
}
input mariadbSqlJobSpec {
  affinity: mariadbBackupSpecAffinity
  backoffLimit: Int
  database: String
  dependsOn: [mariadbBackupSpecStorageVolumeCephfsSecretRef]
  mariaDbRef: mariadbBackupSpecMariaDbRef!
  nodeSelector: JSONObject
  passwordSecretKeyRef: mariadbConnectionSpecPasswordSecretKeyRef!
  resources: mariadbBackupSpecResources
  restartPolicy: String
  schedule: mariadbBackupSpecSchedule
  sql: String
  sqlConfigMapKeyRef: mariadbMariaDBSpecEnvItemValueFromConfigMapKeyRef
  tolerations: [mariadbBackupSpecTolerationsItem]
  username: String!
}
type mariadbSqlJob {
  metadata: metadata
  affinity: mariadbBackupAffinity
  backoffLimit: Int
  database: String
  dependsOn: [mariadbBackupStorageVolumeCephfsSecretRef]
  mariaDbRef: mariadbBackupMariaDbRef!
  nodeSelector: JSONObject
  passwordSecretKeyRef: mariadbConnectionPasswordSecretKeyRef!
  resources: mariadbBackupResources
  restartPolicy: String
  schedule: mariadbBackupSchedule
  sql: String
  sqlConfigMapKeyRef: mariadbMariaDBEnvItemValueFromConfigMapKeyRef
  tolerations: [mariadbBackupTolerationsItem]
  username: String!
  status: mariadbSqlJobStatus
}
type mariadbUserStatus {
  conditions: [mariadbBackupStatusConditionsItem]
}
input mariadbUserSpec {
  host: String
  mariaDbRef: mariadbBackupSpecMariaDbRef!
  maxUserConnections: Int
  name: String
  passwordSecretKeyRef: mariadbConnectionSpecPasswordSecretKeyRef!
  retryInterval: String
}
type mariadbUser {
  metadata: metadata
  host: String
  mariaDbRef: mariadbBackupMariaDbRef!
  maxUserConnections: Int
  name: String
  passwordSecretKeyRef: mariadbConnectionPasswordSecretKeyRef!
  retryInterval: String
  status: mariadbUserStatus
}
type Query {
  mariadbBackup(namespace: String!, name: String!): mariadbBackup
  mariadbConnection(namespace: String!, name: String!): mariadbConnection
  mariadbDatabase(namespace: String!, name: String!): mariadbDatabase
  mariadbGrant(namespace: String!, name: String!): mariadbGrant
  mariadbMariaDB(namespace: String!, name: String!): mariadbMariaDB
  mariadbRestore(namespace: String!, name: String!): mariadbRestore
  mariadbSqlJob(namespace: String!, name: String!): mariadbSqlJob
  mariadbUser(namespace: String!, name: String!): mariadbUser
}
type Mutation {
  createMariadbBackup(namespace: String!, name: String!, spec: mariadbBackupSpec!): mariadbBackup
  patchMariadbBackup(namespace: String!, name: String!, spec: mariadbBackupSpec!): mariadbBackup
  deleteMariadbBackup(namespace: String!, name: String!): mariadbBackup
  createMariadbConnection(namespace: String!, name: String!, spec: mariadbConnectionSpec!): mariadbConnection
  patchMariadbConnection(namespace: String!, name: String!, spec: mariadbConnectionSpec!): mariadbConnection
  deleteMariadbConnection(namespace: String!, name: String!): mariadbConnection
  createMariadbDatabase(namespace: String!, name: String!, spec: mariadbDatabaseSpec!): mariadbDatabase
  patchMariadbDatabase(namespace: String!, name: String!, spec: mariadbDatabaseSpec!): mariadbDatabase
  deleteMariadbDatabase(namespace: String!, name: String!): mariadbDatabase
  createMariadbGrant(namespace: String!, name: String!, spec: mariadbGrantSpec!): mariadbGrant
  patchMariadbGrant(namespace: String!, name: String!, spec: mariadbGrantSpec!): mariadbGrant
  deleteMariadbGrant(namespace: String!, name: String!): mariadbGrant
  createMariadbMariaDB(namespace: String!, name: String!, spec: mariadbMariaDBSpec!): mariadbMariaDB
  patchMariadbMariaDB(namespace: String!, name: String!, spec: mariadbMariaDBSpec!): mariadbMariaDB
  deleteMariadbMariaDB(namespace: String!, name: String!): mariadbMariaDB
  createMariadbRestore(namespace: String!, name: String!, spec: mariadbRestoreSpec!): mariadbRestore
  patchMariadbRestore(namespace: String!, name: String!, spec: mariadbRestoreSpec!): mariadbRestore
  deleteMariadbRestore(namespace: String!, name: String!): mariadbRestore
  createMariadbSqlJob(namespace: String!, name: String!, spec: mariadbSqlJobSpec!): mariadbSqlJob
  patchMariadbSqlJob(namespace: String!, name: String!, spec: mariadbSqlJobSpec!): mariadbSqlJob
  deleteMariadbSqlJob(namespace: String!, name: String!): mariadbSqlJob
  createMariadbUser(namespace: String!, name: String!, spec: mariadbUserSpec!): mariadbUser
  patchMariadbUser(namespace: String!, name: String!, spec: mariadbUserSpec!): mariadbUser
  deleteMariadbUser(namespace: String!, name: String!): mariadbUser
}