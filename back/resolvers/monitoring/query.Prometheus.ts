import {kc, k8s, getMetadata} from '../core/libs.js';
import { MonitoringPrometheusList, MonitoringPrometheus } from './type.Prometheus.js';
const customApi = kc.makeApiClient(k8s.CustomObjectsApi);
export const lists = {
    monitoringPrometheuss: async (_parent, args: object) => {
        try {
            const res = await customApi.listNamespacedCustomObject('monitoring.coreos.com','v1',args['namespace'],'prometheuses')
            const resList = res.body as MonitoringPrometheusList
            return resList.items.map((ext)=>{return{
                metadata: getMetadata(ext.metadata),
                additionalAlertManagerConfigs: ext.spec.additionalAlertManagerConfigs,
                additionalAlertRelabelConfigs: ext.spec.additionalAlertRelabelConfigs,
                additionalArgs: ext.spec.additionalArgs,
                additionalScrapeConfigs: ext.spec.additionalScrapeConfigs,
                affinity: ext.spec.affinity,
                alerting: ext.spec.alerting,
                allowOverlappingBlocks: ext.spec.allowOverlappingBlocks,
                apiserverConfig: ext.spec.apiserverConfig,
                arbitraryFSAccessThroughSMs: ext.spec.arbitraryFSAccessThroughSMs,
                baseImage: ext.spec.baseImage,
                configMaps: ext.spec.configMaps,
                containers: ext.spec.containers,
                disableCompaction: ext.spec.disableCompaction,
                enableAdminAPI: ext.spec.enableAdminAPI,
                enableFeatures: ext.spec.enableFeatures,
                enableRemoteWriteReceiver: ext.spec.enableRemoteWriteReceiver,
                enforcedBodySizeLimit: ext.spec.enforcedBodySizeLimit,
                enforcedLabelLimit: ext.spec.enforcedLabelLimit,
                enforcedLabelNameLengthLimit: ext.spec.enforcedLabelNameLengthLimit,
                enforcedLabelValueLengthLimit: ext.spec.enforcedLabelValueLengthLimit,
                enforcedNamespaceLabel: ext.spec.enforcedNamespaceLabel,
                enforcedSampleLimit: ext.spec.enforcedSampleLimit,
                enforcedTargetLimit: ext.spec.enforcedTargetLimit,
                evaluationInterval: ext.spec.evaluationInterval,
                excludedFromEnforcement: ext.spec.excludedFromEnforcement,
                exemplars: ext.spec.exemplars,
                externalLabels: ext.spec.externalLabels,
                externalUrl: ext.spec.externalUrl,
                hostAliases: ext.spec.hostAliases,
                hostNetwork: ext.spec.hostNetwork,
                ignoreNamespaceSelectors: ext.spec.ignoreNamespaceSelectors,
                image: ext.spec.image,
                imagePullPolicy: ext.spec.imagePullPolicy,
                imagePullSecrets: ext.spec.imagePullSecrets,
                initContainers: ext.spec.initContainers,
                listenLocal: ext.spec.listenLocal,
                logFormat: ext.spec.logFormat,
                logLevel: ext.spec.logLevel,
                minReadySeconds: ext.spec.minReadySeconds,
                nodeSelector: ext.spec.nodeSelector,
                overrideHonorLabels: ext.spec.overrideHonorLabels,
                overrideHonorTimestamps: ext.spec.overrideHonorTimestamps,
                paused: ext.spec.paused,
                podMetadata: ext.spec.podMetadata,
                podMonitorNamespaceSelector: ext.spec.podMonitorNamespaceSelector,
                podMonitorSelector: ext.spec.podMonitorSelector,
                podTargetLabels: ext.spec.podTargetLabels,
                portName: ext.spec.portName,
                priorityClassName: ext.spec.priorityClassName,
                probeNamespaceSelector: ext.spec.probeNamespaceSelector,
                probeSelector: ext.spec.probeSelector,
                prometheusExternalLabelName: ext.spec.prometheusExternalLabelName,
                prometheusRulesExcludedFromEnforce: ext.spec.prometheusRulesExcludedFromEnforce,
                query: ext.spec.query,
                queryLogFile: ext.spec.queryLogFile,
                remoteRead: ext.spec.remoteRead,
                remoteWrite: ext.spec.remoteWrite,
                replicaExternalLabelName: ext.spec.replicaExternalLabelName,
                replicas: ext.spec.replicas,
                resources: ext.spec.resources,
                retention: ext.spec.retention,
                retentionSize: ext.spec.retentionSize,
                routePrefix: ext.spec.routePrefix,
                ruleNamespaceSelector: ext.spec.ruleNamespaceSelector,
                ruleSelector: ext.spec.ruleSelector,
                rules: ext.spec.rules,
                scrapeConfigNamespaceSelector: ext.spec.scrapeConfigNamespaceSelector,
                scrapeConfigSelector: ext.spec.scrapeConfigSelector,
                scrapeInterval: ext.spec.scrapeInterval,
                scrapeTimeout: ext.spec.scrapeTimeout,
                secrets: ext.spec.secrets,
                securityContext: ext.spec.securityContext,
                serviceAccountName: ext.spec.serviceAccountName,
                serviceMonitorNamespaceSelector: ext.spec.serviceMonitorNamespaceSelector,
                serviceMonitorSelector: ext.spec.serviceMonitorSelector,
                sha: ext.spec.sha,
                shards: ext.spec.shards,
                storage: ext.spec.storage,
                tag: ext.spec.tag,
                thanos: ext.spec.thanos,
                tolerations: ext.spec.tolerations,
                topologySpreadConstraints: ext.spec.topologySpreadConstraints,
                tsdb: ext.spec.tsdb,
                version: ext.spec.version,
                volumeMounts: ext.spec.volumeMounts,
                volumes: ext.spec.volumes,
                walCompression: ext.spec.walCompression,
                web: ext.spec.web,
                status: ext.status==undefined?null:{
                    availableReplicas: ext.status.availableReplicas,
                    conditions: ext.status.conditions,
                    paused: ext.status.paused,
                    replicas: ext.status.replicas,
                    shardStatuses: ext.status.shardStatuses,
                    unavailableReplicas: ext.status.unavailableReplicas,
                    updatedReplicas: ext.status.updatedReplicas,
                }
            }})
        } catch (err) {
          console.error((err as object)['body']);
        }
        return []
    }
};
export const queries = {
    monitoringPrometheus: async (_parent, args: object) => {
        try {
            const res = await customApi.getNamespacedCustomObject('monitoring.coreos.com','v1',args['namespace'],'prometheuses', args['name'])
            const ext = res.body as MonitoringPrometheus
            return {
                metadata: getMetadata(ext.metadata),
                additionalAlertManagerConfigs: ext.spec.additionalAlertManagerConfigs,
                additionalAlertRelabelConfigs: ext.spec.additionalAlertRelabelConfigs,
                additionalArgs: ext.spec.additionalArgs,
                additionalScrapeConfigs: ext.spec.additionalScrapeConfigs,
                affinity: ext.spec.affinity,
                alerting: ext.spec.alerting,
                allowOverlappingBlocks: ext.spec.allowOverlappingBlocks,
                apiserverConfig: ext.spec.apiserverConfig,
                arbitraryFSAccessThroughSMs: ext.spec.arbitraryFSAccessThroughSMs,
                baseImage: ext.spec.baseImage,
                configMaps: ext.spec.configMaps,
                containers: ext.spec.containers,
                disableCompaction: ext.spec.disableCompaction,
                enableAdminAPI: ext.spec.enableAdminAPI,
                enableFeatures: ext.spec.enableFeatures,
                enableRemoteWriteReceiver: ext.spec.enableRemoteWriteReceiver,
                enforcedBodySizeLimit: ext.spec.enforcedBodySizeLimit,
                enforcedLabelLimit: ext.spec.enforcedLabelLimit,
                enforcedLabelNameLengthLimit: ext.spec.enforcedLabelNameLengthLimit,
                enforcedLabelValueLengthLimit: ext.spec.enforcedLabelValueLengthLimit,
                enforcedNamespaceLabel: ext.spec.enforcedNamespaceLabel,
                enforcedSampleLimit: ext.spec.enforcedSampleLimit,
                enforcedTargetLimit: ext.spec.enforcedTargetLimit,
                evaluationInterval: ext.spec.evaluationInterval,
                excludedFromEnforcement: ext.spec.excludedFromEnforcement,
                exemplars: ext.spec.exemplars,
                externalLabels: ext.spec.externalLabels,
                externalUrl: ext.spec.externalUrl,
                hostAliases: ext.spec.hostAliases,
                hostNetwork: ext.spec.hostNetwork,
                ignoreNamespaceSelectors: ext.spec.ignoreNamespaceSelectors,
                image: ext.spec.image,
                imagePullPolicy: ext.spec.imagePullPolicy,
                imagePullSecrets: ext.spec.imagePullSecrets,
                initContainers: ext.spec.initContainers,
                listenLocal: ext.spec.listenLocal,
                logFormat: ext.spec.logFormat,
                logLevel: ext.spec.logLevel,
                minReadySeconds: ext.spec.minReadySeconds,
                nodeSelector: ext.spec.nodeSelector,
                overrideHonorLabels: ext.spec.overrideHonorLabels,
                overrideHonorTimestamps: ext.spec.overrideHonorTimestamps,
                paused: ext.spec.paused,
                podMetadata: ext.spec.podMetadata,
                podMonitorNamespaceSelector: ext.spec.podMonitorNamespaceSelector,
                podMonitorSelector: ext.spec.podMonitorSelector,
                podTargetLabels: ext.spec.podTargetLabels,
                portName: ext.spec.portName,
                priorityClassName: ext.spec.priorityClassName,
                probeNamespaceSelector: ext.spec.probeNamespaceSelector,
                probeSelector: ext.spec.probeSelector,
                prometheusExternalLabelName: ext.spec.prometheusExternalLabelName,
                prometheusRulesExcludedFromEnforce: ext.spec.prometheusRulesExcludedFromEnforce,
                query: ext.spec.query,
                queryLogFile: ext.spec.queryLogFile,
                remoteRead: ext.spec.remoteRead,
                remoteWrite: ext.spec.remoteWrite,
                replicaExternalLabelName: ext.spec.replicaExternalLabelName,
                replicas: ext.spec.replicas,
                resources: ext.spec.resources,
                retention: ext.spec.retention,
                retentionSize: ext.spec.retentionSize,
                routePrefix: ext.spec.routePrefix,
                ruleNamespaceSelector: ext.spec.ruleNamespaceSelector,
                ruleSelector: ext.spec.ruleSelector,
                rules: ext.spec.rules,
                scrapeConfigNamespaceSelector: ext.spec.scrapeConfigNamespaceSelector,
                scrapeConfigSelector: ext.spec.scrapeConfigSelector,
                scrapeInterval: ext.spec.scrapeInterval,
                scrapeTimeout: ext.spec.scrapeTimeout,
                secrets: ext.spec.secrets,
                securityContext: ext.spec.securityContext,
                serviceAccountName: ext.spec.serviceAccountName,
                serviceMonitorNamespaceSelector: ext.spec.serviceMonitorNamespaceSelector,
                serviceMonitorSelector: ext.spec.serviceMonitorSelector,
                sha: ext.spec.sha,
                shards: ext.spec.shards,
                storage: ext.spec.storage,
                tag: ext.spec.tag,
                thanos: ext.spec.thanos,
                tolerations: ext.spec.tolerations,
                topologySpreadConstraints: ext.spec.topologySpreadConstraints,
                tsdb: ext.spec.tsdb,
                version: ext.spec.version,
                volumeMounts: ext.spec.volumeMounts,
                volumes: ext.spec.volumes,
                walCompression: ext.spec.walCompression,
                web: ext.spec.web,
                status: ext.status==undefined?null:{
                    availableReplicas: ext.status.availableReplicas,
                    conditions: ext.status.conditions,
                    paused: ext.status.paused,
                    replicas: ext.status.replicas,
                    shardStatuses: ext.status.shardStatuses,
                    unavailableReplicas: ext.status.unavailableReplicas,
                    updatedReplicas: ext.status.updatedReplicas,
                }
            }
        } catch (err) {
            console.error((err as object)['body']);
        }
        return null
    },
};
