        {{type}}{{targetGroup}}{{targetShort}}: async (parent, args: object) => {
          try{
{{#if (eq type 'parent')}}
            if (parent.metadata['ownerReferences']==null || parent.metadata['ownerReferences']==undefined || parent.metadata['ownerReferences'].filter(r=>r.kind=='{{targetShort}}').length<1) return null;
            const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
                .filter(o=>parent.metadata['ownerReferences'].filter(r=>r.kind=='{{targetShort}}'&&r.name==o['metadata']['name']).length>0)
            if (lst.length>0) return lst[0];
{{/if}}
{{#if (eq type 'child')}}
            const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
            return lst.filter(r=>
                r.metadata['ownerReferences']!=null && r.metadata['ownerReferences']!=undefined &&
                r.metadata['ownerReferences'].filter(r=>r.kind=='{{short}}' && r.name == parent['metadata']['name']).length>0
            )
{{/if}}
{{#if (eq type 'equity')}}
            const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
                .filter(r=>
                    r.metadata['ownerReferences']!=null && r.metadata['ownerReferences']!=undefined &&
                    r.metadata['ownerReferences'].filter(r=>r.kind=='{{short}}' && r.name == parent['metadata']['name']).length>0
            );
            if (lst.length>0) return lst[0];
{{/if}}
          } catch (err) {
            console.error(err)
          }
          return null
        },
