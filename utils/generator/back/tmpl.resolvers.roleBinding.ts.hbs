        {{type}}{{targetGroup}}{{targetShort}}: async (parent, args: object) => {
          try {
{{#if (eq type 'users')}}
            if (parent['subjects']==null) return null;
            const ret = (await Promise.all(parent['subjects'].filter(s=>s['kind']=='{{targetShort}}').map(s=>s['namespace']).filter((v,i,a)=>a.indexOf(v) === i).map(async (ns)=>{
                const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent, {namespace: ns, ...args})
                const subs = parent['subjects'].filter(s=>s['kind']=='{{targetShort}}' && s['namespace']==ns).map(s=>s['name'])
                return lst.filter(r=>subs.includes(r['metadata']['name']))
            }))).flat().filter((v)=>v!=null)
            if(ret.length>0) return ret;
{{/if}}
{{#if (eq type 'use')}}
    {{#if (startWith targetShort 'Cluster')}}
            const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent, args)
            return lst.filter(r=>Array.isArray(r['subjects'])&&r['subjects'].filter(s=>s['kind']=='{{short}}'&&s['name']==parent['metadata']['name'] && s['namespace']==parent['metadata']['namespace']).length>0)
    {{else}}
            const nss = await listNamespace.k8sNamespace(parent, args)
            return (await Promise.all(nss.map(n=>n['metadata']['name']).map(async (ns)=>{
                const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent, {namespace: ns, ...args})
                return lst.filter(r=>r['subjects']!=null&&r['subjects'].filter(s=>s['kind']=='{{short}}'&&s['name']==parent['metadata']['name'] && s['namespace']==parent['metadata']['namespace']).length>0)
            }))).flat().filter((v)=>v!=null)
    {{/if}}
{{/if}}
          } catch (err) {
            console.error(err)
          }
          return null
        },
