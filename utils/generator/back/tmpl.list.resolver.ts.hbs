{{#with ctx}}
    {{group}}{{short}}: async (_parent, args: object) => {
  {{#if namespaced}}
        let lst:Array<object>|undefined = cache.get(`{{short}}.${args['namespace']}`)
  {{else}}
        let lst:Array<object>|undefined = cache.get('{{short}}')
  {{/if}}
        if (lst==undefined) {
            try {
{{#if (defined crd)}}
  {{#if namespaced}}
                const res = await k8sApi.listNamespacedCustomObject('{{apiGroup}}','{{apiVersion}}',args['namespace'],'{{crd.status.acceptedNames.plural}}')
  {{else}}
                const res = await k8sApi.listClusterCustomObject('{{apiGroup}}','{{apiVersion}}','{{crd.status.acceptedNames.plural}}')
  {{/if}}
{{else}}
  {{#if namespaced}}
                const res = await k8sApi.listNamespaced{{ short }}(args['namespace'])
  {{else}}
                const res = await k8sApi.list{{ short }}()
  {{/if}}
{{/if}}
                lst = (res as object)['body']['items'] as Array<object>
  {{#if namespaced}}
                cache.set(`{{short}}.${args['namespace']}`, lst, 2);
  {{else}}
                cache.set('{{short}}', lst, 2);
  {{/if}}
            } catch (err) {
                console.error((err as object)['body']);
                return []
            }
        }
        return lst.filter(o=>applyFilter(o,args)).map(o=>applyFieldSelection(o,args))
    }
{{/with}}