{{#if (and (eq type 'use') (defined path))}}
        {{type}}{{targetShort}}: async (parent, args: object) => {
            const spec = getByPath(parent, '{{path}}');
            const secrets = spec['containers']
                            .filter(c=>Array.isArray(c['env'])&&c['env'].filter(e=>e['valueFrom']!=undefined&&e['valueFrom']['secretKeyRef']!=undefined).length>0)
                            .map(c=>c['env']
                                .filter(e=>e['valueFrom']!=undefined&&e['valueFrom']['secretKeyRef']!=undefined)
                                .map(e=>e['valueFrom']['secretKeyRef']['name'])
                            ).flat()
                        .concat(spec['containers']
                            .filter(c=>Array.isArray(c['envFrom'])&&c['envFrom'].filter(e=>e['secretRef']!=undefined).length>0)
                            .map(c=>c['envFrom']
                                .filter(e=>e['secretRef']!=undefined)
                                .map(e=>e['secretRef']['name'])
                            ).flat())
                        .concat(Array.isArray(spec['volumes'])?spec['volumes'].filter(v=>v['secret']!=undefined).map(v=>v['secret']['secretName']):[])
            if (secrets.length<1) return null;
            const lst = await list{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
            return lst.filter(s=>secrets.includes(s['metadata']['name']))
        },
{{/if}}
{{#if (and (eq type 'usedBy') (defined path))}}
        {{type}}{{targetShort}}: async (parent, args: object) => {
            const lst = await list{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
            return lst.filter(w=>{
                const spec = getByPath(w, '{{path}}');
                return spec['containers'].filter(c=>Array.isArray(c['env'])&&c['env'].filter(e=>e['valueFrom']!=undefined&&e['valueFrom']['secretKeyRef']!=undefined && e['valueFrom']['secretKeyRef']==parent['metadata']['name']).length>0).length>0 ||
                        spec['containers'].filter(c=>Array.isArray(c['envFrom'])&&c['envFrom'].filter(e=>e['secretRef']!=undefined && e['secretRef']['name']==parent['metadata']['name']).length>0).length>0 ||
                        (Array.isArray(spec['volumes']) &&
                            spec['volumes'].filter(v=>
                                v['secret']!=undefined &&
                                v['secret']['secretName']==parent['metadata']['name']
                            ).length>0)
            })
        },
{{/if}}