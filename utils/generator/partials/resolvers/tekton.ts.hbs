    {{type}}{{targetGroup}}{{targetShort}}: async (parent, args: object) => {
      try{
{{#if (and (eq type 'parent') (and (ne targetShort 'Trigger') (ne targetShort 'EventListener')))}}
        if (parent.metadata['ownerReferences']==null || parent.metadata['ownerReferences']==undefined || parent.metadata['ownerReferences'].filter(r=>r.kind=='{{targetShort}}').length<1) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(o=>parent.metadata['ownerReferences'].filter(r=>r.kind=='{{targetShort}}'&&r.name==o['metadata']['name']).length>0)
        if (lst.length>0) return lst[0];
{{/if}}
{{#if (and (eq type 'child') (and (ne short 'Trigger') (ne targetShort 'TaskRun'))) }}
        const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
        return lst.filter(r=>
            r.metadata['ownerReferences']!=null && r.metadata['ownerReferences']!=undefined &&
            r.metadata['ownerReferences'].filter(r=>r.kind=='{{short}}' && r.name == parent['metadata']['name']).length>0
        )
{{/if}}
{{#if (and (eq type 'child') (and (ne short 'Trigger') (eq targetShort 'TaskRun'))) }}
        if (parent['status'] == null || !Array.isArray(parent['status']['childReferences']) || parent['status']['childReferences'].filter(r=>r.kind=='{{targetShort}}').length<1) return null;

        const tasks = parent['status']['childReferences'].filter(r=>r.kind=='{{targetShort}}').map(r=>r['name'])
        const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
        return lst.filter(r=> tasks.includes(r.metadata['name']))
{{/if}}
{{#if (and (eq type 'consume') (eq targetShort 'EventListener'))}}
  {{#if (eq short 'TaskRun')}}
        if (parent.metadata['ownerReferences']!=null && parent.metadata['ownerReferences']!=undefined && parent.metadata['ownerReferences'].filter(r=>r.kind=='PipelineRun').length>0) return null;
  {{/if}}
        if (parent.metadata['labels']==undefined || parent.metadata['labels']['triggers.tekton.dev/eventlistener']==undefined) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(o=>o['metadata'] != undefined && o['metadata']['name'] == parent.metadata['labels']['triggers.tekton.dev/eventlistener'])
        if (lst.length>0) return lst[0];
{{/if}}
{{#if (and (eq type 'provide') (eq short 'EventListener')) }}
        const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
        return lst.filter(r=>r['metadata']!=undefined && r['metadata']['labels']!=undefined && r['metadata']['labels']['triggers.tekton.dev/eventlistener'] == parent['metadata']['name'] && (r.metadata['ownerReferences']==null || !Array.isArray(r.metadata['ownerReferences']) || r.metadata['ownerReferences'].filter(r=>r.kind=='PipelineRun').length<1)
        )
{{/if}}
{{#if (and (eq type 'parent') (eq targetShort 'Trigger'))}}
  {{#if (eq short 'TaskRun')}}
        if (parent.metadata['ownerReferences']!=null && parent.metadata['ownerReferences']!=undefined && parent.metadata['ownerReferences'].filter(r=>r.kind=='PipelineRun').length>0) return null;
  {{/if}}
        if (parent.metadata['labels']==undefined || parent.metadata['labels']['triggers.tekton.dev/trigger']==undefined) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(o=>o['metadata'] != undefined && o['metadata']['name'] == parent.metadata['labels']['triggers.tekton.dev/trigger'])
        if (lst.length>0) return lst[0];
{{/if}}
{{#if (and (eq type 'child') (eq short 'Trigger')) }}
        const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
        return lst.filter(r=>r['metadata']!=undefined && r['metadata']['labels']!=undefined && r['metadata']['labels']['triggers.tekton.dev/trigger'] == parent['metadata']['name'] && (r.metadata['ownerReferences']==null || r.metadata['ownerReferences']==undefined || r.metadata['ownerReferences'].filter(r=>r.kind=='PipelineRun').length<1)
        )
{{/if}}
{{#if (and (eq type 'consume') (and (eq targetShort 'Pipeline') (eq short 'PipelineRun')))}}
        if (parent['spec'] == undefined || parent['spec']['pipelineRef'] == undefined || parent['spec']['pipelineRef']['name'] == undefined) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(o=>o['metadata']['name'] == parent['spec']['pipelineRef']['name'])
        if (lst.length>0) return lst[0];
{{/if}}
{{#if (and (eq type 'provide') (and (eq targetShort 'PipelineRun') (eq short 'Pipeline')))}}
        const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
        return lst.filter(run=>run['spec'] != undefined && run['spec']['pipelineRef'] != undefined && run['spec']['pipelineRef']['name'] == parent['metadata']['name'])
{{/if}}
{{#if (and (eq type 'consume') (and (eq targetShort 'Task') (eq short 'TaskRun')))}}
        if (parent['spec'] == undefined || parent['spec']['taskRef'] == undefined || parent['spec']['taskRef']['name'] == undefined) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(o=>o['metadata']['name'] == parent['spec']['taskRef']['name'])
        if (lst.length>0) return lst[0];
{{/if}}
{{#if (and (eq type 'provide') (and (eq targetShort 'TaskRun') (eq short 'Task')))}}
        const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
        return lst.filter(run=>run['spec'] != undefined && run['spec']['taskRef'] != undefined && run['spec']['taskRef']['name'] == parent['metadata']['name'])
{{/if}}
{{#if (and (eq type 'users') (and (eq targetShort 'Pipeline') (eq short 'Task')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(o=>o['spec'] != undefined && Array.isArray(o['spec']['tasks']) && o['spec']['tasks'].filter(t=>t['taskRef']!=undefined && t['taskRef']['kind'] == '{{short}}' && t['taskRef']['name'] == parent['metadata']['name']).length>0)
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'Task') (eq short 'Pipeline')))}}
        if (parent['spec'] == undefined || !Array.isArray(parent['spec']['tasks']) || parent['spec']['tasks'].filter(t=>t['taskRef']!=undefined && t['taskRef']['kind'] == '{{targetShort}}').length<1) return null;
        const tasks = parent['spec']['tasks'].filter(t=>t['taskRef']!=undefined && t['taskRef']['kind'] == '{{targetShort}}').map(t=>t['taskRef']['name'])
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(o=>tasks.includes(o['metadata']['name']))
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'users') (and (eq targetShort 'EventListener') (eq short 'Trigger')))}}
        if (parent['metadata'] == undefined ||parent['metadata']['labels'] == undefined) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(el=>{
                if (el['spec'] == undefined || !Array.isArray(el['spec']['triggerGroups']) || el['spec']['triggerGroups'].filter(t=>t['triggerSelector']!=undefined && t['triggerSelector']['labelSelector']!=undefined && t['triggerSelector']['labelSelector']['matchLabels']!=undefined).length<1) return null;
                const labelGroups = el['spec']['triggerGroups'].filter(t=>t['triggerSelector']!=undefined && t['triggerSelector']['labelSelector']!=undefined && t['triggerSelector']['labelSelector']['matchLabels']!=undefined).map(t=>t['triggerSelector']['labelSelector']['matchLabels'])
                return labelGroups.reduce((acc,labels)=>{
                    if (acc) return acc;
                    return  Object.entries(labels).length == Object.entries(parent.metadata['labels']).reduce((acc,[name, value]) =>acc+Object.entries(labels).reduce(
                            (inAcc,[inName,inValue]) => inAcc+((name==inName&&value==inValue)?1:0)
                        ,0),0)
                },false)
            })
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'Trigger') (eq short 'EventListener')))}}
        if (parent['spec'] == undefined || !Array.isArray(parent['spec']['triggerGroups']) || parent['spec']['triggerGroups'].filter(t=>t['triggerSelector']!=undefined && t['triggerSelector']['labelSelector']!=undefined && t['triggerSelector']['labelSelector']['matchLabels']!=undefined).length<1) return null;
        const labelGroups = parent['spec']['triggerGroups'].filter(t=>t['triggerSelector']!=undefined && t['triggerSelector']['labelSelector']!=undefined && t['triggerSelector']['labelSelector']['matchLabels']!=undefined).map(t=>t['triggerSelector']['labelSelector']['matchLabels'])
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(trg=>{
                if (trg.metadata == undefined || trg.metadata['labels'] == undefined) return false;
                return labelGroups.reduce((acc,labels)=>{
                    if (acc) return acc;
                    return  Object.entries(labels).length == Object.entries(trg.metadata['labels']).reduce((acc,[name, value]) =>acc+Object.entries(labels).reduce(
                            (inAcc,[inName,inValue]) => inAcc+((name==inName&&value==inValue)?1:0)
                        ,0),0)
                },false)
            })
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'users') (and (or (eq targetShort 'TaskRun') (eq targetShort 'PipelineRun')) (eq short 'PersistentVolumeClaim')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(run=>run['spec'] != undefined && Array.isArray(run['spec']['workspaces']) && run['spec']['workspaces'].filter(w=>w['persistentVolumeClaim']!=undefined && w['persistentVolumeClaim']['claimName']==parent['metadata']['name']).length>0)
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'PersistentVolumeClaim') (or (eq short 'TaskRun') (eq short 'PipelineRun'))))}}
        if (parent['spec'] == undefined || !Array.isArray(parent['spec']['workspaces']) || parent['spec']['workspaces'].filter(w=>w['persistentVolumeClaim']!=undefined && w['persistentVolumeClaim']['claimName']!=undefined).length<1) return null;
        const claims = parent['spec']['workspaces'].filter(w=>w['persistentVolumeClaim']!=undefined && w['persistentVolumeClaim']['claimName']!=undefined).map(w=>w['persistentVolumeClaim']['claimName'])
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(pvc=>claims.includes(pvc['metadata']['name']))
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'users') (and (or (eq targetShort 'TaskRun') (eq targetShort 'PipelineRun')) (eq short 'Secret')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(run=>run['spec'] != undefined && Array.isArray(run['spec']['workspaces']) && run['spec']['workspaces'].filter(w=>w['secret']!=undefined && w['secret']['secretName']==parent['metadata']['name']).length>0)
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'Secret') (or (eq short 'TaskRun') (eq short 'PipelineRun'))))}}
        if (parent['spec'] == undefined || !Array.isArray(parent['spec']['workspaces']) || parent['spec']['workspaces'].filter(w=>w['secret']!=undefined && w['secret']['secretName']!=undefined).length<1) return null;
        const claims = parent['spec']['workspaces'].filter(w=>w['secret']!=undefined && w['secret']['secretName']!=undefined).map(w=>w['secret']['secretName'])
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(pvc=>claims.includes(pvc['metadata']['name']))
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'users') (and (eq targetShort 'PipelineRun') (eq short 'ConfigMap')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(run=>run['spec'] != undefined && Array.isArray(run['spec']['workspaces']) && run['spec']['workspaces'].filter(w=>w['configMap']!=undefined && w['configMap']['name']==parent['metadata']['name']).length>0)
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'ConfigMap') (eq short 'PipelineRun')))}}
        if (parent['spec'] == undefined || !Array.isArray(parent['spec']['workspaces']) || parent['spec']['workspaces'].filter(w=>w['configMap']!=undefined && w['configMap']['name']!=undefined).length<1) return null;
        const claims = parent['spec']['workspaces'].filter(w=>w['configMap']!=undefined && w['configMap']['name']!=undefined).map(w=>w['configMap']['name'])
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(pvc=>claims.includes(pvc['metadata']['name']))
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'users') (and (eq targetShort 'TaskRun') (eq short 'ConfigMap')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(run=>(run['spec'] != undefined && Array.isArray(run['spec']['workspaces']) && run['spec']['workspaces'].filter(w=>w['configMap']!=undefined && w['configMap']['name']==parent['metadata']['name']).length>0) || (run['status'] != undefined && run['status']['taskSpec'] != undefined && Array.isArray(run['status']['taskSpec']['volumes']) && run['status']['taskSpec']['volumes'].filter(w=>w['configMap']!=undefined && w['configMap']['name']==parent['metadata']['name']).length>0))
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'ConfigMap') (eq short 'TaskRun')))}}
        if (parent['spec'] == undefined || (!Array.isArray(parent['spec']['workspaces']) || parent['spec']['workspaces'].filter(w=>w['configMap']!=undefined && w['configMap']['name']!=undefined).length<1) && (parent['status'] == undefined || parent['status']['taskSpec'] == undefined || !Array.isArray(parent['status']['taskSpec']['volumes']) || parent['status']['taskSpec']['volumes'].filter(w=>w['configMap']!=undefined && w['configMap']['name']!=undefined).length<1) ) return null;
        const claims = parent['spec']['workspaces'].filter(w=>w['configMap']!=undefined && w['configMap']['name']!=undefined).map(w=>w['configMap']['name'])
                .concat((parent['status'] != undefined && parent['status']['taskSpec'] != undefined && Array.isArray(parent['status']['taskSpec']['volumes']))?parent['status']['taskSpec']['volumes'].filter(w=>w['configMap']!=undefined && w['configMap']['name']!=undefined).map(w=>w['configMap']['name']):[])
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(pvc=>claims.includes(pvc['metadata']['name']))
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'users') (and (eq targetShort 'Task') (eq short 'ConfigMap')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(run=>run['spec'] != undefined && Array.isArray(run['spec']['volumes']) && run['spec']['volumes'].filter(w=>w['configMap']!=undefined && w['configMap']['name']==parent['metadata']['name']).length>0)
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'ConfigMap') (eq short 'Task')))}}
        if (parent['spec'] == undefined || !Array.isArray(parent['spec']['volumes']) || parent['spec']['volumes'].filter(w=>w['configMap']!=undefined && w['configMap']['name']!=undefined).length<1) return null;
        const claims = parent['spec']['volumes'].filter(w=>w['configMap']!=undefined && w['configMap']['name']!=undefined).map(w=>w['configMap']['name'])
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(pvc=>claims.includes(pvc['metadata']['name']))
        if (lst.length>0) return lst;
{{/if}}
      } catch (err) {
        log.error(err)
      }
      return null
    },
