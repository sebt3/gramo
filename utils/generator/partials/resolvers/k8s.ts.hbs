    {{type}}{{targetGroup}}{{targetShort}}: async (parent, args: object) => {
      try{
{{#if (eq type 'parent')}}
        if (parent.metadata['ownerReferences']==null || parent.metadata['ownerReferences']==undefined || parent.metadata['ownerReferences'].filter(r=>r.kind=='{{targetShort}}').length<1) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(o=>parent.metadata['ownerReferences'].filter(r=>r.kind=='{{targetShort}}'&&r.name==o['metadata']['name']).length>0)
        if (lst.length>0) return lst[0];
{{/if}}
{{#if (and (eq type 'child') (and (ne targetGroup 'core') (ne short 'Node'))) }}
        const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args})
        return lst.filter(r=>
            r.metadata['ownerReferences']!=null && r.metadata['ownerReferences']!=undefined &&
            r.metadata['ownerReferences'].filter(r=>r.kind=='{{short}}' && r.name == parent['metadata']['name']).length>0
        )
{{/if}}
{{#if (and (eq type 'child') (and (eq short 'Node') (ne targetShort 'NodeMetrics'))) }}
        const nss = await listNamespace.k8sNamespace(parent, args)
        return (await Promise.all(nss.map(n=>n['metadata']['name']).map(async (ns)=>{
            const lst = await listk8sPod.k8sPod(parent, {namespace: ns, ...args})
            return lst.filter(r=>
                r.metadata['ownerReferences']!=null && r.metadata['ownerReferences']!=undefined &&
                r.metadata['ownerReferences'].filter(r=>r.kind=='{{short}}' && r.name == parent['metadata']['name']).length>0
            )
        }))).flat()
{{/if}}
{{#if (eq type 'equity')}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(r=>
                r.metadata['ownerReferences']!=null && r.metadata['ownerReferences']!=undefined &&
                r.metadata['ownerReferences'].filter(r=>r.kind=='{{short}}' && r.name == parent['metadata']['name']).length>0
        );
        if (lst.length>0) return lst[0];
{{/if}}
{{#if (and (eq type 'child') (and (eq targetGroup 'core') (eq targetShort 'PodMetrics')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(r=>
  {{#if  (and (eq group 'k8s') (eq short 'Pod'))}}
                r.pod_name == parent['metadata']['name'] && r.namespace == parent['metadata']['namespace']
  {{/if}}
  {{#if  (and (eq group 'k8s') (eq short 'Deployment'))}}
                r.pod_name.split('-').slice(0,-2).join('-') == parent['metadata']['name'] && r.namespace == parent['metadata']['namespace']
  {{/if}}
  {{#if  (and (eq group 'k8s') (or (or (eq short 'ReplicaSet') (eq short 'StatefulSet')) (eq short 'DaemonSet')))}}
                r.pod_name.split('-').slice(0,-1).join('-') == parent['metadata']['name'] && r.namespace == parent['metadata']['namespace']
  {{/if}}
  {{#if  (and (eq group 'k8s') (eq short 'Namespace'))}}
                r.namespace == parent['metadata']['name']
  {{/if}}
        );
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'child') (and (eq targetGroup 'core') (eq targetShort 'NodeMetrics')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,args))
            .filter(r=> r.name == parent['metadata']['name']);
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (and (eq type 'child') (eq targetGroup 'core')) (eq targetShort 'Container'))}}
        const lst = ((parent['spec'] == undefined || !Array.isArray(parent['spec']['containers']))?[]:parent['spec']['containers']
                .map(spec=>{return {
                        namespace: parent['metadata']['namespace'],
                        pod_name: parent['metadata']['name'],
                        name: spec['name'],
                        init: false,
                        spec,
                        status: (parent['status'] == undefined || typeof spec['name'] != 'string' || !Array.isArray(parent['status']['containerStatuses']) || parent['status']['containerStatuses'].length<1)?{}:parent['status']['containerStatuses'].filter(s=>s['name']==spec['name'])[0]
                } })
            ).concat((parent['spec'] == undefined || !Array.isArray(parent['spec']['initContainers']))?[]:parent['spec']['initContainers']
                .map(spec=>{return {
                        namespace: parent['metadata']['namespace'],
                        pod_name: parent['metadata']['name'],
                        name: spec['name'],
                        init: true,
                        spec,
                        status: (parent['status'] == undefined || typeof spec['name'] != 'string' || !Array.isArray(parent['status']['initContainerStatuses']) || parent['status']['initContainerStatuses'].length<1)?{}:parent['status']['initContainerStatuses'].filter(s=>s['name']==spec['name'])[0]
                } })
            )
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (and (eq type 'get') (eq targetGroup 'core')) (eq targetShort 'Event'))}}
        const lst = (await listEvent.coreEvent(parent,{...args, namespace: null}))
  {{#if (and (eq group 'k8s') (eq short 'Namespace'))}}
             .concat(await listEvent.coreEvent(null,{namespace: parent['metadata']['name'], ...args}))
  {{else}}
             .filter(e=>e['involvedObject']['kind']=='{{short}}')
  {{/if}}
        if (lst.length>0) return lst;
{{/if}}
      } catch (err) {
        console.error(err)
      }
      return null
    },
