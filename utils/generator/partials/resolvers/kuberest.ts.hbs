    {{type}}{{targetGroup}}{{targetShort}}: async (parent, args: object) => {
      try{
        // TODO: implement out of namespace relationship
{{#if (and (eq type 'users') (and (eq targetShort 'RestEndPoint') (eq short 'ConfigMap')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(rep=> rep.spec != undefined && Array.isArray(rep.spec.inputs) && rep.spec.inputs.filter(i=>i.configMapRef != undefined && i.configMapRef.name == parent.metadata.name).length>0)
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'ConfigMap') (eq short 'RestEndPoint')))}}
        if (parent.spec == undefined || !Array.isArray(parent.spec.inputs)) return null;
        let cms = parent.spec.inputs.filter(i=>i.configMapRef != undefined).map(i=>i.configMapRef.name);
        if (cms.length<1) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(s=>cms.includes(s['metadata']['name']))
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'users') (and (eq targetShort 'RestEndPoint') (eq short 'Secret')))}}
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(rep=> rep.spec != undefined && Array.isArray(rep.spec.inputs) && rep.spec.inputs.filter(i=>i.secretRef != undefined && i.secretRef.name == parent.metadata.name).length>0)
        if (lst.length>0) return lst;
{{/if}}
{{#if (and (eq type 'use') (and (eq targetShort 'Secret') (eq short 'RestEndPoint')))}}
        if (parent.spec == undefined || !Array.isArray(parent.spec.inputs)) return null;
        let secrets = parent.spec.inputs.filter(i=>i.secretRef != undefined).map(i=>i.secretRef.name);
        if (secrets.length<1) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,{namespace: parent['metadata']['namespace'], ...args}))
            .filter(s=>secrets.includes(s['metadata']['name']))
        if (lst.length>0) return lst;
{{/if}}
      } catch (err) {
        log.error(err)
      }
      return null
    },
