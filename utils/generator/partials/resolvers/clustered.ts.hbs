    {{type}}{{targetGroup}}{{targetShort}}: async (parent, args: object) => {
      try{
{{#if (eq type 'parent')}}
        if (parent.metadata['ownerReferences']==null || parent.metadata['ownerReferences']==undefined || parent.metadata['ownerReferences'].filter(r=>r.kind=='{{targetShort}}').length<1) return null;
        const lst = (await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent,args))
            .filter(o=>parent.metadata['ownerReferences'].filter(r=>r.kind=='{{targetShort}}'&&r.name==o['metadata']['name']).length>0)
        if (lst.length>0) return lst[0];
{{/if}}
{{#if (eq type 'child') }}
  {{#if (and (eq targetGroup 'k8s') (or (or (or (eq targetShort 'CustomResourceDefinition') (eq targetShort 'MutatingWebhookConfiguration')) (or (eq targetShort 'ClusterRoleBinding') (eq targetShort 'ValidatingWebhookConfiguration'))) (or (eq targetShort 'APIService') (eq targetShort 'ClusterRole'))))}}
        const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent, args)
        return lst.filter(r=>
            r.metadata['ownerReferences']!=null && r.metadata['ownerReferences']!=undefined &&
            r.metadata['ownerReferences'].filter(r=>r.kind=='{{short}}' && r.name == parent['metadata']['name']).length>0
        )
  {{else}}
        const nss = await listNamespace.k8sNamespace(parent, args)
        return (await Promise.all(nss.map(n=>n['metadata']['name']).map(async (ns)=>{
            const lst = await list{{targetGroup}}{{targetShort}}.{{targetGroup}}{{targetShort}}(parent, {namespace: ns, ...args})
            return lst.filter(r=>
                r.metadata['ownerReferences']!=null && r.metadata['ownerReferences']!=undefined &&
                r.metadata['ownerReferences'].filter(r=>r.kind=='{{short}}' && r.name == parent['metadata']['name']).length>0
            )
        }))).flat()
  {{/if}}
{{/if}}
      } catch (err) {
        log.error(err)
      }
      return null
    },
