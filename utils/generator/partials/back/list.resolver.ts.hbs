{{#with ctx}}
    {{group}}{{short}}: async (_parent, args: object) => {
  {{#if namespaced}}
        let lst:Array<object>|undefined = cache.get(`{{group}}{{short}}.${args['namespace']}`)
        const perms = (cache.get(`permissions.${args['namespace']}`)) as { apiGroup: string, resource: string, verb: string }[];
  {{else}}
        let lst:Array<object>|undefined = cache.get('{{group}}{{short}}')
        const perms = (cache.get(`permissions`)) as { apiGroup: string, resource: string, verb: string }[];
  {{/if}}
        if (perms!=undefined && lst==undefined) {
          if(!perms.reduce((res,perm) => res||((perm.verb=='*'||perm.verb=='list')&&(
            (perm.resource=='*' && perm.apiGroup=='*') ||
            (perm.resource=='*' && knowledge.filter(o=>o.group=='{{group}}'&&o.short=='{{short}}'&&perm.apiGroup==o.apiGroup).length>0) ||
            (knowledge.filter(o=>o.group=='{{group}}'&&o.short=='{{short}}'&&(perm.apiGroup=='*'||perm.apiGroup==o.apiGroup)).map(o=>short2plural(o.short)).includes(perm.resource))
          )), false)) {
  {{#if namespaced}}
              cache.set(`{{group}}{{short}}.${args['namespace']}`, [], 60);
  {{else}}
              cache.set('{{group}}{{short}}', [], 60);
  {{/if}}
              return []
          }
        }
        if (lst==undefined) {
            try {
{{#if (defined crd)}}
  {{#if namespaced}}
                const res = await k8sApi.listNamespacedCustomObject('{{apiGroup}}','{{apiVersion}}',args['namespace'],'{{crd.status.acceptedNames.plural}}')
  {{else}}
                const res = await k8sApi.listClusterCustomObject('{{apiGroup}}','{{apiVersion}}','{{crd.status.acceptedNames.plural}}')
  {{/if}}
{{else}}
  {{#if namespaced}}
                const res = await k8sApi.listNamespaced{{ short }}(args['namespace'])
  {{else}}
                const res = await k8sApi.list{{ short }}()
  {{/if}}
{{/if}}
                lst = ((res as object)['body']['items'] as Array<object>)
{{#each readProperties}}
  {{#if (ne this @key)}}
                      .map(obj=>Object.fromEntries(Object.entries(obj).map(([k,v])=>[k=='{{@key}}'?'{{this}}':k,v])))
  {{/if}}
{{/each}}
  {{#if namespaced}}
                cache.set(`{{group}}{{short}}.${args['namespace']}`, lst, 2);
  {{else}}
    {{#if (and (eq group 'k8s') (eq short 'Namespace'))}}
                // Limit the namespace list to the one the account have permissions into
                const nsObject = knowledge.filter(o=>o.namespaced);
                const shouldInclude = Object.fromEntries(await Promise.all(lst.map(n=>n['metadata']['name']).map(async (namespace)=>{
                  const perms = await permissionsQueries.permissionReview(null, {namespace})
                  const allPerms = perms['resourceRules'].map(r=>r.apiGroups.map(apiGroup=>r.resources.map(resource=>r.verbs.map(verb=>{return {apiGroup,resource,verb} })).flat()).flat()).flat()
                          .filter(p=>!['authorization.k8s.io','authentication.k8s.io'].includes(p.apiGroup) && p.resource != 'selfsubjectaccessreviews').flat()
                  const nsPerms = allPerms.filter(l=>l.apiGroup=='*'||l.resource=='*'||nsObject.filter(o=>o.apiGroup==l.apiGroup&&short2plural(o.short)==l.resource).length>0)
                  cache.set(`permissions.${namespace}`, nsPerms, 7200);
                  cache.set('permissions', allPerms.filter(l=>l.apiGroup=='*'||l.resource=='*'||nsObject.filter(o=>o.apiGroup==l.apiGroup&&short2plural(o.short)==l.resource).length<1), 7200);
                  return [namespace, nsPerms.length>0]
                })))
                const final = lst.filter(n=>shouldInclude[n['metadata']['name']])
                cache.set('{{group}}{{short}}', final, 2);
                return final.filter(o=>applyFilter(o,args)).map(o=>applyFieldSelection(o,args)).filter(o=>applyHaving(o,args, localResolvers))
    {{else}}
                cache.set('{{group}}{{short}}', lst, 2);
    {{/if}}
  {{/if}}
            } catch (err) {
                if (typeof err === 'object' && (err as object)['body'] !=undefined && (err as object)['statusCode'] !=undefined) {
                  if ((err as object)['statusCode'] != 404 && (err as object)['body']['reason']!='Forbidden') {
                    log.error('error', (err as object)['body']);
                  } else {
                    cache.set('{{group}}{{short}}', [], 2);
                  }
                } else {log.error('error', err)}
                return []
            }
        }
        return lst.filter(o=>applyFilter(o,args)).filter(o=>applyHaving(o,args, localResolvers)).map(o=>applyFieldSelection(o,args))
    }
{{/with}}