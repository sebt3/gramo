{{#with ctx}}
    {{group}}{{short}}Create: async (_parent, args: object) => {
        const payload = {
{{#if (ne apiGroup '')}}
            apiVersion: '{{apiGroup}}/{{apiVersion}}',
{{else}}
            apiVersion: '{{apiVersion}}',
{{/if}}
            kind: '{{ short }}',
{{#if namespaced}}
            metadata: getMetaNS(args),
{{else}}
            metadata: getMeta(args),
{{/if}}
{{#each writeProperties}}
            "{{@key}}": args['{{this}}'],
{{/each}}
        }
        try {
{{#if (defined crd)}}
  {{#if namespaced}}
            const res = await k8sApi.createNamespacedCustomObject('{{apiGroup}}','{{apiVersion}}',args['metadata']['namespace'],'{{crd.status.acceptedNames.plural}}', payload)
  {{else}}
            const res = await k8sApi.createClusterCustomObject('{{apiGroup}}','{{apiVersion}}','{{crd.status.acceptedNames.plural}}', payload)
  {{/if}}
{{else}}
  {{#if namespaced}}
            const res = await k8sApi.createNamespaced{{ short }}(args['metadata']['namespace'], payload)
  {{else}}
            const res = await k8sApi.create{{ short }}(payload)
  {{/if}}
{{/if}}
            return res.body
        } catch (err) {
          if (typeof err === 'object' && (err as object)['body'] !=undefined && (err as object)['statusCode'] !=undefined) {
            if ((err as object)['statusCode'] != 404 && (err as object)['body']['reason']!='Forbidden') {
              console.error('error', (err as object)['body']);
            }
          } else {console.error('error', err)}
        }
        return null
    },
{{/with}}