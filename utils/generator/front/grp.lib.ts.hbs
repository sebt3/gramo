export { ref, useCore, useQuery, useMutation, sanitizeData, getProperties } from '../core';
{{#each objects}}
export { {{short}}Definition, {{short}}Columns, {{ short }}ListExcludes, {{ short }}ReadExcludes, {{ short }}SimpleExcludes{{#if namespaced}}, {{short}}AllColumns{{/if}} } from './{{ short }}.js'
{{/each}}
const { useCRDStore } = await import('../../stores/crds.js')
const { usePermissionStore } = await import('../../stores/permission.js')
const crds = useCRDStore().crds;
const havePermissionUsingStore = usePermissionStore().have;
const can = usePermissionStore().can;

{{#each objects}}
export const can{{ short }} = (verb:string, namespace?:string) => can(verb, '{{group}}', '{{short}}', namespace)
export const have{{ short }} = () => {{#if (defined crd)}}crds['{{crd.metadata.name}}'] != undefined && {{/if}}havePermissionUsingStore('{{group}}', '{{short}}')
{{/each}}
export function isActive{{ category }}{{ name }}() {
    let count = 0;
{{#each objects}}
    if (have{{ short }}()) count++;
{{/each}}
    return count>0;
}
