<script setup lang="ts">
import { onMounted } from "vue";
import { defineAsyncComponent } from 'vue'
const  OpenApiEdit   = defineAsyncComponent(() => import( '@/components/core/OpenApiEdit.vue'));
const  MonacoEditor   = defineAsyncComponent(() => import( '@/components/core/MonacoEditor.vue'));
import { use{{ short }}, sanitizeData, getProperties, {{ short }}Definition } from '../../libs/{{ group }}/{{ short }}.js'
import { color{{ short }}, icon{{ short }} } from '../../libs/{{ group }}/custom.js'
import { useQuasar } from 'quasar'
const $q = useQuasar()
{{#if namespaced}}
const { writeProperties, onlyWriteProperties, editor, setNamespacedItemFromRoute } = use{{ short }}();setNamespacedItemFromRoute();
{{else}}
const { writeProperties, onlyWriteProperties, editor, setItemFromRoute } = use{{ short }}();setItemFromRoute();
{{/if}}
const emit = defineEmits(['on-submit'])
const props = defineProps<{model: object}>();
onMounted(() => {
  editor.value.updateFromQuery(onlyWriteProperties(props.model));
})
function onSubmit() {
  emit('on-submit', sanitizeData(editor.value.obj));
}
const setkey = (key:string, v) => editor.value.setKey(key, v)
const setYaml = (v) => editor.value.setYaml(v)
</script>
<template>
  <q-form @submit="onSubmit" class="q-gutter-md q-pt-sm q-ml-sm">
  <q-card bordered class="q-ma-sm">
    <q-tabs v-model="editor.tab" :class="`bg-${ color{{ short }} } text-grey-2`" active-color="white" :align="'justify'">
      <q-tab label="Simple" name="simple" />
      <q-tab label="full Yaml" name="yaml" />
      <q-btn-group push class="float-right text-capitalize shadow-3 q-mr-sm">
        <q-btn type="submit" icon="save" label="confirm">
          <q-tooltip>Submit</q-tooltip>
        </q-btn>
      </q-btn-group>
    </q-tabs>
    <q-tab-panels v-model="editor.tab" animated>
      <q-tab-panel name="simple" :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`">
        <OpenApiEdit v-if="editor.ready"
{{#if (and (eq group 'vynil') (eq short 'Install'))}}
          @update:out="(v)=>setkey('spec', {...model['spec'],options:sanitizeData(v)})"
          :in="editor.obj['spec']['options']"
          :properties="new Map(Object.entries(model.consumevynilPackage.options))"
{{else}}
  {{#if (and (eq (propertyCount writeProperties) 1) (propertyContain writeProperties 'spec'))}}
          @update:out="(v)=>setkey('spec', sanitizeData(v))"
          :in="editor.obj['spec']"
          :properties="getProperties({{ short }}Definition.properties.spec)"
  {{else}}
          @update:out="(v)=>setkey(null, sanitizeData(v))"
          :in="editor.obj"
          :properties="getProperties({{ short }}Definition,([k])=>writeProperties.includes(k))"
  {{/if}}
{{/if}}
        />
      </q-tab-panel>
      <q-tab-panel name="yaml" :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`">
          <MonacoEditor
            :text="editor.yaml" :key="editor.yaml"
            @update:text="v=>setYaml(v)"
{{#if (and (eq group 'vynil') (eq short 'Install'))}}
            :properties="getProperties({properties: model.consumevynilPackage.options})"
{{else}}
            :properties="getProperties({properties: Object.fromEntries(Object.entries({{ short }}Definition).filter(([n])=>!['metadata','status'].includes(n)))})"
{{/if}}
            />
      </q-tab-panel>
    </q-tab-panels>
      <q-card-actions :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`">
        <q-btn label="Submit" icon="save" type="submit" color="primary"/>
      </q-card-actions>
  </q-card>
  </q-form>
</template>
