<script setup lang="ts">
import {{ group }}{{ short }}Query from '@/queries/{{ group }}/{{ short }}.read.graphql'
{{#if (defined crd)}}
{{#if namespaced}}
import itemEdit from '@/queries/core/namespacedObject.patch.graphql'
{{else}}
import itemEdit  from '@/queries/core/clusteredObject.patch.graphql'
{{/if}}
{{else}}
import itemEdit from '@/queries/{{ group }}/{{ short }}.patch.graphql'
{{/if}}
const { i18n, defineAsyncComponent, ref, useQuery, useMutation, use{{ short }}, {{ short }}SimpleExcludes } = await import('../../../libs/{{ group }}/{{ short }}.js')
const { set{{#if namespaced}}Namespaced{{/if}}ItemFromRoute } = await import('../../../libs/core/navigation.js')
set{{#if namespaced}}Namespaced{{/if}}ItemFromRoute();
const { useRouter } = await import('vue-router')
const router = useRouter();
const { onErrorHandler, patchDone, patchError, notifyWorking, onNot{{ short }}Found, navigation } = use{{ short }}(router);
const { mutate: patch{{ short }}, onDone: onPatch{{ short }}, onError: onPatchError } = useMutation(itemEdit);
const { result, loading, onResult, onError } = useQuery({{ group }}{{ short }}Query, {
  "obj": {
    "filters": [
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentItem
      }
    ], "excludes": {{ short }}SimpleExcludes
  },
{{#if namespaced}}
  "namespace": {
    "filters": [
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentNamespace
      }
    ]
  }
{{/if}}
});
const model = ref({});
onResult(res => {
  if ( !res.loading ) {
    onNot{{ short }}Found(res);
    if (res.data!=undefined{{#if namespaced}} && Array.isArray(res.data.k8sNamespace) {{/if}} && res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]!=undefined && res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]!=null) {
      model.value = res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]
    }
    {{#if (eq group 'cattle')}}
{{> cattleCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'certmanager')}}
{{> certmanagerCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'cilium')}}
{{> ciliumCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'cnpg')}}
{{> cnpgCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'fluxcd')}}
{{> fluxcdCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'jaegertracing')}}
{{> jaegertracingCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'k8s')}}
{{> k8sCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'k8up')}}
{{> k8upCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'mariadb')}}
{{> mariadbCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'mongodb')}}
{{> mongodbCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'monitoring')}}
{{> monitoringCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'opentelemetry')}}
{{> opentelemetryCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'oracle')}}
{{> oracleCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'projectcalico')}}
{{> projectcalicoCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'rabbitmq')}}
{{> rabbitmqCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'redis')}}
{{> redisCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'secretgenerator')}}
{{> secretgeneratorCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'traefik')}}
{{> traefikCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'vynil')}}
{{> vynilCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'zalando')}}
{{> zalandoCustom ctx=. page='edit' operation='dataPrepare'}}
    {{/if}}
  }
});
function onSubmit(obj:object) {
  notifyWorking(i18n.global.t('edit.notifyWorking'));
  patch{{ short }}({
    ...obj,
{{#if (defined crd)}}
    "group": '{{apiGroup}}', "version": '{{apiVersion}}', "plural": '{{crd.status.acceptedNames.plural}}', "kind": '{{ short }}',
{{/if}}
    "metadata": Object.fromEntries(Object.entries(result.value{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0].metadata).filter(([name])=>name!='__typename')),
  });
}
onError(onErrorHandler);onPatch{{ short }}(patchDone);onPatchError(patchError);
const TableSkeleton = defineAsyncComponent(() => import( '@/components/core/TableSkeleton.vue'));
const GenericMeta   = defineAsyncComponent(() => import( '@/components/generic/GenericMeta.vue'));
const GenericEdit   = defineAsyncComponent(() => import( '@/components/generic/GenericEdit.vue'));
const GenericStatus = defineAsyncComponent(() => import( '@/components/generic/GenericStatus.vue'));
</script>
<template><div>
  <TableSkeleton :showNamespace="{{toJson namespaced}}" v-if="loading" />
  <div class="row q-ml-sm">
    <div class="col-md-6">
      <GenericMeta group="{{ group }}" short="{{ short }}" :useActions="false" :showStatus="false"
        v-if="!loading && model['metadata'] != undefined"
        :model="model"
       />
    </div>
    <div class="col-md-6">
      <GenericStatus group="{{ group }}" short="{{ short }}"
        v-if="!loading && model['metadata'] != undefined"
        :model="model"
       />
    </div>
  </div>
  <div class="row q-ml-sx">
    <div class="col-md-12">
      <GenericEdit group="{{ group }}" short="{{ short }}"
        v-if="!loading && model['metadata'] != undefined"
        :model="model"
        @on-submit="onSubmit"
       />
    </div>
  </div>
</div></template>

