<script setup lang="ts">
import {{ group }}{{ short }}Query from '@/queries/{{ group }}/{{ short }}.read.graphql'
{{#if (defined crd)}}
{{#if namespaced}}
import {{ short }}Delete from '@/queries/core/namespacedObject.delete.graphql'
{{else}}
import {{ short }}Delete from '@/queries/core/clusteredObject.delete.graphql'
{{/if}}
{{else}}
import {{ short }}Delete from '@/queries/{{ group }}/{{ short }}.delete.graphql'
{{/if}}
const { useRouter } = await import('vue-router')
const router = useRouter();
const { watch, defineAsyncComponent, useQuery, useMutation, use{{ short }}, {{ short }}ListExcludes } = await import('../../../libs/{{ group }}/{{ short }}.js')
const { actionDelete, deleteDone, deleteError, onErrorHandler, navigation } = use{{ short }}(router);
const { mutate: deletor, onDone: onDeleteDone, onError: onDeleteError } = useMutation({{ short }}Delete);
{{#if namespaced}}
const { setNamespaceFromRoute, isNamespaced } = await import('../../../libs/core/navigation.js')
setNamespaceFromRoute();
{{/if}}
const { result, refetch, onError } = useQuery({{ group }}{{ short }}Query, {
{{#if namespaced}}
  "obj": {
    "filters": [],
    "excludes": {{ short }}ListExcludes
  },
  "namespace": {
    "filters": isNamespaced()?[
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentNamespace
      }
    ]:[]
  }
{{else}}
  "obj": {}
{{/if}}
}, navigation.refreshOption);
onError(onErrorHandler);onDeleteDone(deleteDone);onDeleteError(deleteError);
const GenericList   = defineAsyncComponent(() => import( '@/components/generic/GenericList.vue'));
const TableSkeleton = defineAsyncComponent(() => import( '@/components/core/TableSkeleton.vue'));
</script>
<template><div>
  <TableSkeleton :showNamespace="{{toJson namespaced}}" v-if="result === undefined" />
  <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="true"
{{#if namespaced}}
    v-if="result !== undefined && result['k8sNamespace'] !== undefined"
    :model="result.k8sNamespace.map(x=>x.{{ group }}{{ short }}).flat()"
{{else}}
    v-if="result !== undefined && result['{{ group }}{{ short }}'] !== undefined"
    :model="result.{{ group }}{{ short }}"
{{/if}}
    @on-delete="(meta)=>{actionDelete(deletor, meta)}"
  />
</div></template>