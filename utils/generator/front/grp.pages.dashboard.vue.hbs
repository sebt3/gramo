<script setup lang="ts">
const { defineAsyncComponent } = await import('vue')
import {{ category }}Query from '@/queries/{{ name }}/{{ category }}.read.graphql'
const { {{#each objects}}have{{ short }}, {{/each}} } = await import('@/libs/{{ name }}/{{ category }}Cat.js')
const { {{#each objects}}color{{ short }}, {{/each}} } = await import('@/libs/{{ name }}/custom.js')
const { useQuasar } = await import('quasar')
const $q = useQuasar()
const { useRouter } = await import('vue-router')
const router = useRouter();
{{#each objects}}
const { {{ short }}ListExcludes{{#if namespaced}}, use{{short}}{{/if}} } = await import('@/libs/{{ group }}/{{ short }}.js')
{{#if namespaced}}
const {toList: to{{ short }}List}  = use{{short}}(router);
{{/if}}
{{/each}}
const { ref, useCore, useNavigationStoreRef, useQuery } = await import('@/libs/core');
const { isNamespaced, setNamespaceFromRoute } = await import('../../../libs/core/navigation.js')
const { onErrorHandler } = useCore();
const ready = ref(false);
{{#each objects}}
const {{ short }}Problems = ref([]);
{{#if namespaced}}
const {{ short }}ByTs = ref([]);
{{/if}}
{{/each}}
{{#if (eq name 'vynil')}}
const radialStackedAreaChart = defineAsyncComponent(() => import( '@/components/charts/radialStackedAreaChart.vue'));
const CatDistCount = ref([]);
{{/if}}
if (isNamespaced()) setNamespaceFromRoute();
const navigation = useNavigationStoreRef();
const { result, loading, refetch, onResult, onError } = useQuery({{ category }}Query, {
{{#each objects}}
  "{{ short }}": {
    "filters": [],
    "excludes": {{ short }}ListExcludes
  },
{{/each}}
  "namespace": {
    "filters": isNamespaced()?[
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentNamespace
      }
    ]:[]
  }
}, navigation.refreshOption);
const conditions = ref({
{{#each objects}}
{{#if namespaced}}
      "{{ group }}{{ short }}": (result) => result !== undefined && result['k8sNamespace'] !== undefined && Array.isArray(result['k8sNamespace']) && result['k8sNamespace'].map(n=>n['{{ group }}{{ short }}']).flat().length>0,
{{else}}
      "{{ group }}{{ short }}": (result) => !isNamespaced() && result !== undefined && Array.isArray(result['{{ group }}{{ short }}']) && result['{{ group }}{{ short }}'].length>0,
{{/if}}
{{/each}}
});
onError(onErrorHandler);
onResult((res) => {
  if ( !res.loading ) {
    ready.value = false;
{{#each objects}}
{{#if namespaced}}
    if (have{{ short }}()) {
      {{ short }}ByTs.value.length = 0;
      {{ short }}ByTs.value.push(...res.data.k8sNamespace.map(n => {return {name: n.metadata.name, value: n.{{ group }}{{ short }}.length} }).filter(n => n.value>0))
    }
{{/if}}
{{/each}}
{{#if (eq name 'vynil')}}
    const flat = res.data.vynilDistrib.map(d => Object.entries(d.status.components).map(([category,pkgs])=>Object.entries(pkgs as object).map(([name, spec])=> {return {distrib: d.metadata.name, category, package: name} })).flat()).flat()
    CatDistCount.value.length = 0;
    CatDistCount.value.push( ...flat.map(l => l.distrib).filter((v,i,a)=>a.indexOf(v) === i).map(d=> flat.map(l => l.category).filter((v,i,a)=>a.indexOf(v) === i).map(c=>{return{category:c, distrib:d, value: flat.filter(i => i.category==c && i.distrib==d).length} })).reduce((res, value) => res.concat(value), []))
{{/if}}
    ready.value = true;
  }
})
const pieChart         = defineAsyncComponent(() => import( '@/components/charts/pieChart.vue'));
const ProblemOverview  = defineAsyncComponent(() => import( '@/components/generic/ProblemOverview.vue'));
const OverviewSkeleton = defineAsyncComponent(() => import( '@/components/core/OverviewSkeleton.vue'));
const TableSkeleton    = defineAsyncComponent(() => import( '@/components/core/TableSkeleton.vue'));
const GenericList      = defineAsyncComponent(() => import( '@/components/generic/GenericList.vue'));
</script>
<template><div>
{{#each objects}}
  <div class="row q-mb-sm q-ml-sm" v-if="loading{{#unless namespaced}} && !isNamespaced(){{/unless}}">
    <div class="col-lg-4">
      <OverviewSkeleton />
    </div>
    <div class="col-lg-8">
      <TableSkeleton :showNamespace="{{toJson namespaced}}" />
    </div>
  </div>
{{#if namespaced}}
  <div class="row q-mb-sm q-ml-sm" v-if="!loading && result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)).flat().length>0">
    <div class="col-lg-4">
      <ProblemOverview short="{{ short }}" :to="to{{ short }}List"
        :model="result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)).flat()" />
    </div>
    <div class="col-lg-8">
      <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="false"
        v-if="result !== undefined && result['k8sNamespace'] !== undefined && Array.isArray(result['k8sNamespace']) && result['k8sNamespace'].map(n=>n['{{ group }}{{ short }}']).flat().length>0"
        :model="result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)).flat()" />
    </div>
{{else}}
  <div class="row q-mb-sm q-ml-sm" v-if="!loading && !isNamespaced() && result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0).length>0">
    <div class="col-lg-4">
      <ProblemOverview short="{{ short }}" :to="to{{ short }}List"
        :model="result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)" />
    </div>
    <div class="col-lg-8">
      <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="false"
        v-if="result !== undefined && Array.isArray(result['{{ group }}{{ short }}']) && result['{{ group }}{{ short }}'].length>0"
        :model="result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)" />
    </div>
{{/if}}
  </div>
{{/each}}
  <div class="row q-mb-sm q-ml-sm" v-if="!isNamespaced()">
{{#if (eq name 'vynil')}}
    <div class="col-lg-4">
      <q-card bordered v-if="ready" :class="`q-ma-sm bg-${ colorDistrib }-${$q.dark.isActive?'10':'1'}`">
        <q-card-section :class="`text-center bg-${ colorDistrib }`">
          <div class="text-subtitle q-mt-none q-mb-none q-pt-none q-pb-none"><a class="text-grey-8" href="#vynilDistrib">\{{  $t('vynil.dashboard') }}</a></div>
        </q-card-section>
        <q-card-section class="text-center">
          <radialStackedAreaChart v-model:datum="CatDistCount" :axisX="function (d){return d!=undefined?d['category']:this.id}" :axisColor="function (d){return d!=undefined?d['distrib']:this.id}" :getVal="function (d){return d!=undefined?d['value']:this.id}" />
        </q-card-section>
      </q-card>
    </div>
{{/if}}
{{#each objects}}
{{#if namespaced}}
    <div class="col-lg-4" v-if="ready && {{ short }}ByTs.length>1" >
      <q-card bordered :class="`q-ma-sm bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`">
        <q-card-section :class="`text-center bg-${ color{{ short }} }`">
          <div class="q-mt-none q-mb-none q-pt-none q-pb-none"><a class="text-white text-subtitle" href="#{{ group }}{{ short }}">\{{ $t('overview.perNamespace', {short: '{{ short }}'}) }}</a></div>
        </q-card-section>
        <q-card-section class="text-center">
          <pieChart
            :datum="{{ short }}ByTs"
            @on-click="(name)=>{to{{ short }}List(name)}"
            />
        </q-card-section>
      </q-card>
    </div>
{{/if}}
{{/each}}
  </div>
<div class="column">
{{#each objects}}
  <div {{#if order }}:style="`order: {{order}}`"{{/if}}>
    <a name="{{ group }}{{ short }}" />
{{#if namespaced}}
    <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="false"
      v-if="conditions['{{ group }}{{ short }}'](result)"
      :model="result.k8sNamespace.map(x=>x.{{ group }}{{ short }}).flat()"
    />
{{else}}
    <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="false"
      v-if="conditions['{{ group }}{{ short }}'](result)"
      :model="result.{{ group }}{{ short }}"
    />
{{/if}}
  </div>
{{/each}}
  <q-card bordered class="q-ma-sm" v-if="({{#each objects}}have{{ short }}() || {{/each}} false) && !Object.entries(conditions).map(([_,fn])=>fn(result)).reduce((res,cur)=>cur||res,false)">
    <q-card-section :class="`bg-info text-white`">
      <div class="text-subtitle1 q-mt-none q-mb-none q-pt-none q-pb-none">
        \{{ $t('dashboard.info') }}
      </div>
    </q-card-section>
    <q-card-section :class="`bg-light-blue-2`">
      <div class="q-ma-xl">\{{ $t('dashboard.nothing') }}</div>
    </q-card-section>
  </q-card>
  <q-card bordered class="q-ma-sm" v-if="{{#each objects}}!have{{ short }}() &&{{/each}}true">
    <q-card-section :class="`bg-negative text-white`">
      <div class="text-subtitle1 q-mt-none q-mb-none q-pt-none q-pb-none">
        \{{ $t('core.error') }}
      </div>
    </q-card-section>
    <q-card-section :class="`bg-red-2`">
      <div class="q-ma-xl">\{{ $t('dashboard.noPerm') }}</div>
    </q-card-section>
  </q-card>
</div>
</div></template>