<script setup lang="ts">
import allQuery from '@/queries/all.read.graphql'
const { defineAsyncComponent } = await import('vue')
const {onlyUnique} = await import("@/components/charts/commonTools.js")
{{#each categories}}
{{#each groups}}
const { {{#each objects}}have{{ short }}: have{{ group }}{{ short }}, {{/each}} } = await import('@/libs/{{ name }}/{{ ../category }}Cat.js')
{{/each}}
{{/each}}
const { useRouter } = await import('vue-router')
const router = useRouter();
{{#each groups}}
{{#each objects}}
const { {{ short }}ListExcludes: {{ group }}{{ short }}ListExcludes{{#if namespaced}}, use{{short}}: use{{ group }}{{short}}{{/if}} } = await import('@/libs/{{ group }}/{{ short }}.js')
{{#if namespaced}}
const {toList: to{{ group }}{{ short }}List}  = use{{ group }}{{short}}(router);
{{/if}}
{{/each}}
{{/each}}
const { ref, useCore, useNavigationStoreRef, useQuery } = await import('@/libs/core');
const { isNamespaced, setNamespaceFromRoute } = await import('../libs/core/navigation.js')
const { onErrorHandler } = useCore();
const ready = ref(false);
const namespaced = isNamespaced();
if (namespaced) setNamespaceFromRoute();
const navigation = useNavigationStoreRef();
const { result, loading, refetch, onResult, onError } = useQuery(allQuery, {
{{#each groups}}
{{#each objects}}
  "{{ group }}In{{ short }}": {
    "filters": [],
    "havingAny": [{"resolver":"getcoreProblem"},{"resolver":"getcoreAdvice"}],
    "excludes": {{ group }}{{ short }}ListExcludes
  },
{{/each}}
{{/each}}
  "namespace": {
    "filters": namespaced?[
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentNamespace
      }
    ]:[]
  }
});
const ProblemList = ref([]);
onError(onErrorHandler);
onResult((res) => {
  if ( !res.loading ) {
    ready.value = false;
    ProblemList.value.length = 0;
{{#each groups}}
{{#each objects}}
{{#if namespaced}}
    if (have{{ group }}{{ short }}() && Array.isArray(res.data.k8sNamespace)) {
      ProblemList.value.unshift(...res.data.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)).flat().map(o=>{return {...o, short:'{{ short }}', group:'{{ group }}'} }))
{{ else }}
    if (have{{ group }}{{ short }}() && !namespaced) {
        ProblemList.value.unshift(...res.data.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0).map(o=>{return {...o, short:'{{ short }}', group:'{{ group }}'} }))
{{/if}}
    }
{{/each}}
{{/each}}
    ready.value = true;
  }
})
const AllProblemOverview = defineAsyncComponent(() => import( '@/components/generic/AllProblemOverview.vue'));
const ProblemOverview    = defineAsyncComponent(() => import( '@/components/generic/ProblemOverview.vue'));
const AdviceOverview     = defineAsyncComponent(() => import( '@/components/generic/AdviceOverview.vue'));
const OverviewSkeleton   = defineAsyncComponent(() => import( '@/components/core/OverviewSkeleton.vue'));
const TableSkeleton      = defineAsyncComponent(() => import( '@/components/core/TableSkeleton.vue'));
const GenericList        = defineAsyncComponent(() => import( '@/components/generic/GenericList.vue'));
</script>
<template><div>
  <div class="row q-mb-sm q-ml-sm" v-if="ready && ProblemList.map(o=>`${o.group}${o.short}`).filter(onlyUnique).length>1">
    <div class="col-lg-6">
      <AllProblemOverview short="All" :options="{width: 900, height: 600}"
        :model="ProblemList.map(o=>o['getcoreProblem'].map(p=>{ return {short: o.short, source: p['source']} })).flat()" />
    </div>
    <div class="col-lg-6" v-if="!namespaced">
      <ProblemOverview short="All" :options="{width: 900, height: 600}"
        :model="ProblemList" />
    </div>
  </div>
  <div class="row q-mb-sm q-ml-sm" v-if="ready && ProblemList.length<1">
    <div class="col-lg-12">
      <q-card bordered class="q-ma-sm">
        <q-card-section class="bg-positive text-grey-2">
          <div class="text-h6 q-mt-none q-mb-none q-pt-none q-pb-none">\{{ $t('dashboard.success') }}</div>
        </q-card-section>
        <q-card-section class="bg-green-2 text-center q-pa-xl text-subtitle1">\{{ $t('dashboard.noProblem') }}</q-card-section>
      </q-card>
    </div>
  </div>
{{#each groups}}
{{#each objects}}
  <div class="row q-mb-sm q-ml-sm" v-if="loading{{#unless namespaced}} && !namespaced{{/unless}}">
    <div class="col-lg-4">
      <OverviewSkeleton />
    </div>
    <div class="col-lg-8">
      <TableSkeleton :showNamespace="{{toJson namespaced}}" />
    </div>
  </div>
{{#if namespaced}}
  <div class="row q-mb-sm q-ml-sm" v-if="!loading && result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)).flat().length>0">
    <div class="col-lg-4">
      <ProblemOverview short="{{ short }}" :to="to{{ group }}{{ short }}List"
        :model="result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)).flat()" />
    </div>
    <div class="col-lg-8">
      <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="false"
        v-if="result !== undefined && result['k8sNamespace'] !== undefined && Array.isArray(result['k8sNamespace']) && result['k8sNamespace'].map(n=>n['{{ group }}{{ short }}']).flat().length>0"
        :model="result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)).flat()" />
    </div>
{{else}}
  <div class="row q-mb-sm q-ml-sm" v-if="!loading && !namespaced && result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0).length>0">
    <div class="col-lg-4">
      <ProblemOverview short="{{ short }}" :to="to{{ group }}{{ short }}List"
        :model="result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)" />
    </div>
    <div class="col-lg-8">
      <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="false"
        v-if="result !== undefined && Array.isArray(result['{{ group }}{{ short }}']) && result['{{ group }}{{ short }}'].length>0"
        :model="result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreProblem'])&&o['getcoreProblem'].length>0)" />
    </div>
{{/if}}
  </div>
{{/each}}
{{/each}}
{{#each groups}}
{{#each objects}}
{{#if namespaced}}
  <div class="row q-mb-sm q-ml-sm" v-if="!loading && result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreAdvice'])&&o['getcoreAdvice'].length>0)).flat().length>0">
    <div class="col-lg-4">
      <AdviceOverview short="{{ short }}" :to="to{{ group }}{{ short }}List"
        :model="result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreAdvice'])&&o['getcoreAdvice'].length>0)).flat()" />
    </div>
    <div class="col-lg-8">
      <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="false" :showAdvices="true"
        v-if="result !== undefined && result['k8sNamespace'] !== undefined && Array.isArray(result['k8sNamespace']) && result['k8sNamespace'].map(n=>n['{{ group }}{{ short }}']).flat().length>0"
        :model="result.k8sNamespace.map(n => n.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreAdvice'])&&o['getcoreAdvice'].length>0)).flat()" />
    </div>
{{else}}
  <div class="row q-mb-sm q-ml-sm" v-if="!loading && !namespaced && result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreAdvice'])&&o['getcoreAdvice'].length>0).length>0">
    <div class="col-lg-4">
      <AdviceOverview short="{{ short }}" :to="to{{ group }}{{ short }}List" :showAdvices="true"
        :model="result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreAdvice'])&&o['getcoreAdvice'].length>0)" />
    </div>
    <div class="col-lg-8">
      <GenericList group="{{ group }}" short="{{ short }}" @refresh="refetch()" :useAction="false"
        v-if="result !== undefined && Array.isArray(result['{{ group }}{{ short }}']) && result['{{ group }}{{ short }}'].length>0"
        :model="result.{{ group }}{{ short }}.filter(o=>Array.isArray(o['getcoreAdvice'])&&o['getcoreAdvice'].length>0)" />
    </div>
{{/if}}
  </div>
{{/each}}
{{/each}}
  <q-card bordered class="q-ma-sm" v-if="{{#each groups}}{{#each objects}}!have{{ group }}{{ short }}() &&{{/each}}{{/each}}true">
    <q-card-section :class="`bg-negative text-white`">
      <div class="text-subtitle1 q-mt-none q-mb-none q-pt-none q-pb-none">
        \{{ $t('core.error') }}
      </div>
    </q-card-section>
    <q-card-section :class="`bg-negative-2`">
      <div class="q-gutter-md">\{{ $t('dashboard.noPerm') }}</div>
    </q-card-section>
  </q-card>
</div></template>