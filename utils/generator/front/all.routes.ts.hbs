const { createRouter, createWebHistory, RouteRecordRaw } = await import('vue-router')
import { menuLinksProps } from './interfaces.js';
const { useConfigStore } = await import('../stores/config.js')
export * from './interfaces.js'
const { defaultRoute } = useConfigStore()
const routeChildren:Array<RouteRecordRaw> = [
    {
      path: 'advices',
      name: 'Advices',
      component: () => import('../pages/AllAdvices.vue'),
      meta: {
        breadcrumb: 'Advices', icon: 'warning', ns: false,
        title: () => 'All Advices'
      },
    },
];
const linkRedirect = {name:'Advices'};
export const links:Array<menuLinksProps> = [];

{{#each categories}}
const { route: {{this}}Route, link: {{this}}Link } = await import('./{{this}}')
if ({{this}}Route.children != undefined && {{this}}Route.children?.length>0) {
  routeChildren.push({{this}}Route);
  if ({{this}}Link.children != undefined && {{this}}Link.children?.length>0) {
    {{#if (eq this 'system')}}
    if ({{this}}Route.children?.length>2) links.push({{this}}Link)
    {{else}}
    links.push({{this}}Link)
    {{/if}}
    linkRedirect.name = linkRedirect.name!='Advices'?linkRedirect.name:{{this}}Route.redirect!=undefined?{{this}}Route.redirect.name:'Advices'
  }
}
{{/each}}

export const router = createRouter({
  history: createWebHistory('/'),
  routes: [
    {
      path: '/',
      name: 'root',
      meta:      {breadcrumb: '', icon: 'home', ns: false},
      redirect: defaultRoute!=''?{path:defaultRoute}:linkRedirect,
      children: routeChildren
    },
    { path: '/:pathMatch(.*)*', name: 'NotFound', component: () => import('../components/navigation/PageNotFound.vue') },
  ]
})
export default router