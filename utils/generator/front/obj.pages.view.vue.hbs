<script setup lang="ts">
import {{ group }}{{ short }}Query from '@/queries/{{ group }}/{{ short }}.details.graphql'
import {{ short }}Delete from '@/queries/{{ group }}/{{ short }}.delete.graphql'
import {{ group }}{{ short }}View from '@/components/{{ group }}/{{ short }}View.vue';
{{#each resolvers}}
  {{#if (or (eq type 'parent') (eq type 'consume'))}}
import {{ resultGroup }}{{ resultShort }}Meta from '@/components/{{ resultGroup }}/{{ resultShort }}Meta.vue';
  {{else}}
  {{#if (eq type 'equity')}}
import {{ resultGroup }}{{ resultShort }}View from '@/components/{{ resultGroup }}/{{ resultShort }}View.vue';
  {{else}}
import {{ resultGroup }}{{ resultShort }}List from '@/components/{{ resultGroup }}/{{ resultShort }}List.vue';
  {{/if}}
  {{/if}}
{{/each}}
{{#each listTargets}}
  {{#if (eq type 'consume')}}
import { {{ name }}ReadExcludes as {{ group }}{{ name }}ListExcludes } from '../../../libs/{{ group }}/custom.js'
  {{else}}
import { {{ name }}ListExcludes as {{ group }}{{ name }}ListExcludes } from '../../../libs/{{ group }}/custom.js'
  {{/if}}
{{/each}}
import { ref, sanitizeData, useQuery, useMutation, use{{ short }}, {{ short }}ReadExcludes } from '../../../libs/{{ group }}/{{ short }}.js'
{{#if namespaced}}
const { actionDelete, onErrorHandler, notifySuccess, notifyError, onNot{{ short }}Found, navigation, setNamespacedItemFromRoute } = use{{ short }}();setNamespacedItemFromRoute();
{{else}}
const { actionDelete, onErrorHandler, notifySuccess, notifyError, onNot{{ short }}Found, navigation, setItemFromRoute } = use{{ short }}();setItemFromRoute();
{{/if}}
const { result, loading, onResult, onError } = useQuery({{ group }}{{ short }}Query, {
  "obj": {
    "filters": [
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentItem
      }
    ], "excludes": {{ short }}ReadExcludes
  },
{{#each resolvers}}
  "{{ name }}": {"filters": [], "excludes": {{ resultGroup }}{{ resultShort }}ListExcludes},
{{/each}}
{{#if namespaced}}
  "namespace": {
    "filters": [
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentNamespace
      }
    ]
  }
{{/if}}
}, navigation.refreshOption);onError(onErrorHandler);
const { mutate: deletor, onDone: onDeleteDone, onError: onDeleteError } = useMutation({{ short }}Delete);
const conditions = ref({
{{#each resolvers}}
  {{#if ../namespaced}}
    {{#if (or (eq type 'parent') (eq type 'consume'))}}
  "{{name}}": (data) => Array.isArray(data.k8sNamespace) && data.k8sNamespace.map(ns=>ns['{{ ../group }}{{ ../short }}']).flat().map(obj=>obj['{{name}}']!=null).reduce((acc,cur)=>acc||cur,false),
    {{else}}
  "{{name}}": (data) => Array.isArray(data.k8sNamespace) && data.k8sNamespace.map(ns=>ns['{{ ../group }}{{ ../short }}']).flat().map(obj=>obj['{{name}}']).flat().filter(o=>o!=null).length>0,
    {{/if}}
  {{else}}
    {{#if (or (eq type 'parent') (eq type 'consume'))}}
  "{{name}}": (data) => Array.isArray(data['{{ ../group }}{{ ../short }}']) && data['{{ ../group }}{{ ../short }}'].map(obj=>obj['{{name}}']!=null).reduce((acc,cur)=>acc||cur,false),
    {{else}}
  "{{name}}": (data) => Array.isArray(data['{{ ../group }}{{ ../short }}']) && data['{{ ../group }}{{ ../short }}'].map(obj=>obj['{{name}}']).flat().filter(o=>o!=null).length>0,
    {{/if}}
  {{/if}}
{{/each}}
});
const sectionCounts = ref({
  consumeLeft: 0,
  parent: 0,
  consumeRight: 0,
  gets: 0,
  users: 0,
  uses: 0,
  bellow: 0
});
const model = ref({});
onResult(res => {
  onNot{{ short }}Found(res);
  if ( !res.loading ) {
    if (res.data!=undefined{{#if namespaced}} && Array.isArray(res.data.k8sNamespace) {{/if}} && res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]!=undefined && res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]!=null) {
      model.value = res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]
    }
    {{#if (eq group 'cattle')}}
{{> cattleCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'certmanager')}}
{{> certmanagerCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'cilium')}}
{{> ciliumCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'cnpg')}}
{{> cnpgCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'fluxcd')}}
{{> fluxcdCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'jaegertracing')}}
{{> jaegertracingCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'k8s')}}
{{> k8sCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'k8up')}}
{{> k8upCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'mariadb')}}
{{> mariadbCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'mongodb')}}
{{> mongodbCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'monitoring')}}
{{> monitoringCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'opentelemetry')}}
{{> opentelemetryCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'oracle')}}
{{> oracleCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'projectcalico')}}
{{> projectcalicoCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'rabbitmq')}}
{{> rabbitmqCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'redis')}}
{{> redisCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'secretgenerator')}}
{{> secretgeneratorCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'traefik')}}
{{> traefikCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'vynil')}}
{{> vynilCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'zalando')}}
{{> zalandoCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
{{#each resolvers}}
  {{#if (and (eq type 'consume') (or (eq resultShort 'Node') (eq resultShort 'Distrib')))}}
    sectionCounts.value.consumeLeft += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (and (eq type 'consume') (and (ne resultShort 'Node') (ne resultShort 'Distrib')))}}
    sectionCounts.value.consumeRight += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'parent')}}
    sectionCounts.value.parent += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'users')}}
    sectionCounts.value.users += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'use')}}
    sectionCounts.value.uses += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'child')}}
    sectionCounts.value.bellow += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'provide')}}
    sectionCounts.value.bellow += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
{{/each}}
  }
});
onDeleteDone(() => {
  notifySuccess('Deletion proceded');
})
onDeleteError((err) => {
  notifyError('Deletion failed');
  console.log('deletion error',err);
})
</script>
<template>
  <div class="row q-mb-sm q-ml-sm">
    <div class="col-md-3" v-if="!loading && sectionCounts.consumeLeft>0">
{{#each resolvers}}
  {{#if (and (eq type 'consume') (or (eq resultShort 'Node') (eq resultShort 'Distrib')))}}
      <{{ resultGroup }}{{ resultShort }}Meta v-if="!loading && conditions['{{name}}'](result)" :showStatus="false"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
       />
  {{/if}}
{{/each}}
    </div>
    <div :class="`col-md-${4-(sectionCounts.consumeLeft>0?3:0)}`" v-if="!loading && sectionCounts.parent+sectionCounts.consumeRight>0"></div>
    <div class="col-md-4" v-if="!loading && sectionCounts.parent>0">
{{#each resolvers}}
  {{#if (eq type 'parent')}}
    <div v-if="!loading && conditions['{{name}}'](result){{#if (eq resultShort 'Install')}}&&sectionCounts.parent==1{{/if}}">
      <{{ resultGroup }}{{ resultShort }}Meta :showStatus="false"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
       />
    </div>
  {{/if}}
{{/each}}
    </div>
    <div :class="`col-md-${5-(sectionCounts.parent>0?4:0)}`" v-if="!loading && sectionCounts.consumeRight>0"></div>
    <div class="col-md-3" v-if="!loading && sectionCounts.consumeRight>0">
{{#each resolvers}}
  {{#if (and (eq type 'consume') (and (ne resultShort 'Node') (ne resultShort 'Distrib')))}}
      <{{ resultGroup }}{{ resultShort }}Meta v-if="!loading && conditions['{{name}}'](result)" :showStatus="false"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
       />
  {{/if}}
{{/each}}
    </div>
  </div>
  <div class="row q-mb-sm q-ml-sm">
    <div class="col-md-1" v-if="!loading && sectionCounts.users==0"></div>
    <div class="col-md-3" v-if="!loading && sectionCounts.users>0">
{{#each resolvers}}
  {{#if (eq type 'users')}}
      <{{ resultGroup }}{{ resultShort }}List :useRefresh="false"
        v-if="!loading && conditions['{{name}}'](result)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
       />
  {{/if}}
{{/each}}
    </div>
    <div :class="`col-md-${6+(sectionCounts.uses<1?2:0)+(sectionCounts.users<1?2:0)}`">
      <div><{{ group }}{{ short }}View :useActions="true"
        v-if="!loading && model['metadata'] != undefined"
        :model="sanitizeData(model)"
        @on-delete="(meta)=>{actionDelete(deletor, meta)}"
        /></div>
{{#each resolvers}}
  {{#if (eq type 'equity')}}
    <div>
      <{{ resultGroup }}{{ resultShort }}View :useActions="false" :showLink="true"
        v-if="!loading && conditions['{{name}}'](result)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
       />
    </div>
  {{/if}}
{{/each}}
    </div>
    <div class="col-md-1" v-if="!loading && sectionCounts.uses==0"></div>
    <div class="col-md-3" v-if="!loading && sectionCounts.uses>0">
{{#each resolvers}}
  {{#if (eq type 'use')}}
      <{{ resultGroup }}{{ resultShort }}List :useRefresh="false"
        v-if="!loading && conditions['{{name}}'](result)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
       />
  {{/if}}
{{/each}}
    </div>
{{#each resolvers}}
  {{#if (or (eq type 'child') (eq type 'provide'))}}
    <div :class="`col-md-${sectionCounts.bellow<1?12:sectionCounts.bellow>4?3:12/sectionCounts.bellow}`" v-if="!loading && conditions['{{name}}'](result)">
      <{{ resultGroup }}{{ resultShort }}List :useRefresh="false"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
       />
    </div>
  {{/if}}
{{/each}}
  </div>
</template>
