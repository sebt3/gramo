<script setup lang="ts">
const { defineAsyncComponent } = await import('vue')
import {{ group }}{{ short }}Query from '@/queries/{{ group }}/{{ short }}.details.graphql'
{{#if (defined crd)}}
{{#if namespaced}}
import {{ short }}Delete from '@/queries/core/namespacedObject.delete.graphql'
{{else}}
import {{ short }}Delete from '@/queries/core/clusteredObject.delete.graphql'
{{/if}}
{{else}}
import {{ short }}Delete from '@/queries/{{ group }}/{{ short }}.delete.graphql'
{{/if}}
const { i18n } = await import("../../../libs/i18n")
{{#each listTargets}}
  {{#if (eq type 'consume')}}
const { {{ name }}ReadExcludes: {{ group }}{{ name }}ListExcludes } = await import('../../../libs/{{ group }}/custom.js')
  {{else}}
const { {{ name }}ListExcludes: {{ group }}{{ name }}ListExcludes } = await import('../../../libs/{{ group }}/custom.js')
  {{/if}}
{{/each}}
const { useRouter } = await import('vue-router')
const router = useRouter();
const { ref, sanitizeData, useQuery, useMutation, use{{ short }}, {{ short }}ReadExcludes } = await import('../../../libs/{{ group }}/{{ short }}.js')
const { actionDelete, onErrorHandler, notifySuccess, notifyError, onNot{{ short }}Found, navigation } = use{{ short }}(router);
{{#if namespaced}}
const { setNamespacedItemFromRoute } = await import('../../../libs/core/navigation.js')
setNamespacedItemFromRoute();
{{else}}
const { setItemFromRoute } = await import('../../../libs/core/navigation.js')
setItemFromRoute();
{{/if}}
const { result, loading, onResult, onError } = useQuery({{ group }}{{ short }}Query, {
  "obj": {
    "filters": [
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentItem
      }
    ], "excludes": {{ short }}ReadExcludes
  },
{{#each resolvers}}
  "{{ name }}": {"filters": [], "excludes": {{ resultGroup }}{{ resultShort }}ListExcludes},
{{/each}}
{{#if namespaced}}
  "namespace": {
    "filters": [
      {
        "op": "eq",
        "path": "metadata/name",
        "value": navigation.currentNamespace
      }
    ]
  }
{{/if}}
}, navigation.refreshOption);onError(onErrorHandler);
const { mutate: deletor, onDone: onDeleteDone, onError: onDeleteError } = useMutation({{ short }}Delete);
const conditions = ref({
{{#each resolvers}}
  {{#if ../namespaced}}
    {{#if (or (eq type 'parent') (eq type 'consume'))}}
  "{{name}}": (data) => data != undefined && Array.isArray(data.k8sNamespace) && data.k8sNamespace.map(ns=>ns['{{ ../group }}{{ ../short }}']).flat().map(obj=>obj['{{name}}']!=null).reduce((acc,cur)=>acc||cur,false),
    {{else}}
  "{{name}}": (data) => data != undefined && Array.isArray(data.k8sNamespace) && data.k8sNamespace.map(ns=>ns['{{ ../group }}{{ ../short }}']).flat().map(obj=>obj['{{name}}']).flat().filter(o=>o!=null).length>0,
    {{/if}}
  {{else}}
    {{#if (or (eq type 'parent') (eq type 'consume'))}}
  "{{name}}": (data) => data != undefined && Array.isArray(data['{{ ../group }}{{ ../short }}']) && data['{{ ../group }}{{ ../short }}'].map(obj=>obj['{{name}}']!=null).reduce((acc,cur)=>acc||cur,false),
    {{else}}
      {{#if (eq name 'childcoreCrdObject')}}
  "{{name}}": (data) => data != undefined && Array.isArray(data['{{ ../group }}{{ ../short }}']),
      {{else}}
  "{{name}}": (data) => data != undefined && Array.isArray(data['{{ ../group }}{{ ../short }}']) && data['{{ ../group }}{{ ../short }}'].map(obj=>obj['{{name}}']).flat().filter(o=>o!=null).length>0,
      {{/if}}
    {{/if}}
  {{/if}}
{{/each}}
});
const sectionCounts = ref({
  consumeLeft: 0,
  parent: 0,
  consumeRight: 0,
  gets: 0,
  users: 0,
  uses: 0,
  bellow: 0
});
const model = ref({});
onResult(res => {
  onNot{{ short }}Found(res);
  if ( !res.loading ) {
    if (res.data!=undefined{{#if namespaced}} && Array.isArray(res.data.k8sNamespace) {{/if}} && res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]!=undefined && res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]!=null) {
      model.value = res.data{{#if namespaced}}.k8sNamespace[0]{{/if}}.{{ group }}{{ short }}[0]
    }
    sectionCounts.value.consumeLeft = 0;
    sectionCounts.value.consumeRight = 0;
    sectionCounts.value.parent = 0;
    sectionCounts.value.gets = 0;
    sectionCounts.value.users = 0;
    sectionCounts.value.uses = 0;
    sectionCounts.value.bellow = 0;
    {{#if (eq group 'cattle')}}
{{> cattleCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'certmanager')}}
{{> certmanagerCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'cilium')}}
{{> ciliumCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'cnpg')}}
{{> cnpgCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'fluxcd')}}
{{> fluxcdCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'jaegertracing')}}
{{> jaegertracingCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'k8s')}}
{{> k8sCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'k8up')}}
{{> k8upCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'mariadb')}}
{{> mariadbCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'mongodb')}}
{{> mongodbCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'monitoring')}}
{{> monitoringCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'opentelemetry')}}
{{> opentelemetryCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'oracle')}}
{{> oracleCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'projectcalico')}}
{{> projectcalicoCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'rabbitmq')}}
{{> rabbitmqCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'redis')}}
{{> redisCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'secretgenerator')}}
{{> secretgeneratorCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'traefik')}}
{{> traefikCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'vynil')}}
{{> vynilCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
    {{#if (eq group 'zalando')}}
{{> zalandoCustom ctx=. page='view' operation='dataPrepare'}}
    {{/if}}
{{#each resolvers}}
  {{#if (and (eq type 'consume') (eq resultShort 'Node'))}}
    sectionCounts.value.consumeLeft += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (and (eq type 'consume') (and (ne resultShort 'Node') (or (ne resultGroup 'vynil') (and (ne resultShort 'Distrib') (ne resultShort 'Category')))))}}
    sectionCounts.value.consumeRight += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'parent')}}
    sectionCounts.value.parent += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'users')}}
    sectionCounts.value.users += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'use')}}
    sectionCounts.value.uses += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
  {{#if (eq type 'child')}}
    {{#unless (and (eq resultGroup 'core') (or (eq resultShort 'PodMetrics') (eq resultShort 'NodeMetrics')))}}
    sectionCounts.value.bellow += conditions.value["{{name}}"](res.data)?1:0;
    {{/unless}}
  {{/if}}
  {{#if (eq type 'provide')}}
    sectionCounts.value.bellow += conditions.value["{{name}}"](res.data)?1:0;
  {{/if}}
{{/each}}
  }
});
onDeleteDone(() => {notifySuccess(i18n.global.t('delete.notifyDone'))})
onDeleteError((err) => {
  notifyError(i18n.global.t('delete.notifyError'));
  console.log('deletion error',err);
})
const TableSkeleton = defineAsyncComponent(() => import( '@/components/core/TableSkeleton.vue'));
const GenericMeta   = defineAsyncComponent(() => import( '@/components/generic/GenericMeta.vue'));
const GenericList   = defineAsyncComponent(() => import( '@/components/generic/GenericList.vue'));
const GenericView   = defineAsyncComponent(() => import( '@/components/generic/GenericView.vue'));
{{#each resolvers}}
  {{#if (or (eq resultGroup 'core') (or (and (eq resultGroup 'vynil') (eq resultShort 'Category')) (and (eq resultGroup 'vynil') (eq resultShort 'Package'))))}}
    {{#if (or (eq type 'parent') (eq type 'consume'))}}
const {{ resultGroup }}{{ resultShort }}Meta = defineAsyncComponent(() => import( '@/components/{{ resultGroup }}/{{ resultShort }}Meta.vue'));
    {{else}}
const {{ resultGroup }}{{ resultShort }}List = defineAsyncComponent(() => import( '@/components/{{ resultGroup }}/{{ resultShort }}List.vue'));
    {{/if}}
  {{/if}}
{{/each}}
</script>
<template><div>
  <TableSkeleton :showNamespace="{{toJson namespaced}}" v-if="loading" />
  <div class="row q-mb-sm q-ml-sm">
    <div class="col-md-3" v-if="!loading && sectionCounts.consumeLeft>0">
{{#each resolvers}}
  {{#if (and (eq type 'consume') (or (eq resultShort 'Node') (eq resultShort 'Distrib')))}}
      <GenericMeta group="{{ resultGroup }}" short="{{ resultShort }}" v-if="!loading && conditions['{{name}}'](result)" :showStatus="false"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
  {{/if}}
{{/each}}
    </div>
    <div :class="`col-md-${4-(sectionCounts.consumeLeft>0?3:0)}`" v-if="!loading && sectionCounts.parent+sectionCounts.consumeRight>0"></div>
    <div class="col-md-4" v-if="!loading && sectionCounts.parent>0">
{{#each resolvers}}
  {{#if (eq type 'parent')}}
    <div v-if="!loading && conditions['{{name}}'](result){{#if (eq resultShort 'Install')}}&&sectionCounts.parent==1{{/if}}">
      <GenericMeta group="{{ resultGroup }}" short="{{ resultShort }}" :showStatus="false"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    </div>
  {{/if}}
{{/each}}
    </div>
    <div :class="`col-md-${5-(sectionCounts.parent>0?4:0)}`" v-if="!loading && sectionCounts.consumeRight>0"></div>
    <div class="col-md-3" v-if="!loading && sectionCounts.consumeRight>0">
{{#each resolvers}}
  {{#if (and (eq type 'consume') (and (ne resultShort 'Node') (or (ne resultGroup 'vynil') (and (ne resultShort 'Distrib') (ne resultShort 'Category')))))}}
    {{#if (or (eq resultGroup 'core') (or (and (eq resultGroup 'vynil') (eq resultShort 'Category')) (and (eq resultGroup 'vynil') (eq resultShort 'Package'))))}}
      <{{ resultGroup }}{{ resultShort }}Meta v-if="!loading && conditions['{{name}}'](result)" :showStatus="false"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    {{else}}
      <GenericMeta group="{{ resultGroup }}" short="{{ resultShort }}" v-if="!loading && conditions['{{name}}'](result)" :showStatus="false"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    {{/if}}
  {{/if}}
{{/each}}
    </div>
  </div>
  <div class="row q-mb-sm q-ml-sm">
    <div class="col-md-1" v-if="!loading && sectionCounts.users==0"></div>
    <div class="col-md-3" v-if="!loading && sectionCounts.users>0">
{{#each resolvers}}
  {{#if (eq type 'users')}}
    {{#if (or (eq resultGroup 'core') (or (and (eq resultGroup 'vynil') (eq resultShort 'Category')) (and (eq resultGroup 'vynil') (eq resultShort 'Package'))))}}
      <{{ resultGroup }}{{ resultShort }}List :useRefresh="false" :parent="sanitizeData(model)"
        v-if="!loading && conditions['{{name}}'](result)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    {{else}}
      <GenericList group="{{ resultGroup }}" short="{{ resultShort }}" :useRefresh="false" :parent="sanitizeData(model)"
        v-if="!loading && conditions['{{name}}'](result)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    {{/if}}
  {{/if}}
{{/each}}
    </div>
    <div :class="`col-md-${6+(sectionCounts.uses<1?2:0)+(sectionCounts.users<1?2:0)}`">
      <div><GenericView group="{{ group }}" short="{{ short }}" :useActions="true"
        v-if="!loading && model['metadata'] != undefined"
        :model="sanitizeData(model)"
        @on-delete="(meta)=>{actionDelete(deletor, meta)}"
        /></div>
{{#each resolvers}}
  {{#if (eq type 'equity')}}
    <div>
      <GenericView group="{{ resultGroup }}" short="{{ resultShort }}" :useActions="false" :showLink="true" :showLabels="false"
        v-if="!loading && conditions['{{name}}'](result)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    </div>
  {{/if}}
{{/each}}
    </div>
    <div class="col-md-1" v-if="!loading && sectionCounts.uses==0"></div>
    <div class="col-md-3" v-if="!loading && sectionCounts.uses>0">
{{#each resolvers}}
  {{#if (eq type 'use')}}
    {{#if (or (eq resultGroup 'core') (or (and (eq resultGroup 'vynil') (eq resultShort 'Category')) (and (eq resultGroup 'vynil') (eq resultShort 'Package'))))}}
      <{{ resultGroup }}{{ resultShort }}List :useRefresh="false" :parent="sanitizeData(model)"
        v-if="!loading && conditions['{{name}}'](result)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    {{else}}
      <GenericList group="{{ resultGroup }}" short="{{ resultShort }}" :useRefresh="false" :parent="sanitizeData(model)"
        v-if="!loading && conditions['{{name}}'](result)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    {{/if}}
  {{/if}}
{{/each}}
    </div>
  </div>
  <div class="row q-mb-sm q-ml-sm">
{{#each resolvers}}
  {{#if (or (eq type 'child') (eq type 'provide'))}}
    {{#if (and (eq resultGroup 'core') (or (eq resultShort 'PodMetrics') (eq resultShort 'NodeMetrics')))}}
    <div :class="`col-md-12`" style="order: -1" v-if="!loading && conditions['{{name}}'](result)">
    {{else}}
    <div :class="`col-md-${sectionCounts.bellow<1?12:sectionCounts.bellow>4?3:12/sectionCounts.bellow}`" v-if="!loading && conditions['{{name}}'](result)">
    {{/if}}
    {{#if (or (eq resultGroup 'core') (or (and (eq resultGroup 'vynil') (eq resultShort 'Category')) (and (eq resultGroup 'vynil') (eq resultShort 'Package'))))}}
      <{{ resultGroup }}{{ resultShort }}List :useRefresh="false" :parent="sanitizeData(model)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    {{else}}
      <GenericList group="{{ resultGroup }}" short="{{ resultShort }}" :useRefresh="false" :parent="sanitizeData(model)"
        :model="result{{#if ../namespaced}}.k8sNamespace[0]{{/if}}.{{ ../group }}{{ ../short }}[0].{{ name }}"
        origin="{{inverse}}{{../group}}{{../short}}"
       />
    {{/if}}
    </div>
  {{/if}}
{{/each}}
  </div>
</div></template>
