<script setup lang="ts">
defineEmits(['refresh','on-delete']);
withDefaults(defineProps<{model: object[], parent?:object, useAction?:boolean, useRefresh?: boolean, showNamespace?:boolean, origin?:string}>(),{
  useAction: false,
  useRefresh: true,
  showNamespace: false,
});
import { color{{ short }}, icon{{ short }} } from '../../libs/{{ group }}/custom.js'
import { elude, defineAsyncComponent, ref, use{{ short }}, {{ short }}Columns{{#if namespaced}}, {{ short }}AllColumns{{/if}} } from '../../libs/{{ group }}/{{ short }}.js'
const { $q, can, actionNew, toEdit, toParentView, pagination{{#if namespaced}}, navigation, isNamespaced{{/if}} } = use{{ short }}();
const filter = ref('');
const TableHeader = defineAsyncComponent(() => import( '@/components/core/TableHeader.vue'));
</script>
<template>
  <q-card bordered class="q-ma-sm">
    <TableHeader title="{{ short }}" :icon="icon{{ short }}" :class="`bg-${ color{{ short }} }`" :usecreate="useAction&&can('create'{{#if namespaced}},navigation.currentNamespace.value{{/if}})" :userefresh="useRefresh" itemtype='{{ group }} {{ short }}' v-model:model-filter="filter" @refresh="$emit('refresh')" @create="actionNew({{#if namespaced}}navigation.currentNamespace.value{{/if}})" />
    <q-card-section class="q-pa-none">
    <q-table :rows="model" :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`" :columns="({{#if namespaced}}(showNamespace||!isNamespaced())?{{ short }}AllColumns:{{/if}}{{ short }}Columns).filter(c=>c.name!='Action'||useAction)" class="no-shadow" v-model:pagination="pagination" :filter="filter" hide-bottom>
{{#if namespaced}}
        <template v-slot:body-cell-Namespace="props" v-if="showNamespace||!isNamespaced()">
          <q-td :props="props">
            <router-link :to="{ name: '{{ group }}{{ short }}Table', params: { namespace: props.row.metadata.namespace }}">\{{ props.row.metadata.namespace }}</router-link>
          </q-td>
        </template>
{{/if}}
        <template v-slot:body-cell-Problems="props">
          <q-td :props="props">
            <q-chip v-if="props.row.getcoreProblem==null" class="glossy" color="positive" text-color="white" icon="done" />
            <div v-else class="column">
              <div class="col" v-for="problem in props.row.getcoreProblem">
                <q-chip v-bind:key="problem" class="glossy" color="negative" text-color="white" icon="error">\{{ elude(problem.description, 40) }}<q-tooltip>\{{ problem.description }}</q-tooltip></q-chip>
              </div>
            </div>
          </q-td>
        </template>
    {{#if (eq group 'cattle')}}
{{> cattleCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'certmanager')}}
{{> certmanagerCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'cilium')}}
{{> ciliumCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'cnpg')}}
{{> cnpgCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'fluxcd')}}
{{> fluxcdCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'jaegertracing')}}
{{> jaegertracingCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'k8s')}}
{{> k8sCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'k8up')}}
{{> k8upCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'mariadb')}}
{{> mariadbCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'mongodb')}}
{{> mongodbCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'monitoring')}}
{{> monitoringCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'opentelemetry')}}
{{> opentelemetryCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'oracle')}}
{{> oracleCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'projectcalico')}}
{{> projectcalicoCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'rabbitmq')}}
{{> rabbitmqCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'redis')}}
{{> redisCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'secretgenerator')}}
{{> secretgeneratorCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'traefik')}}
{{> traefikCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'vynil')}}
{{> vynilCustom ctx=. operation='templateColumns'}}
    {{/if}}
    {{#if (eq group 'zalando')}}
{{> zalandoCustom ctx=. operation='templateColumns'}}
    {{/if}}
        <template v-slot:body-cell-Name="props">
          <q-td :props="props">
            <router-link :to="{ name: origin?`{{ group }}{{ short }}ViewFrom${origin}`:'{{ group }}{{ short }}View',  params: { {{#if namespaced}}namespace: props.row.metadata.namespace, {{/if}}name: props.row.metadata.name }}">\{{ props.row.metadata.name }}</router-link>
          </q-td>
        </template>
        <template v-slot:body-cell-Action="props" v-if="useAction">
          <q-td :props="props">
            <q-btn icon="edit" size="sm" class="q-ml-sm" flat dense
              @click="toEdit({{#if namespaced}}props.row.metadata.namespace, {{/if}}props.row.metadata.name)"
              v-if="(props.row.parentReference==null  || (props.row['metadata']['annotations'] != undefined && props.row['metadata']['annotations']['gramo.solidite.fr/no-parent'] == 'true' )) && can('patch'{{#if namespaced}},props.row.metadata.namespace{{/if}})">
              <q-tooltip>\{{ $t('core.editTooltip', {short: '{{ short }}', name: props.row.metadata.name}) }}</q-tooltip>
            </q-btn>
            <q-btn icon="delete" size="sm" class="q-ml-sm" flat dense
              @click="$emit('on-delete', props.row.metadata)"
              v-if="props.row.parentReference==null && can('delete'{{#if namespaced}},props.row.metadata.namespace{{/if}})">
              <q-tooltip>\{{ $t('core.deleteTooltip', {short: '{{ short }}', name: props.row.metadata.name}) }}</q-tooltip>
            </q-btn>
            <q-btn icon="arrow_upward" size="sm" class="q-ml-sm" flat dense
              @click="toParentView(props.row.parentReference.group, props.row.parentReference.short, props.row.parentReference.name, props.row.parentReference.namespace)"
              v-if="props.row.parentReference!=null">
              <q-tooltip>\{{ $t('core.viewParentTooltip', {short: props.row.parentReference.short, name: props.row.parentReference.name}) }}</q-tooltip>
            </q-btn>
          </q-td>
        </template>
      </q-table>
    </q-card-section>
  </q-card>
</template>
