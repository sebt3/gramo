<script setup lang="ts">
import { defineAsyncComponent } from 'vue'
import { onMounted } from "vue";
import { elude, getColor, getConditionColor} from "../../libs/core/"
const  OpenApiEdit   = defineAsyncComponent(() => import( '@/components/core/OpenApiEdit.vue'));
const  EventList   = defineAsyncComponent(() => import( '@/components/core/EventList.vue'));
const  MonacoViewer   = defineAsyncComponent(() => import( '@/components/core/MonacoViewer.vue'));
import { use{{ short }}, getProperties, {{ short }}Definition } from '../../libs/{{ group }}/{{ short }}.js'
import { color{{ short }}, icon{{ short }} } from '../../libs/{{ group }}/custom.js'
import { useQuasar } from 'quasar'
const $q = useQuasar()
{{#if namespaced}}
const { can, writeProperties, onlyReadProperties, toParentView, viewer, viewerUpdate, toEdit, actionDelete, setNamespacedItemFromRoute } = use{{ short }}();setNamespacedItemFromRoute();
{{else}}
const { can, writeProperties, onlyReadProperties, toParentView, viewer, viewerUpdate, toEdit, actionDelete, setItemFromRoute } = use{{ short }}();setItemFromRoute();
{{/if}}
defineEmits(['on-delete']);
const props = withDefaults(defineProps<{model: object, useActions?:boolean, showLink?:boolean, origin?:string}>(), {
  useActions: false,
  showLink: false,
});
onMounted(() => {
  viewerUpdate(onlyReadProperties(props.model));
})
</script>
<template>
  <q-card bordered class="q-ma-sm">
    <q-tabs v-model="viewer.tab" :class="`bg-${ color{{ short }} } text-grey-2`" active-color="white" align="justify">
      <q-avatar :icon="icon{{ short }}" />
      <q-tab label="{{ short }}" name="meta" />
      <q-tab label="Events" name="events" v-if="Array.isArray(model['getcoreEvent'])" />
      <q-tab label="Configuration" name="simple" />
{{#each writeProperties}}
  {{#if (isJsonObject this ../gqlDefs)}}
      <q-tab label="{{this}}" name="{{this}}" v-if="model['{{this}}']!=null" />
  {{/if}}
{{/each}}
      <q-tab label="full Yaml" name="yaml" />
      <q-btn-group push class="float-right text-capitalize shadow-3 q-mr-sm" v-if="useActions">
        <q-btn icon="edit"
          @click="toEdit({{#if namespaced}}model.metadata.namespace, {{/if}}model.metadata.name)"
          v-if="(model.parentReference==null || (model['metadata']['annotations'] != undefined && model['metadata']['annotations']['gramo.solidite.fr/no-parent'] == 'true' )) && can('patch'{{#if namespaced}},model.metadata.namespace{{/if}})">
          <q-tooltip>Edit</q-tooltip>
        </q-btn>
        <q-btn icon="delete"
          @click="$emit('on-delete', model.metadata)"
          v-if="model.parentReference==null && can('delete'{{#if namespaced}},model.metadata.namespace{{/if}})">
          <q-tooltip>Delete</q-tooltip>
        </q-btn>
        <q-btn icon="arrow_upward"
          @click="toParentView(model.parentReference.group, model.parentReference.short, model.parentReference.name, model.parentReference.namespace)"
          v-if="model.parentReference!=null">
          <q-tooltip>View parent \{{ model.parentReference.short }} \{{ model.parentReference.name }}</q-tooltip>
        </q-btn>
      </q-btn-group>
    </q-tabs>
    <q-tab-panels v-model="viewer.tab" animated>
      <q-tab-panel name="meta" :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`">
      <div class="q-gutter-md">
{{> vueNameFields namespaced=namespaced group=group short=short }}
{{#if (propertyContain readProperties 'status')}}
{{> vueStatusFields properties=definition.properties crd=crd }}
{{/if}}
{{> vueLabelFields }}
      </div>
      </q-tab-panel>
      <q-tab-panel name="simple" :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`">
        <OpenApiEdit
{{#if (and (eq group 'vynil') (eq short 'Install'))}}
          :in="model['spec']['options']"
          :properties="getProperties({properties: model.consumevynilPackage.options})"
{{else}}
  {{#if (eq (propertyCount writeProperties) 1)}}
    {{#each writeProperties}}
          :in="model['{{this}}']"
          :properties="getProperties({{ ../short }}Definition.properties.{{this}})"
    {{/each}}
  {{else}}
          :in="model"
          :properties="getProperties({{ short }}Definition,([k])=>writeProperties.includes(k))"
  {{/if}}
{{/if}}
          :read-only="true"
          :showdefault="false"
        />
      </q-tab-panel>
      <q-tab-panel name="events" :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`" v-if="Array.isArray(model['getcoreEvent'])">
        <EventList :model="model['getcoreEvent']"
         />
      </q-tab-panel>
{{#each writeProperties}}
  {{#if (isJsonObject this ../gqlDefs)}}
      <q-tab-panel name="{{this}}" v-if="model['{{this}}']!=null" :class="`bg-${ color{{ ../short }} }-${$q.dark.isActive?'10':'1'}`">
        <MonacoViewer :text="viewer.props.{{this}}" :key="viewer.props.{{this}}" />
      </q-tab-panel>
  {{/if}}
{{/each}}
      <q-tab-panel name="yaml" :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`">
        <MonacoViewer :text="viewer.full" :key="viewer.full" />
      </q-tab-panel>
    </q-tab-panels>
  </q-card>
</template>
