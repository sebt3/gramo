<script setup lang="ts">
{{#if (defined crd)}}
{{#if namespaced}}
import {{ short }}New from '@/queries/core/namespacedObject.create.graphql'
{{else}}
import {{ short }}New from '@/queries/core/clusteredObject.create.graphql'
{{/if}}
{{else}}
import {{ short }}New from '@/queries/{{ group }}/{{ short }}.create.graphql'
{{/if}}
import { color{{ short }}, icon{{ short }} } from '../../../libs/{{ group }}/custom.js'
import { defineAsyncComponent, i18n, ref, useMutation, use{{ short }}, {{ short }}Definition, sanitizeData, getProperties } from '@/libs/{{ group }}/{{ short }}.js'
const { $q, editor, router, navigation, set{{#if namespaced}}Namespaced{{/if}}ItemFromRoute, notifySuccess, notifyError, notifyWorking } = use{{ short }}();set{{#if namespaced}}Namespaced{{/if}}ItemFromRoute();
const { mutate, onDone, onError } = useMutation({{ short }}New);
const name = ref('');
const form = ref(null);
const obj  = ref({});
const model = ref({});
onDone(() => {
  notifySuccess(i18n.global.t('new.notifyDone'));
  router.go(-1);
})
onError((err) => {
  notifyError(i18n.global.t('new.notifyError'));
  console.log('mutation error',err);
})
function onFinalSubmit() {
  notifyWorking(i18n.global.t('new.notifyWorking'));
  mutate({
{{#if (defined crd)}}
    "group": '{{apiGroup}}', "version": '{{apiVersion}}', "plural": '{{crd.status.acceptedNames.plural}}', "kind": '{{ short }}',
{{/if}}
    "metadata": {
{{#if namespaced}}
    "namespace": navigation.currentNamespace.value,
{{/if}}
    "name": name.value
    },
{{#each writeProperties}}
    "{{this}}": obj.value!=null&&Object.keys(obj.value).includes('{{this}}')?sanitizeData(obj.value.{{this}}):null,
{{/each}}
  });
}
async function onSubmit(o:object) {
  if (form.value!=null) {
    obj.value = o;
    form.value.submit()
  } else {
    notifyError(i18n.global.t('new.notifyNotReady'));
  }
}
const {{ group }}{{ short }}Edit = defineAsyncComponent(() => import( '@/components/{{ group }}/{{ short }}Edit.vue'));
const MetadataNew = defineAsyncComponent(() => import( '@/components/core/MetadataNew.vue'));
</script>
<template>
  <div class="row q-mb-sm q-ml-sm">
    <div class="col-md-12">
      <q-form ref="form" @submit="onFinalSubmit" class="q-gutter-md q-pt-sm q-ml-sm">
        <q-card bordered class="q-ma-sm">
          <q-card-section  :class="`bg-${ color{{ short }} } text-grey-2`">
            <div class="text-subtitle q-mt-none q-mb-none q-pt-none q-pb-none">\{{ $t('meta.metadata') }}</div>
          </q-card-section>
          <q-card-section :class="`bg-${ color{{ short }} }-${$q.dark.isActive?'10':'1'}`">
            <MetadataNew v-model:name="name" :namespaced="{{namespaced}}" />
          </q-card-section>
        </q-card>
      </q-form>
    </div>
    <div class="col-md-12">
      <{{ group }}{{ short }}Edit
        :model="model"
        @on-submit="onSubmit"
       />
    </div>
  </div>
</template>